
finalproject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000290  00800060  000074f6  0000758a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  008002f0  008002f0  0000781a  2**0
                  ALLOC
  3 .stab         00006858  00000000  00000000  0000781c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fda  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0001004e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0001020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00010422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015210  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000153f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000156f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f4 e7       	ldi	r31, 0x74	; 116
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <main>
      8a:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 37 	jmp	0x6f42	; 0x6f42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ec       	ldi	r26, 0xC1	; 193
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 37 	jmp	0x6f7a	; 0x6f7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 37 	jmp	0x6f92	; 0x6f92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 37 	jmp	0x6f92	; 0x6f92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 37 	jmp	0x6f42	; 0x6f42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ec       	ldi	r24, 0xC1	; 193
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 37 	jmp	0x6f7a	; 0x6f7a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 37 	jmp	0x6f52	; 0x6f52 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 ec       	ldi	r22, 0xC1	; 193
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c5 37 	jmp	0x6f8a	; 0x6f8a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c9 37 	jmp	0x6f92	; 0x6f92 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c9 37 	jmp	0x6f92	; 0x6f92 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c9 37 	jmp	0x6f92	; 0x6f92 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 37 	jmp	0x6f54	; 0x6f54 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c6 37 	jmp	0x6f8c	; 0x6f8c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b1 37 	jmp	0x6f62	; 0x6f62 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 cd 37 	jmp	0x6f9a	; 0x6f9a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a9 37 	jmp	0x6f52	; 0x6f52 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c5 37 	jmp	0x6f8a	; 0x6f8a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e7 53       	subi	r30, 0x37	; 55
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <alarm_init>:
static alarm_t alarm_time = {6, 30, false};
static bool alarm_triggered = false;

// Initialize alarm
void alarm_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
    alarm_time.hour = 6;
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	80 93 c9 02 	sts	0x02C9, r24
    alarm_time.minute = 30;
     ef8:	8e e1       	ldi	r24, 0x1E	; 30
     efa:	80 93 ca 02 	sts	0x02CA, r24
    alarm_time.enabled = false;
     efe:	10 92 cb 02 	sts	0x02CB, r1
    alarm_triggered = false;
     f02:	10 92 f0 02 	sts	0x02F0, r1
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <alarm_set>:

// Set alarm time
void alarm_set(uint8_t hour, uint8_t minute)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <alarm_set+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6a 83       	std	Y+2, r22	; 0x02
    alarm_time.hour = hour;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	80 93 c9 02 	sts	0x02C9, r24
    alarm_time.minute = minute;
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	80 93 ca 02 	sts	0x02CA, r24
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <alarm_enable>:

// Enable alarm
void alarm_enable(void)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
    alarm_time.enabled = true;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 cb 02 	sts	0x02CB, r24
    alarm_triggered = false;
     f3e:	10 92 f0 02 	sts	0x02F0, r1
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <alarm_disable>:

// Disable alarm
void alarm_disable(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
    alarm_time.enabled = false;
     f50:	10 92 cb 02 	sts	0x02CB, r1
    alarm_triggered = false;
     f54:	10 92 f0 02 	sts	0x02F0, r1
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <alarm_stop>:

// Stop alarm
void alarm_stop(void)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
    alarm_triggered = false;
     f66:	10 92 f0 02 	sts	0x02F0, r1
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <alarm_check_trigger>:

// Check if alarm should trigger
bool alarm_check_trigger(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <alarm_check_trigger+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <alarm_check_trigger+0x8>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
    if (!alarm_time.enabled || alarm_triggered) {
     f7c:	80 91 cb 02 	lds	r24, 0x02CB
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	89 27       	eor	r24, r25
     f84:	88 23       	and	r24, r24
     f86:	21 f4       	brne	.+8      	; 0xf90 <alarm_check_trigger+0x20>
     f88:	80 91 f0 02 	lds	r24, 0x02F0
     f8c:	88 23       	and	r24, r24
     f8e:	11 f0       	breq	.+4      	; 0xf94 <alarm_check_trigger+0x24>
        return false;
     f90:	1c 82       	std	Y+4, r1	; 0x04
     f92:	12 c0       	rjmp	.+36     	; 0xfb8 <alarm_check_trigger+0x48>
    }
    
    time_t current_time;
    rtc_get_time(&current_time);
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	0e 94 af 30 	call	0x615e	; 0x615e <rtc_get_time>
    
    if (alarm_time_matches(current_time.hour, current_time.minute)) {
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	69 2f       	mov	r22, r25
     fa2:	0e 94 4a 08 	call	0x1094	; 0x1094 <alarm_time_matches>
     fa6:	88 23       	and	r24, r24
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <alarm_check_trigger+0x46>
        alarm_triggered = true;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 f0 02 	sts	0x02F0, r24
        return true;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8c 83       	std	Y+4, r24	; 0x04
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <alarm_check_trigger+0x48>
    }
    
    return false;
     fb6:	1c 82       	std	Y+4, r1	; 0x04
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <alarm_is_enabled>:

// Check if alarm is enabled
bool alarm_is_enabled(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
    return alarm_time.enabled;
     fd0:	80 91 cb 02 	lds	r24, 0x02CB
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <alarm_get_time>:

// Get alarm time
alarm_t alarm_get_time(void)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	2c 97       	sbiw	r28, 0x0c	; 12
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
    return alarm_time;
     fee:	ce 01       	movw	r24, r28
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	9d 83       	std	Y+5, r25	; 0x05
     ff4:	8c 83       	std	Y+4, r24	; 0x04
     ff6:	e9 ec       	ldi	r30, 0xC9	; 201
     ff8:	f2 e0       	ldi	r31, 0x02	; 2
     ffa:	ff 83       	std	Y+7, r31	; 0x07
     ffc:	ee 83       	std	Y+6, r30	; 0x06
     ffe:	f3 e0       	ldi	r31, 0x03	; 3
    1000:	f8 87       	std	Y+8, r31	; 0x08
    1002:	ee 81       	ldd	r30, Y+6	; 0x06
    1004:	ff 81       	ldd	r31, Y+7	; 0x07
    1006:	00 80       	ld	r0, Z
    1008:	8e 81       	ldd	r24, Y+6	; 0x06
    100a:	9f 81       	ldd	r25, Y+7	; 0x07
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	9f 83       	std	Y+7, r25	; 0x07
    1010:	8e 83       	std	Y+6, r24	; 0x06
    1012:	ec 81       	ldd	r30, Y+4	; 0x04
    1014:	fd 81       	ldd	r31, Y+5	; 0x05
    1016:	00 82       	st	Z, r0
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	9d 83       	std	Y+5, r25	; 0x05
    1020:	8c 83       	std	Y+4, r24	; 0x04
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	91 50       	subi	r25, 0x01	; 1
    1026:	98 87       	std	Y+8, r25	; 0x08
    1028:	e8 85       	ldd	r30, Y+8	; 0x08
    102a:	ee 23       	and	r30, r30
    102c:	51 f7       	brne	.-44     	; 0x1002 <alarm_get_time+0x28>
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	29 81       	ldd	r18, Y+1	; 0x01
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	29 87       	std	Y+9, r18	; 0x09
    103c:	8a 87       	std	Y+10, r24	; 0x0a
    103e:	9b 87       	std	Y+11, r25	; 0x0b
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	ab 85       	ldd	r26, Y+11	; 0x0b
    1046:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	2c 96       	adiw	r28, 0x0c	; 12
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <alarm_display>:

// Display alarm time on LCD
void alarm_display(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	60 97       	sbiw	r28, 0x10	; 16
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    char time_str[16];
    alarm_format_time(time_str);
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <alarm_format_time>
    lcd_print(time_str);
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
}
    1082:	60 96       	adiw	r28, 0x10	; 16
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <alarm_time_matches>:

// Check if current time matches alarm time
bool alarm_time_matches(uint8_t current_hour, uint8_t current_minute)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <alarm_time_matches+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <alarm_time_matches+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	6a 83       	std	Y+2, r22	; 0x02
    return (current_hour == alarm_time.hour && current_minute == alarm_time.minute);
    10a4:	90 91 c9 02 	lds	r25, 0x02C9
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	98 17       	cp	r25, r24
    10ac:	51 f4       	brne	.+20     	; 0x10c2 <alarm_time_matches+0x2e>
    10ae:	90 91 ca 02 	lds	r25, 0x02CA
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	98 17       	cp	r25, r24
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <alarm_time_matches+0x2e>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <alarm_time_matches+0x32>
    10c2:	1c 82       	std	Y+4, r1	; 0x04
    10c4:	1b 82       	std	Y+3, r1	; 0x03
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <alarm_format_time>:

// Format alarm time to string
void alarm_format_time(char* buffer)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <alarm_format_time+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	89 83       	std	Y+1, r24	; 0x01
    sprintf(buffer, "%02d:%02d", alarm_time.hour, alarm_time.minute);
    10e4:	80 91 c9 02 	lds	r24, 0x02C9
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	80 91 ca 02 	lds	r24, 0x02CA
    10f0:	48 2f       	mov	r20, r24
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	8d b7       	in	r24, 0x3d	; 61
    10f6:	9e b7       	in	r25, 0x3e	; 62
    10f8:	08 97       	sbiw	r24, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	9e bf       	out	0x3e, r25	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	8d bf       	out	0x3d, r24	; 61
    1104:	ed b7       	in	r30, 0x3d	; 61
    1106:	fe b7       	in	r31, 0x3e	; 62
    1108:	31 96       	adiw	r30, 0x01	; 1
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    1112:	80 e6       	ldi	r24, 0x60	; 96
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	93 83       	std	Z+3, r25	; 0x03
    1118:	82 83       	std	Z+2, r24	; 0x02
    111a:	35 83       	std	Z+5, r19	; 0x05
    111c:	24 83       	std	Z+4, r18	; 0x04
    111e:	57 83       	std	Z+7, r21	; 0x07
    1120:	46 83       	std	Z+6, r20	; 0x06
    1122:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    1126:	8d b7       	in	r24, 0x3d	; 61
    1128:	9e b7       	in	r25, 0x3e	; 62
    112a:	08 96       	adiw	r24, 0x08	; 8
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	9e bf       	out	0x3e, r25	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	8d bf       	out	0x3d, r24	; 61
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <buttons_init>:
static uint8_t button_states[4] = {0};
static uint8_t last_button_states[4] = {0};
static uint8_t button_press_flags[4] = {0};

void buttons_init(void)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    // Configure row pins as outputs
    DDRB |= (1 << ROW1_PIN) | (1 << ROW2_PIN);
    114a:	a7 e3       	ldi	r26, 0x37	; 55
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e7 e3       	ldi	r30, 0x37	; 55
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	83 60       	ori	r24, 0x03	; 3
    1156:	8c 93       	st	X, r24
    
    // Configure column pins as inputs with pull-up
    DDRB &= ~((1 << COL1_PIN) | (1 << COL2_PIN));
    1158:	a7 e3       	ldi	r26, 0x37	; 55
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8f 7c       	andi	r24, 0xCF	; 207
    1164:	8c 93       	st	X, r24
    
    // Enable pull-up resistors for columns
    PORTB |= (1 << COL1_PIN) | (1 << COL2_PIN);
    1166:	a8 e3       	ldi	r26, 0x38	; 56
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 e3       	ldi	r30, 0x38	; 56
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 63       	ori	r24, 0x30	; 48
    1172:	8c 93       	st	X, r24
    
    // Initialize button states
    for (uint8_t i = 0; i < 4; i++) {
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	18 c0       	rjmp	.+48     	; 0x11a8 <buttons_init+0x68>
        button_states[i] = 0;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	fc 01       	movw	r30, r24
    1180:	ef 50       	subi	r30, 0x0F	; 15
    1182:	fd 4f       	sbci	r31, 0xFD	; 253
    1184:	10 82       	st	Z, r1
        last_button_states[i] = 0;
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	fc 01       	movw	r30, r24
    118e:	eb 50       	subi	r30, 0x0B	; 11
    1190:	fd 4f       	sbci	r31, 0xFD	; 253
    1192:	10 82       	st	Z, r1
        button_press_flags[i] = 0;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	fc 01       	movw	r30, r24
    119c:	e7 50       	subi	r30, 0x07	; 7
    119e:	fd 4f       	sbci	r31, 0xFD	; 253
    11a0:	10 82       	st	Z, r1
    
    // Enable pull-up resistors for columns
    PORTB |= (1 << COL1_PIN) | (1 << COL2_PIN);
    
    // Initialize button states
    for (uint8_t i = 0; i < 4; i++) {
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	28 f3       	brcs	.-54     	; 0x1178 <buttons_init+0x38>
        button_states[i] = 0;
        last_button_states[i] = 0;
        button_press_flags[i] = 0;
    }
}
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <buttons_read_input>:

void buttons_read_input(void)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	6d 97       	sbiw	r28, 0x1d	; 29
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    uint8_t row, col;
    uint8_t button_index = 0;
    11ca:	1b 8e       	std	Y+27, r1	; 0x1b
    
    // Save last button states
    for (uint8_t i = 0; i < 4; i++) {
    11cc:	1a 8e       	std	Y+26, r1	; 0x1a
    11ce:	18 c0       	rjmp	.+48     	; 0x1200 <buttons_read_input+0x4a>
        last_button_states[i] = button_states[i];
    11d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fc 01       	movw	r30, r24
    11de:	ef 50       	subi	r30, 0x0F	; 15
    11e0:	fd 4f       	sbci	r31, 0xFD	; 253
    11e2:	80 81       	ld	r24, Z
    11e4:	f9 01       	movw	r30, r18
    11e6:	eb 50       	subi	r30, 0x0B	; 11
    11e8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ea:	80 83       	st	Z, r24
        button_states[i] = 0;
    11ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	ef 50       	subi	r30, 0x0F	; 15
    11f6:	fd 4f       	sbci	r31, 0xFD	; 253
    11f8:	10 82       	st	Z, r1
{
    uint8_t row, col;
    uint8_t button_index = 0;
    
    // Save last button states
    for (uint8_t i = 0; i < 4; i++) {
    11fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	8a 8f       	std	Y+26, r24	; 0x1a
    1200:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	28 f3       	brcs	.-54     	; 0x11d0 <buttons_read_input+0x1a>
        last_button_states[i] = button_states[i];
        button_states[i] = 0;
    }
    
    // Scan 2 rows (R1 and R2)
    for (row = 0; row < 2; row++) {
    1206:	1d 8e       	std	Y+29, r1	; 0x1d
    1208:	1d c1       	rjmp	.+570    	; 0x1444 <buttons_read_input+0x28e>
        // Set all rows high first
        PORTB |= (1 << ROW1_PIN) | (1 << ROW2_PIN);
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	83 60       	ori	r24, 0x03	; 3
    1216:	8c 93       	st	X, r24
        
        // Set current row low
        PORTB &= ~(1 << (ROW1_PIN + row));
    1218:	a8 e3       	ldi	r26, 0x38	; 56
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <buttons_read_input+0x7e>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	2a 95       	dec	r18
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <buttons_read_input+0x7a>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a0 e2       	ldi	r26, 0x20	; 32
    1244:	b1 e4       	ldi	r27, 0x41	; 65
    1246:	8d 8b       	std	Y+21, r24	; 0x15
    1248:	9e 8b       	std	Y+22, r25	; 0x16
    124a:	af 8b       	std	Y+23, r26	; 0x17
    124c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	2b ea       	ldi	r18, 0xAB	; 171
    1258:	3a ea       	ldi	r19, 0xAA	; 170
    125a:	4a e2       	ldi	r20, 0x2A	; 42
    125c:	50 e4       	ldi	r21, 0x40	; 64
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	89 8b       	std	Y+17, r24	; 0x11
    1268:	9a 8b       	std	Y+18, r25	; 0x12
    126a:	ab 8b       	std	Y+19, r26	; 0x13
    126c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    126e:	69 89       	ldd	r22, Y+17	; 0x11
    1270:	7a 89       	ldd	r23, Y+18	; 0x12
    1272:	8b 89       	ldd	r24, Y+19	; 0x13
    1274:	9c 89       	ldd	r25, Y+20	; 0x14
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e8       	ldi	r20, 0x80	; 128
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1282:	88 23       	and	r24, r24
    1284:	1c f4       	brge	.+6      	; 0x128c <buttons_read_input+0xd6>
		__ticks = 1;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	88 8b       	std	Y+16, r24	; 0x10
    128a:	91 c0       	rjmp	.+290    	; 0x13ae <buttons_read_input+0x1f8>
	else if (__tmp > 255)
    128c:	69 89       	ldd	r22, Y+17	; 0x11
    128e:	7a 89       	ldd	r23, Y+18	; 0x12
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	4f e7       	ldi	r20, 0x7F	; 127
    129a:	53 e4       	ldi	r21, 0x43	; 67
    129c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12a0:	18 16       	cp	r1, r24
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <buttons_read_input+0xf0>
    12a4:	7b c0       	rjmp	.+246    	; 0x139c <buttons_read_input+0x1e6>
	{
		_delay_ms(__us / 1000.0);
    12a6:	6d 89       	ldd	r22, Y+21	; 0x15
    12a8:	7e 89       	ldd	r23, Y+22	; 0x16
    12aa:	8f 89       	ldd	r24, Y+23	; 0x17
    12ac:	98 8d       	ldd	r25, Y+24	; 0x18
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a e7       	ldi	r20, 0x7A	; 122
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8c 87       	std	Y+12, r24	; 0x0c
    12c0:	9d 87       	std	Y+13, r25	; 0x0d
    12c2:	ae 87       	std	Y+14, r26	; 0x0e
    12c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    12c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    12ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    12cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	4a ef       	ldi	r20, 0xFA	; 250
    12d4:	54 e4       	ldi	r21, 0x44	; 68
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	88 87       	std	Y+8, r24	; 0x08
    12e0:	99 87       	std	Y+9, r25	; 0x09
    12e2:	aa 87       	std	Y+10, r26	; 0x0a
    12e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12e6:	68 85       	ldd	r22, Y+8	; 0x08
    12e8:	79 85       	ldd	r23, Y+9	; 0x09
    12ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	2c f4       	brge	.+10     	; 0x1308 <buttons_read_input+0x152>
		__ticks = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9f 83       	std	Y+7, r25	; 0x07
    1304:	8e 83       	std	Y+6, r24	; 0x06
    1306:	3f c0       	rjmp	.+126    	; 0x1386 <buttons_read_input+0x1d0>
	else if (__tmp > 65535)
    1308:	68 85       	ldd	r22, Y+8	; 0x08
    130a:	79 85       	ldd	r23, Y+9	; 0x09
    130c:	8a 85       	ldd	r24, Y+10	; 0x0a
    130e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	4c f5       	brge	.+82     	; 0x1372 <buttons_read_input+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	6c 85       	ldd	r22, Y+12	; 0x0c
    1322:	7d 85       	ldd	r23, Y+13	; 0x0d
    1324:	8e 85       	ldd	r24, Y+14	; 0x0e
    1326:	9f 85       	ldd	r25, Y+15	; 0x0f
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e2       	ldi	r20, 0x20	; 32
    132e:	51 e4       	ldi	r21, 0x41	; 65
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9f 83       	std	Y+7, r25	; 0x07
    1346:	8e 83       	std	Y+6, r24	; 0x06
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <buttons_read_input+0x1b2>
    134a:	88 ec       	ldi	r24, 0xC8	; 200
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9d 83       	std	Y+5, r25	; 0x05
    1350:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <buttons_read_input+0x1a0>
    135a:	9d 83       	std	Y+5, r25	; 0x05
    135c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	8e 81       	ldd	r24, Y+6	; 0x06
    1360:	9f 81       	ldd	r25, Y+7	; 0x07
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9f 83       	std	Y+7, r25	; 0x07
    1366:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f7       	brne	.-38     	; 0x134a <buttons_read_input+0x194>
    1370:	24 c0       	rjmp	.+72     	; 0x13ba <buttons_read_input+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1372:	68 85       	ldd	r22, Y+8	; 0x08
    1374:	79 85       	ldd	r23, Y+9	; 0x09
    1376:	8a 85       	ldd	r24, Y+10	; 0x0a
    1378:	9b 85       	ldd	r25, Y+11	; 0x0b
    137a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9f 83       	std	Y+7, r25	; 0x07
    1384:	8e 83       	std	Y+6, r24	; 0x06
    1386:	8e 81       	ldd	r24, Y+6	; 0x06
    1388:	9f 81       	ldd	r25, Y+7	; 0x07
    138a:	9b 83       	std	Y+3, r25	; 0x03
    138c:	8a 83       	std	Y+2, r24	; 0x02
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <buttons_read_input+0x1dc>
    1396:	9b 83       	std	Y+3, r25	; 0x03
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <buttons_read_input+0x204>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    139c:	69 89       	ldd	r22, Y+17	; 0x11
    139e:	7a 89       	ldd	r23, Y+18	; 0x12
    13a0:	8b 89       	ldd	r24, Y+19	; 0x13
    13a2:	9c 89       	ldd	r25, Y+20	; 0x14
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	88 8b       	std	Y+16, r24	; 0x10
    13ae:	88 89       	ldd	r24, Y+16	; 0x10
    13b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8a 95       	dec	r24
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <buttons_read_input+0x1fe>
    13b8:	89 83       	std	Y+1, r24	; 0x01
        
        _delay_us(10); // Small delay for settling
        
        // Read 2 columns (C1 and C2)
        for (col = 0; col < 2; col++) {
    13ba:	1c 8e       	std	Y+28, r1	; 0x1c
    13bc:	3c c0       	rjmp	.+120    	; 0x1436 <buttons_read_input+0x280>
            bool pressed = !(PINB & (1 << (COL1_PIN + col)));
    13be:	e6 e3       	ldi	r30, 0x36	; 54
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	04 96       	adiw	r24, 0x04	; 4
    13d0:	a9 01       	movw	r20, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <buttons_read_input+0x222>
    13d4:	55 95       	asr	r21
    13d6:	47 95       	ror	r20
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <buttons_read_input+0x21e>
    13dc:	ca 01       	movw	r24, r20
    13de:	81 70       	andi	r24, 0x01	; 1
    13e0:	90 70       	andi	r25, 0x00	; 0
    13e2:	19 8e       	std	Y+25, r1	; 0x19
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	11 f4       	brne	.+4      	; 0x13ec <buttons_read_input+0x236>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 8f       	std	Y+25, r24	; 0x19
            
            if (pressed && button_index < 4) {
    13ec:	89 8d       	ldd	r24, Y+25	; 0x19
    13ee:	88 23       	and	r24, r24
    13f0:	e1 f0       	breq	.+56     	; 0x142a <buttons_read_input+0x274>
    13f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f4:	84 30       	cpi	r24, 0x04	; 4
    13f6:	c8 f4       	brcc	.+50     	; 0x142a <buttons_read_input+0x274>
                button_states[button_index] = 1;
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	ef 50       	subi	r30, 0x0F	; 15
    1402:	fd 4f       	sbci	r31, 0xFD	; 253
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 83       	st	Z, r24
                if (last_button_states[button_index] == 0) {
    1408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	eb 50       	subi	r30, 0x0B	; 11
    1412:	fd 4f       	sbci	r31, 0xFD	; 253
    1414:	80 81       	ld	r24, Z
    1416:	88 23       	and	r24, r24
    1418:	41 f4       	brne	.+16     	; 0x142a <buttons_read_input+0x274>
                    button_press_flags[button_index] = 1;
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	fc 01       	movw	r30, r24
    1422:	e7 50       	subi	r30, 0x07	; 7
    1424:	fd 4f       	sbci	r31, 0xFD	; 253
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24
                }
            }
            button_index++;
    142a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	8b 8f       	std	Y+27, r24	; 0x1b
        PORTB &= ~(1 << (ROW1_PIN + row));
        
        _delay_us(10); // Small delay for settling
        
        // Read 2 columns (C1 and C2)
        for (col = 0; col < 2; col++) {
    1430:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	8c 8f       	std	Y+28, r24	; 0x1c
    1436:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	08 f4       	brcc	.+2      	; 0x143e <buttons_read_input+0x288>
    143c:	c0 cf       	rjmp	.-128    	; 0x13be <buttons_read_input+0x208>
        last_button_states[i] = button_states[i];
        button_states[i] = 0;
    }
    
    // Scan 2 rows (R1 and R2)
    for (row = 0; row < 2; row++) {
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	8d 8f       	std	Y+29, r24	; 0x1d
    1444:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	08 f4       	brcc	.+2      	; 0x144c <buttons_read_input+0x296>
    144a:	df ce       	rjmp	.-578    	; 0x120a <buttons_read_input+0x54>
                }
            }
            button_index++;
        }
    }
}
    144c:	6d 96       	adiw	r28, 0x1d	; 29
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <button_is_pressed>:

bool button_is_pressed(uint8_t button)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <button_is_pressed+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <button_is_pressed+0x8>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	89 83       	std	Y+1, r24	; 0x01
    if (button < 4) {
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	e0 f4       	brcc	.+56     	; 0x14aa <button_is_pressed+0x4c>
        return (button_states[button] == 1 && last_button_states[button] == 0);
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	ef 50       	subi	r30, 0x0F	; 15
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	80 81       	ld	r24, Z
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	71 f4       	brne	.+28     	; 0x14a0 <button_is_pressed+0x42>
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	fc 01       	movw	r30, r24
    148c:	eb 50       	subi	r30, 0x0B	; 11
    148e:	fd 4f       	sbci	r31, 0xFD	; 253
    1490:	80 81       	ld	r24, Z
    1492:	88 23       	and	r24, r24
    1494:	29 f4       	brne	.+10     	; 0x14a0 <button_is_pressed+0x42>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9b 83       	std	Y+3, r25	; 0x03
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <button_is_pressed+0x46>
    14a0:	1b 82       	std	Y+3, r1	; 0x03
    14a2:	1a 82       	std	Y+2, r1	; 0x02
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <button_is_pressed+0x4e>
    }
    return false;
    14aa:	1c 82       	std	Y+4, r1	; 0x04
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <button_was_pressed>:

bool button_was_pressed(uint8_t button)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <button_was_pressed+0x6>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
    if (button < 4) {
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	84 30       	cpi	r24, 0x04	; 4
    14ce:	80 f4       	brcc	.+32     	; 0x14f0 <button_was_pressed+0x34>
        return button_press_flags[button];
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	fc 01       	movw	r30, r24
    14d8:	e7 50       	subi	r30, 0x07	; 7
    14da:	fd 4f       	sbci	r31, 0xFD	; 253
    14dc:	80 81       	ld	r24, Z
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 23       	and	r24, r24
    14e4:	11 f0       	breq	.+4      	; 0x14ea <button_was_pressed+0x2e>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <button_was_pressed+0x36>
    }
    return false;
    14f0:	1a 82       	std	Y+2, r1	; 0x02
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <button_clear_press>:

void button_clear_press(uint8_t button)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
    if (button < 4) {
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	38 f4       	brcc	.+14     	; 0x1520 <button_clear_press+0x20>
        button_press_flags[button] = 0;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	fc 01       	movw	r30, r24
    151a:	e7 50       	subi	r30, 0x07	; 7
    151c:	fd 4f       	sbci	r31, 0xFD	; 253
    151e:	10 82       	st	Z, r1
    }
}
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <get_pressed_button>:

uint8_t get_pressed_button(void)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <get_pressed_button+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    for (uint8_t i = 0; i < 4; i++) {
    1532:	19 82       	std	Y+1, r1	; 0x01
    1534:	0b c0       	rjmp	.+22     	; 0x154c <get_pressed_button+0x24>
        if (button_is_pressed(i)) {
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    153c:	88 23       	and	r24, r24
    153e:	19 f0       	breq	.+6      	; 0x1546 <get_pressed_button+0x1e>
            return i;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <get_pressed_button+0x2e>
    }
}

uint8_t get_pressed_button(void)
{
    for (uint8_t i = 0; i < 4; i++) {
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	90 f3       	brcs	.-28     	; 0x1536 <get_pressed_button+0xe>
        if (button_is_pressed(i)) {
            return i;
        }
    }
    return 0xFF; // No button pressed
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <button_get_state>:

uint8_t button_get_state(uint8_t button)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <button_get_state+0x6>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    if (button < 4) {
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	48 f4       	brcc	.+18     	; 0x1586 <button_get_state+0x24>
        return button_states[button];
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	fc 01       	movw	r30, r24
    157c:	ef 50       	subi	r30, 0x0F	; 15
    157e:	fd 4f       	sbci	r31, 0xFD	; 253
    1580:	80 81       	ld	r24, Z
    1582:	8a 83       	std	Y+2, r24	; 0x02
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <button_get_state+0x26>
    }
    return 0;
    1586:	1a 82       	std	Y+2, r1	; 0x02
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <buzzer_init>:
#include <util/delay.h>
#include <stdint.h>
#include "buzzer.h"

void buzzer_init(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    // Configure buzzer pin as output
    DDRA |= (1 << BUZZER_PIN);
    159c:	aa e3       	ldi	r26, 0x3A	; 58
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ea e3       	ldi	r30, 0x3A	; 58
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	81 60       	ori	r24, 0x01	; 1
    15a8:	8c 93       	st	X, r24
    
    // Ensure buzzer is off initially
    buzzer_off();
    15aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <buzzer_off>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <buzzer_on>:

void buzzer_on(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    // Set buzzer pin high
    PORTA |= (1 << BUZZER_PIN);
    15bc:	ab e3       	ldi	r26, 0x3B	; 59
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	81 60       	ori	r24, 0x01	; 1
    15c8:	8c 93       	st	X, r24
}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <buzzer_off>:

void buzzer_off(void)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    // Set buzzer pin low
    PORTA &= ~(1 << BUZZER_PIN);
    15d8:	ab e3       	ldi	r26, 0x3B	; 59
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	eb e3       	ldi	r30, 0x3B	; 59
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8e 7f       	andi	r24, 0xFE	; 254
    15e4:	8c 93       	st	X, r24
}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <buzzer_beep>:

void buzzer_beep(uint16_t duration_ms)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	60 97       	sbiw	r28, 0x10	; 16
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	98 8b       	std	Y+16, r25	; 0x10
    1602:	8f 87       	std	Y+15, r24	; 0x0f
    buzzer_on();
    1604:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <buzzer_on>
    _delay_ms(duration_ms);
    1608:	8f 85       	ldd	r24, Y+15	; 0x0f
    160a:	98 89       	ldd	r25, Y+16	; 0x10
    160c:	cc 01       	movw	r24, r24
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8b 87       	std	Y+11, r24	; 0x0b
    1620:	9c 87       	std	Y+12, r25	; 0x0c
    1622:	ad 87       	std	Y+13, r26	; 0x0d
    1624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a ef       	ldi	r20, 0xFA	; 250
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8f 83       	std	Y+7, r24	; 0x07
    1640:	98 87       	std	Y+8, r25	; 0x08
    1642:	a9 87       	std	Y+9, r26	; 0x09
    1644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    165a:	88 23       	and	r24, r24
    165c:	2c f4       	brge	.+10     	; 0x1668 <buzzer_beep+0x7c>
		__ticks = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <buzzer_beep+0xfa>
	else if (__tmp > 65535)
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	78 85       	ldd	r23, Y+8	; 0x08
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	4c f5       	brge	.+82     	; 0x16d2 <buzzer_beep+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	6b 85       	ldd	r22, Y+11	; 0x0b
    1682:	7c 85       	ldd	r23, Y+12	; 0x0c
    1684:	8d 85       	ldd	r24, Y+13	; 0x0d
    1686:	9e 85       	ldd	r25, Y+14	; 0x0e
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <buzzer_beep+0xdc>
    16aa:	88 ec       	ldi	r24, 0xC8	; 200
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <buzzer_beep+0xca>
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <buzzer_beep+0xbe>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <buzzer_beep+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <buzzer_beep+0x106>
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
    buzzer_off();
    16fa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <buzzer_off>
}
    16fe:	60 96       	adiw	r28, 0x10	; 16
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <buzzer_tone>:

void buzzer_tone(uint16_t frequency, uint16_t duration_ms)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	e8 97       	sbiw	r28, 0x38	; 56
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	9e ab       	std	Y+54, r25	; 0x36
    1726:	8d ab       	std	Y+53, r24	; 0x35
    1728:	78 af       	std	Y+56, r23	; 0x38
    172a:	6f ab       	std	Y+55, r22	; 0x37
    uint16_t cycles = (frequency * duration_ms) / 1000;
    172c:	2d a9       	ldd	r18, Y+53	; 0x35
    172e:	3e a9       	ldd	r19, Y+54	; 0x36
    1730:	8f a9       	ldd	r24, Y+55	; 0x37
    1732:	98 ad       	ldd	r25, Y+56	; 0x38
    1734:	ac 01       	movw	r20, r24
    1736:	24 9f       	mul	r18, r20
    1738:	c0 01       	movw	r24, r0
    173a:	25 9f       	mul	r18, r21
    173c:	90 0d       	add	r25, r0
    173e:	34 9f       	mul	r19, r20
    1740:	90 0d       	add	r25, r0
    1742:	11 24       	eor	r1, r1
    1744:	28 ee       	ldi	r18, 0xE8	; 232
    1746:	33 e0       	ldi	r19, 0x03	; 3
    1748:	b9 01       	movw	r22, r18
    174a:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    174e:	cb 01       	movw	r24, r22
    1750:	9c ab       	std	Y+52, r25	; 0x34
    1752:	8b ab       	std	Y+51, r24	; 0x33
    
    for (uint16_t i = 0; i < cycles; i++) {
    1754:	1a aa       	std	Y+50, r1	; 0x32
    1756:	19 aa       	std	Y+49, r1	; 0x31
    1758:	a7 c1       	rjmp	.+846    	; 0x1aa8 <buzzer_tone+0x398>
        buzzer_on();
    175a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <buzzer_on>
        _delay_us(500000 / frequency);  // Half period
    175e:	8d a9       	ldd	r24, Y+53	; 0x35
    1760:	9e a9       	ldd	r25, Y+54	; 0x36
    1762:	9c 01       	movw	r18, r24
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	91 ea       	ldi	r25, 0xA1	; 161
    176c:	a7 e0       	ldi	r26, 0x07	; 7
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__divmodsi4>
    1778:	da 01       	movw	r26, r20
    177a:	c9 01       	movw	r24, r18
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8d a7       	std	Y+45, r24	; 0x2d
    178a:	9e a7       	std	Y+46, r25	; 0x2e
    178c:	af a7       	std	Y+47, r26	; 0x2f
    178e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1790:	6d a5       	ldd	r22, Y+45	; 0x2d
    1792:	7e a5       	ldd	r23, Y+46	; 0x2e
    1794:	8f a5       	ldd	r24, Y+47	; 0x2f
    1796:	98 a9       	ldd	r25, Y+48	; 0x30
    1798:	2b ea       	ldi	r18, 0xAB	; 171
    179a:	3a ea       	ldi	r19, 0xAA	; 170
    179c:	4a e2       	ldi	r20, 0x2A	; 42
    179e:	50 e4       	ldi	r21, 0x40	; 64
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	89 a7       	std	Y+41, r24	; 0x29
    17aa:	9a a7       	std	Y+42, r25	; 0x2a
    17ac:	ab a7       	std	Y+43, r26	; 0x2b
    17ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    17b0:	69 a5       	ldd	r22, Y+41	; 0x29
    17b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    17b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	1c f4       	brge	.+6      	; 0x17ce <buzzer_tone+0xbe>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	88 a7       	std	Y+40, r24	; 0x28
    17cc:	91 c0       	rjmp	.+290    	; 0x18f0 <buzzer_tone+0x1e0>
	else if (__tmp > 255)
    17ce:	69 a5       	ldd	r22, Y+41	; 0x29
    17d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    17d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	53 e4       	ldi	r21, 0x43	; 67
    17de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <buzzer_tone+0xd8>
    17e6:	7b c0       	rjmp	.+246    	; 0x18de <buzzer_tone+0x1ce>
	{
		_delay_ms(__us / 1000.0);
    17e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    17ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    17ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ee:	98 a9       	ldd	r25, Y+48	; 0x30
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a e7       	ldi	r20, 0x7A	; 122
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8c a3       	std	Y+36, r24	; 0x24
    1802:	9d a3       	std	Y+37, r25	; 0x25
    1804:	ae a3       	std	Y+38, r26	; 0x26
    1806:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6c a1       	ldd	r22, Y+36	; 0x24
    180a:	7d a1       	ldd	r23, Y+37	; 0x25
    180c:	8e a1       	ldd	r24, Y+38	; 0x26
    180e:	9f a1       	ldd	r25, Y+39	; 0x27
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	54 e4       	ldi	r21, 0x44	; 68
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	88 a3       	std	Y+32, r24	; 0x20
    1822:	99 a3       	std	Y+33, r25	; 0x21
    1824:	aa a3       	std	Y+34, r26	; 0x22
    1826:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1828:	68 a1       	ldd	r22, Y+32	; 0x20
    182a:	79 a1       	ldd	r23, Y+33	; 0x21
    182c:	8a a1       	ldd	r24, Y+34	; 0x22
    182e:	9b a1       	ldd	r25, Y+35	; 0x23
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <buzzer_tone+0x13a>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9f 8f       	std	Y+31, r25	; 0x1f
    1846:	8e 8f       	std	Y+30, r24	; 0x1e
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <buzzer_tone+0x1b8>
	else if (__tmp > 65535)
    184a:	68 a1       	ldd	r22, Y+32	; 0x20
    184c:	79 a1       	ldd	r23, Y+33	; 0x21
    184e:	8a a1       	ldd	r24, Y+34	; 0x22
    1850:	9b a1       	ldd	r25, Y+35	; 0x23
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <buzzer_tone+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6c a1       	ldd	r22, Y+36	; 0x24
    1864:	7d a1       	ldd	r23, Y+37	; 0x25
    1866:	8e a1       	ldd	r24, Y+38	; 0x26
    1868:	9f a1       	ldd	r25, Y+39	; 0x27
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9f 8f       	std	Y+31, r25	; 0x1f
    1888:	8e 8f       	std	Y+30, r24	; 0x1e
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <buzzer_tone+0x19a>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9d 8f       	std	Y+29, r25	; 0x1d
    1892:	8c 8f       	std	Y+28, r24	; 0x1c
    1894:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1896:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <buzzer_tone+0x188>
    189c:	9d 8f       	std	Y+29, r25	; 0x1d
    189e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9f 8f       	std	Y+31, r25	; 0x1f
    18a8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <buzzer_tone+0x17c>
    18b2:	24 c0       	rjmp	.+72     	; 0x18fc <buzzer_tone+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	68 a1       	ldd	r22, Y+32	; 0x20
    18b6:	79 a1       	ldd	r23, Y+33	; 0x21
    18b8:	8a a1       	ldd	r24, Y+34	; 0x22
    18ba:	9b a1       	ldd	r25, Y+35	; 0x23
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9f 8f       	std	Y+31, r25	; 0x1f
    18c6:	8e 8f       	std	Y+30, r24	; 0x1e
    18c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18cc:	9b 8f       	std	Y+27, r25	; 0x1b
    18ce:	8a 8f       	std	Y+26, r24	; 0x1a
    18d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <buzzer_tone+0x1c4>
    18d8:	9b 8f       	std	Y+27, r25	; 0x1b
    18da:	8a 8f       	std	Y+26, r24	; 0x1a
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <buzzer_tone+0x1ec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18de:	69 a5       	ldd	r22, Y+41	; 0x29
    18e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    18e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	88 a7       	std	Y+40, r24	; 0x28
    18f0:	88 a5       	ldd	r24, Y+40	; 0x28
    18f2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18f4:	89 8d       	ldd	r24, Y+25	; 0x19
    18f6:	8a 95       	dec	r24
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <buzzer_tone+0x1e6>
    18fa:	89 8f       	std	Y+25, r24	; 0x19
        buzzer_off();
    18fc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <buzzer_off>
        _delay_us(500000 / frequency);  // Half period
    1900:	8d a9       	ldd	r24, Y+53	; 0x35
    1902:	9e a9       	ldd	r25, Y+54	; 0x36
    1904:	9c 01       	movw	r18, r24
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	80 e2       	ldi	r24, 0x20	; 32
    190c:	91 ea       	ldi	r25, 0xA1	; 161
    190e:	a7 e0       	ldi	r26, 0x07	; 7
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__divmodsi4>
    191a:	da 01       	movw	r26, r20
    191c:	c9 01       	movw	r24, r18
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8d 8b       	std	Y+21, r24	; 0x15
    192c:	9e 8b       	std	Y+22, r25	; 0x16
    192e:	af 8b       	std	Y+23, r26	; 0x17
    1930:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1932:	6d 89       	ldd	r22, Y+21	; 0x15
    1934:	7e 89       	ldd	r23, Y+22	; 0x16
    1936:	8f 89       	ldd	r24, Y+23	; 0x17
    1938:	98 8d       	ldd	r25, Y+24	; 0x18
    193a:	2b ea       	ldi	r18, 0xAB	; 171
    193c:	3a ea       	ldi	r19, 0xAA	; 170
    193e:	4a e2       	ldi	r20, 0x2A	; 42
    1940:	50 e4       	ldi	r21, 0x40	; 64
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	89 8b       	std	Y+17, r24	; 0x11
    194c:	9a 8b       	std	Y+18, r25	; 0x12
    194e:	ab 8b       	std	Y+19, r26	; 0x13
    1950:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1952:	69 89       	ldd	r22, Y+17	; 0x11
    1954:	7a 89       	ldd	r23, Y+18	; 0x12
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	1c f4       	brge	.+6      	; 0x1970 <buzzer_tone+0x260>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	88 8b       	std	Y+16, r24	; 0x10
    196e:	91 c0       	rjmp	.+290    	; 0x1a92 <buzzer_tone+0x382>
	else if (__tmp > 255)
    1970:	69 89       	ldd	r22, Y+17	; 0x11
    1972:	7a 89       	ldd	r23, Y+18	; 0x12
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	53 e4       	ldi	r21, 0x43	; 67
    1980:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	0c f0       	brlt	.+2      	; 0x198a <buzzer_tone+0x27a>
    1988:	7b c0       	rjmp	.+246    	; 0x1a80 <buzzer_tone+0x370>
	{
		_delay_ms(__us / 1000.0);
    198a:	6d 89       	ldd	r22, Y+21	; 0x15
    198c:	7e 89       	ldd	r23, Y+22	; 0x16
    198e:	8f 89       	ldd	r24, Y+23	; 0x17
    1990:	98 8d       	ldd	r25, Y+24	; 0x18
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4a e7       	ldi	r20, 0x7A	; 122
    1998:	54 e4       	ldi	r21, 0x44	; 68
    199a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8c 87       	std	Y+12, r24	; 0x0c
    19a4:	9d 87       	std	Y+13, r25	; 0x0d
    19a6:	ae 87       	std	Y+14, r26	; 0x0e
    19a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    19ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    19ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a ef       	ldi	r20, 0xFA	; 250
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	88 87       	std	Y+8, r24	; 0x08
    19c4:	99 87       	std	Y+9, r25	; 0x09
    19c6:	aa 87       	std	Y+10, r26	; 0x0a
    19c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19ca:	68 85       	ldd	r22, Y+8	; 0x08
    19cc:	79 85       	ldd	r23, Y+9	; 0x09
    19ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    19d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <buzzer_tone+0x2dc>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9f 83       	std	Y+7, r25	; 0x07
    19e8:	8e 83       	std	Y+6, r24	; 0x06
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <buzzer_tone+0x35a>
	else if (__tmp > 65535)
    19ec:	68 85       	ldd	r22, Y+8	; 0x08
    19ee:	79 85       	ldd	r23, Y+9	; 0x09
    19f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <buzzer_tone+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a06:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9f 83       	std	Y+7, r25	; 0x07
    1a2a:	8e 83       	std	Y+6, r24	; 0x06
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <buzzer_tone+0x33c>
    1a2e:	88 ec       	ldi	r24, 0xC8	; 200
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9d 83       	std	Y+5, r25	; 0x05
    1a34:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <buzzer_tone+0x32a>
    1a3e:	9d 83       	std	Y+5, r25	; 0x05
    1a40:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8e 81       	ldd	r24, Y+6	; 0x06
    1a44:	9f 81       	ldd	r25, Y+7	; 0x07
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9f 83       	std	Y+7, r25	; 0x07
    1a4a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <buzzer_tone+0x31e>
    1a54:	24 c0       	rjmp	.+72     	; 0x1a9e <buzzer_tone+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	68 85       	ldd	r22, Y+8	; 0x08
    1a58:	79 85       	ldd	r23, Y+9	; 0x09
    1a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9f 83       	std	Y+7, r25	; 0x07
    1a68:	8e 83       	std	Y+6, r24	; 0x06
    1a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6e:	9b 83       	std	Y+3, r25	; 0x03
    1a70:	8a 83       	std	Y+2, r24	; 0x02
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <buzzer_tone+0x366>
    1a7a:	9b 83       	std	Y+3, r25	; 0x03
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <buzzer_tone+0x38e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a80:	69 89       	ldd	r22, Y+17	; 0x11
    1a82:	7a 89       	ldd	r23, Y+18	; 0x12
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	88 8b       	std	Y+16, r24	; 0x10
    1a92:	88 89       	ldd	r24, Y+16	; 0x10
    1a94:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	8a 95       	dec	r24
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <buzzer_tone+0x388>
    1a9c:	89 83       	std	Y+1, r24	; 0x01

void buzzer_tone(uint16_t frequency, uint16_t duration_ms)
{
    uint16_t cycles = (frequency * duration_ms) / 1000;
    
    for (uint16_t i = 0; i < cycles; i++) {
    1a9e:	89 a9       	ldd	r24, Y+49	; 0x31
    1aa0:	9a a9       	ldd	r25, Y+50	; 0x32
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	9a ab       	std	Y+50, r25	; 0x32
    1aa6:	89 ab       	std	Y+49, r24	; 0x31
    1aa8:	29 a9       	ldd	r18, Y+49	; 0x31
    1aaa:	3a a9       	ldd	r19, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	28 17       	cp	r18, r24
    1ab2:	39 07       	cpc	r19, r25
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <buzzer_tone+0x3a8>
    1ab6:	51 ce       	rjmp	.-862    	; 0x175a <buzzer_tone+0x4a>
        buzzer_on();
        _delay_us(500000 / frequency);  // Half period
        buzzer_off();
        _delay_us(500000 / frequency);  // Half period
    }
    1ab8:	e8 96       	adiw	r28, 0x38	; 56
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <countdown_init>:
static uint16_t countdown_current = 0;
static countdown_state_t countdown_state = COUNTDOWN_STOPPED;

// Initialize countdown
void countdown_init(void)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    countdown_time = 0;
    1ad2:	10 92 fe 02 	sts	0x02FE, r1
    1ad6:	10 92 fd 02 	sts	0x02FD, r1
    countdown_current = 0;
    1ada:	10 92 00 03 	sts	0x0300, r1
    1ade:	10 92 ff 02 	sts	0x02FF, r1
    countdown_state = COUNTDOWN_STOPPED;
    1ae2:	10 92 01 03 	sts	0x0301, r1
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <countdown_set>:

// Set countdown time in seconds
void countdown_set(uint16_t seconds)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <countdown_set+0x6>
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
    countdown_time = seconds;
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	90 93 fe 02 	sts	0x02FE, r25
    1b02:	80 93 fd 02 	sts	0x02FD, r24
    countdown_current = seconds;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	90 93 00 03 	sts	0x0300, r25
    1b0e:	80 93 ff 02 	sts	0x02FF, r24
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <countdown_start>:

// Start countdown
void countdown_start(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    if (countdown_state == COUNTDOWN_STOPPED && countdown_time > 0) {
    1b24:	80 91 01 03 	lds	r24, 0x0301
    1b28:	88 23       	and	r24, r24
    1b2a:	49 f4       	brne	.+18     	; 0x1b3e <countdown_start+0x22>
    1b2c:	80 91 fd 02 	lds	r24, 0x02FD
    1b30:	90 91 fe 02 	lds	r25, 0x02FE
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <countdown_start+0x22>
        countdown_state = COUNTDOWN_RUNNING;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 01 03 	sts	0x0301, r24
    }
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <countdown_stop>:

// Stop countdown
void countdown_stop(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    if (countdown_state == COUNTDOWN_RUNNING) {
    1b4c:	80 91 01 03 	lds	r24, 0x0301
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	11 f4       	brne	.+4      	; 0x1b58 <countdown_stop+0x14>
        countdown_state = COUNTDOWN_STOPPED;
    1b54:	10 92 01 03 	sts	0x0301, r1
    }
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <countdown_reset>:

// Reset countdown
void countdown_reset(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    countdown_current = countdown_time;
    1b66:	80 91 fd 02 	lds	r24, 0x02FD
    1b6a:	90 91 fe 02 	lds	r25, 0x02FE
    1b6e:	90 93 00 03 	sts	0x0300, r25
    1b72:	80 93 ff 02 	sts	0x02FF, r24
    countdown_state = COUNTDOWN_STOPPED;
    1b76:	10 92 01 03 	sts	0x0301, r1
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <countdown_update>:

// Update countdown (called every second)
void countdown_update(void)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    if (countdown_state == COUNTDOWN_RUNNING) {
    1b88:	80 91 01 03 	lds	r24, 0x0301
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	11 f4       	brne	.+4      	; 0x1b94 <countdown_update+0x14>
        countdown_decrement();
    1b90:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <countdown_decrement>
    }
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <countdown_is_running>:

// Check if countdown is running
bool countdown_is_running(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    return (countdown_state == COUNTDOWN_RUNNING);
    1ba4:	80 91 01 03 	lds	r24, 0x0301
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <countdown_is_running+0x18>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <countdown_is_finished>:

// Check if countdown is finished
bool countdown_is_finished(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    return (countdown_state == COUNTDOWN_FINISHED);
    1bc6:	80 91 01 03 	lds	r24, 0x0301
    1bca:	19 82       	std	Y+1, r1	; 0x01
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	11 f4       	brne	.+4      	; 0x1bd4 <countdown_is_finished+0x18>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <countdown_get_time>:

// Get current countdown time
uint16_t countdown_get_time(void)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    return countdown_current;
    1be6:	80 91 ff 02 	lds	r24, 0x02FF
    1bea:	90 91 00 03 	lds	r25, 0x0300
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <countdown_display>:

// Display countdown time on LCD
void countdown_display(void)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	60 97       	sbiw	r28, 0x10	; 16
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    char time_str[16];
    countdown_format_time(time_str);
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <countdown_format_time>
    lcd_print(time_str);
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
}
    1c18:	60 96       	adiw	r28, 0x10	; 16
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <countdown_decrement>:

// Decrement countdown time
void countdown_decrement(void)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    if (countdown_current > 0) {
    1c32:	80 91 ff 02 	lds	r24, 0x02FF
    1c36:	90 91 00 03 	lds	r25, 0x0300
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	b1 f0       	breq	.+44     	; 0x1c6a <countdown_decrement+0x40>
        countdown_current--;
    1c3e:	80 91 ff 02 	lds	r24, 0x02FF
    1c42:	90 91 00 03 	lds	r25, 0x0300
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	90 93 00 03 	sts	0x0300, r25
    1c4c:	80 93 ff 02 	sts	0x02FF, r24
        
        if (countdown_current == 0) {
    1c50:	80 91 ff 02 	lds	r24, 0x02FF
    1c54:	90 91 00 03 	lds	r25, 0x0300
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <countdown_decrement+0x40>
            countdown_state = COUNTDOWN_FINISHED;
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	80 93 01 03 	sts	0x0301, r24
            // Trigger buzzer when countdown finishes
            buzzer_beep(1000);
    1c62:	88 ee       	ldi	r24, 0xE8	; 232
    1c64:	93 e0       	ldi	r25, 0x03	; 3
    1c66:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <buzzer_beep>
        }
    }
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <countdown_format_time>:

// Format countdown time to string
void countdown_format_time(char* buffer)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <countdown_format_time+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <countdown_format_time+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t minutes = countdown_get_minutes();
    1c80:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <countdown_get_minutes>
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t seconds = countdown_get_seconds();
    1c86:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <countdown_get_seconds>
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    sprintf(buffer, "%02d:%02d", minutes, seconds);
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	48 2f       	mov	r20, r24
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	8d b7       	in	r24, 0x3d	; 61
    1c9a:	9e b7       	in	r25, 0x3e	; 62
    1c9c:	08 97       	sbiw	r24, 0x08	; 8
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	9e bf       	out	0x3e, r25	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	8d bf       	out	0x3d, r24	; 61
    1ca8:	ed b7       	in	r30, 0x3d	; 61
    1caa:	fe b7       	in	r31, 0x3e	; 62
    1cac:	31 96       	adiw	r30, 0x01	; 1
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
    1cb6:	8a e6       	ldi	r24, 0x6A	; 106
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	93 83       	std	Z+3, r25	; 0x03
    1cbc:	82 83       	std	Z+2, r24	; 0x02
    1cbe:	35 83       	std	Z+5, r19	; 0x05
    1cc0:	24 83       	std	Z+4, r18	; 0x04
    1cc2:	57 83       	std	Z+7, r21	; 0x07
    1cc4:	46 83       	std	Z+6, r20	; 0x06
    1cc6:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    1cca:	8d b7       	in	r24, 0x3d	; 61
    1ccc:	9e b7       	in	r25, 0x3e	; 62
    1cce:	08 96       	adiw	r24, 0x08	; 8
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	9e bf       	out	0x3e, r25	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	8d bf       	out	0x3d, r24	; 61
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <countdown_get_minutes>:

// Get minutes from countdown time
uint8_t countdown_get_minutes(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    return (uint8_t)(countdown_current / 60);
    1cf0:	80 91 ff 02 	lds	r24, 0x02FF
    1cf4:	90 91 00 03 	lds	r25, 0x0300
    1cf8:	2c e3       	ldi	r18, 0x3C	; 60
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	b9 01       	movw	r22, r18
    1cfe:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    1d02:	cb 01       	movw	r24, r22
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <countdown_get_seconds>:

// Get seconds from countdown time
uint8_t countdown_get_seconds(void)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    return (uint8_t)(countdown_current % 60);
    1d12:	80 91 ff 02 	lds	r24, 0x02FF
    1d16:	90 91 00 03 	lds	r25, 0x0300
    1d1a:	2c e3       	ldi	r18, 0x3C	; 60
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	b9 01       	movw	r22, r18
    1d20:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <lcd_init>:
#include <stdio.h>
#include "lcd.h"

// LCD initialization
void lcd_init(void)
{
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	ce 57       	subi	r28, 0x7E	; 126
    1d38:	d0 40       	sbci	r29, 0x00	; 0
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    // Configure LCD pins as outputs
    DDRD |= (1 << LCD_RS_PIN) | (1 << LCD_RW_PIN) | (1 << LCD_EN_PIN) |
    1d44:	a1 e3       	ldi	r26, 0x31	; 49
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e1 e3       	ldi	r30, 0x31	; 49
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	87 6f       	ori	r24, 0xF7	; 247
    1d50:	8c 93       	st	X, r24
    1d52:	fe 01       	movw	r30, r28
    1d54:	e5 58       	subi	r30, 0x85	; 133
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a8 e4       	ldi	r26, 0x48	; 72
    1d5e:	b2 e4       	ldi	r27, 0x42	; 66
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	8e 01       	movw	r16, r28
    1d6a:	09 58       	subi	r16, 0x89	; 137
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e5 58       	subi	r30, 0x85	; 133
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a ef       	ldi	r20, 0xFA	; 250
    1d82:	54 e4       	ldi	r21, 0x44	; 68
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 83       	st	Z, r24
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	a2 83       	std	Z+2, r26	; 0x02
    1d94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d96:	fe 01       	movw	r30, r28
    1d98:	e9 58       	subi	r30, 0x89	; 137
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	44 f4       	brge	.+16     	; 0x1dc4 <lcd_init+0x9a>
		__ticks = 1;
    1db4:	fe 01       	movw	r30, r28
    1db6:	eb 58       	subi	r30, 0x8B	; 139
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	64 c0       	rjmp	.+200    	; 0x1e8c <lcd_init+0x162>
	else if (__tmp > 65535)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e9 58       	subi	r30, 0x89	; 137
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	0c f0       	brlt	.+2      	; 0x1de4 <lcd_init+0xba>
    1de2:	43 c0       	rjmp	.+134    	; 0x1e6a <lcd_init+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	fe 01       	movw	r30, r28
    1de6:	e5 58       	subi	r30, 0x85	; 133
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	8e 01       	movw	r16, r28
    1e04:	0b 58       	subi	r16, 0x8B	; 139
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	f8 01       	movw	r30, r16
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    1e1a:	1f c0       	rjmp	.+62     	; 0x1e5a <lcd_init+0x130>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ed 58       	subi	r30, 0x8D	; 141
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ed 58       	subi	r30, 0x8D	; 141
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <lcd_init+0x10a>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ed 58       	subi	r30, 0x8D	; 141
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	de 01       	movw	r26, r28
    1e44:	ab 58       	subi	r26, 0x8B	; 139
    1e46:	bf 4f       	sbci	r27, 0xFF	; 255
    1e48:	fe 01       	movw	r30, r28
    1e4a:	eb 58       	subi	r30, 0x8B	; 139
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	11 96       	adiw	r26, 0x01	; 1
    1e56:	9c 93       	st	X, r25
    1e58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	eb 58       	subi	r30, 0x8B	; 139
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	91 81       	ldd	r25, Z+1	; 0x01
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	d1 f6       	brne	.-76     	; 0x1e1c <lcd_init+0xf2>
    1e68:	27 c0       	rjmp	.+78     	; 0x1eb8 <lcd_init+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	0b 58       	subi	r16, 0x8B	; 139
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	fe 01       	movw	r30, r28
    1e72:	e9 58       	subi	r30, 0x89	; 137
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	de 01       	movw	r26, r28
    1e8e:	af 58       	subi	r26, 0x8F	; 143
    1e90:	bf 4f       	sbci	r27, 0xFF	; 255
    1e92:	fe 01       	movw	r30, r28
    1e94:	eb 58       	subi	r30, 0x8B	; 139
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	8d 93       	st	X+, r24
    1e9e:	9c 93       	st	X, r25
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ef 58       	subi	r30, 0x8F	; 143
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <lcd_init+0x180>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ef 58       	subi	r30, 0x8F	; 143
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    
    // Wait for power-up
    _delay_ms(50);
    
    // Initialize LCD in 4-bit mode
    lcd_write_nibble(0x03);
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e3 59       	subi	r30, 0x93	; 147
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eca:	b0 e4       	ldi	r27, 0x40	; 64
    1ecc:	80 83       	st	Z, r24
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	a2 83       	std	Z+2, r26	; 0x02
    1ed2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	8e 01       	movw	r16, r28
    1ed6:	07 59       	subi	r16, 0x97	; 151
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	fe 01       	movw	r30, r28
    1edc:	e3 59       	subi	r30, 0x93	; 147
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a ef       	ldi	r20, 0xFA	; 250
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	f8 01       	movw	r30, r16
    1efa:	80 83       	st	Z, r24
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	a2 83       	std	Z+2, r26	; 0x02
    1f00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f02:	fe 01       	movw	r30, r28
    1f04:	e7 59       	subi	r30, 0x97	; 151
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	60 81       	ld	r22, Z
    1f0a:	71 81       	ldd	r23, Z+1	; 0x01
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	44 f4       	brge	.+16     	; 0x1f30 <lcd_init+0x206>
		__ticks = 1;
    1f20:	fe 01       	movw	r30, r28
    1f22:	e9 59       	subi	r30, 0x99	; 153
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	80 83       	st	Z, r24
    1f2e:	64 c0       	rjmp	.+200    	; 0x1ff8 <lcd_init+0x2ce>
	else if (__tmp > 65535)
    1f30:	fe 01       	movw	r30, r28
    1f32:	e7 59       	subi	r30, 0x97	; 151
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	0c f0       	brlt	.+2      	; 0x1f50 <lcd_init+0x226>
    1f4e:	43 c0       	rjmp	.+134    	; 0x1fd6 <lcd_init+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	fe 01       	movw	r30, r28
    1f52:	e3 59       	subi	r30, 0x93	; 147
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	8e 01       	movw	r16, r28
    1f70:	09 59       	subi	r16, 0x99	; 153
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	f8 01       	movw	r30, r16
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
    1f86:	1f c0       	rjmp	.+62     	; 0x1fc6 <lcd_init+0x29c>
    1f88:	fe 01       	movw	r30, r28
    1f8a:	eb 59       	subi	r30, 0x9B	; 155
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	88 ec       	ldi	r24, 0xC8	; 200
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	fe 01       	movw	r30, r28
    1f98:	eb 59       	subi	r30, 0x9B	; 155
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <lcd_init+0x276>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	eb 59       	subi	r30, 0x9B	; 155
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	de 01       	movw	r26, r28
    1fb0:	a9 59       	subi	r26, 0x99	; 153
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e9 59       	subi	r30, 0x99	; 153
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	11 96       	adiw	r26, 0x01	; 1
    1fc2:	9c 93       	st	X, r25
    1fc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e9 59       	subi	r30, 0x99	; 153
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	d1 f6       	brne	.-76     	; 0x1f88 <lcd_init+0x25e>
    1fd4:	27 c0       	rjmp	.+78     	; 0x2024 <lcd_init+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	8e 01       	movw	r16, r28
    1fd8:	09 59       	subi	r16, 0x99	; 153
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e7 59       	subi	r30, 0x97	; 151
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
    1ff8:	de 01       	movw	r26, r28
    1ffa:	ad 59       	subi	r26, 0x9D	; 157
    1ffc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffe:	fe 01       	movw	r30, r28
    2000:	e9 59       	subi	r30, 0x99	; 153
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	8d 93       	st	X+, r24
    200a:	9c 93       	st	X, r25
    200c:	fe 01       	movw	r30, r28
    200e:	ed 59       	subi	r30, 0x9D	; 157
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <lcd_init+0x2ec>
    201a:	fe 01       	movw	r30, r28
    201c:	ed 59       	subi	r30, 0x9D	; 157
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	80 83       	st	Z, r24
    _delay_ms(5);
    lcd_write_nibble(0x03);
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
    202a:	fe 01       	movw	r30, r28
    202c:	e1 5a       	subi	r30, 0xA1	; 161
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 ea       	ldi	r26, 0xA0	; 160
    2036:	b0 e4       	ldi	r27, 0x40	; 64
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	8e 01       	movw	r16, r28
    2042:	05 5a       	subi	r16, 0xA5	; 165
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	e1 5a       	subi	r30, 0xA1	; 161
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206e:	fe 01       	movw	r30, r28
    2070:	e5 5a       	subi	r30, 0xA5	; 165
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	44 f4       	brge	.+16     	; 0x209c <lcd_init+0x372>
		__ticks = 1;
    208c:	fe 01       	movw	r30, r28
    208e:	e7 5a       	subi	r30, 0xA7	; 167
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	64 c0       	rjmp	.+200    	; 0x2164 <lcd_init+0x43a>
	else if (__tmp > 65535)
    209c:	fe 01       	movw	r30, r28
    209e:	e5 5a       	subi	r30, 0xA5	; 165
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <lcd_init+0x392>
    20ba:	43 c0       	rjmp	.+134    	; 0x2142 <lcd_init+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	fe 01       	movw	r30, r28
    20be:	e1 5a       	subi	r30, 0xA1	; 161
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8e 01       	movw	r16, r28
    20dc:	07 5a       	subi	r16, 0xA7	; 167
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	1f c0       	rjmp	.+62     	; 0x2132 <lcd_init+0x408>
    20f4:	fe 01       	movw	r30, r28
    20f6:	e9 5a       	subi	r30, 0xA9	; 169
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	fe 01       	movw	r30, r28
    2104:	e9 5a       	subi	r30, 0xA9	; 169
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <lcd_init+0x3e2>
    2110:	fe 01       	movw	r30, r28
    2112:	e9 5a       	subi	r30, 0xA9	; 169
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	de 01       	movw	r26, r28
    211c:	a7 5a       	subi	r26, 0xA7	; 167
    211e:	bf 4f       	sbci	r27, 0xFF	; 255
    2120:	fe 01       	movw	r30, r28
    2122:	e7 5a       	subi	r30, 0xA7	; 167
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	11 96       	adiw	r26, 0x01	; 1
    212e:	9c 93       	st	X, r25
    2130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	fe 01       	movw	r30, r28
    2134:	e7 5a       	subi	r30, 0xA7	; 167
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	d1 f6       	brne	.-76     	; 0x20f4 <lcd_init+0x3ca>
    2140:	27 c0       	rjmp	.+78     	; 0x2190 <lcd_init+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	8e 01       	movw	r16, r28
    2144:	07 5a       	subi	r16, 0xA7	; 167
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	fe 01       	movw	r30, r28
    214a:	e5 5a       	subi	r30, 0xA5	; 165
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
    2164:	de 01       	movw	r26, r28
    2166:	ab 5a       	subi	r26, 0xAB	; 171
    2168:	bf 4f       	sbci	r27, 0xFF	; 255
    216a:	fe 01       	movw	r30, r28
    216c:	e7 5a       	subi	r30, 0xA7	; 167
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	8d 93       	st	X+, r24
    2176:	9c 93       	st	X, r25
    2178:	fe 01       	movw	r30, r28
    217a:	eb 5a       	subi	r30, 0xAB	; 171
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <lcd_init+0x458>
    2186:	fe 01       	movw	r30, r28
    2188:	eb 5a       	subi	r30, 0xAB	; 171
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    _delay_ms(5);
    lcd_write_nibble(0x03);
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
    2196:	fe 01       	movw	r30, r28
    2198:	ef 5a       	subi	r30, 0xAF	; 175
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 ea       	ldi	r26, 0xA0	; 160
    21a2:	b0 e4       	ldi	r27, 0x40	; 64
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	8e 01       	movw	r16, r28
    21ae:	03 5b       	subi	r16, 0xB3	; 179
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 5a       	subi	r30, 0xAF	; 175
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a ef       	ldi	r20, 0xFA	; 250
    21c6:	54 e4       	ldi	r21, 0x44	; 68
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 83       	st	Z, r24
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	a2 83       	std	Z+2, r26	; 0x02
    21d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21da:	fe 01       	movw	r30, r28
    21dc:	e3 5b       	subi	r30, 0xB3	; 179
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	44 f4       	brge	.+16     	; 0x2208 <lcd_init+0x4de>
		__ticks = 1;
    21f8:	fe 01       	movw	r30, r28
    21fa:	e5 5b       	subi	r30, 0xB5	; 181
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	64 c0       	rjmp	.+200    	; 0x22d0 <lcd_init+0x5a6>
	else if (__tmp > 65535)
    2208:	fe 01       	movw	r30, r28
    220a:	e3 5b       	subi	r30, 0xB3	; 179
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	0c f0       	brlt	.+2      	; 0x2228 <lcd_init+0x4fe>
    2226:	43 c0       	rjmp	.+134    	; 0x22ae <lcd_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	fe 01       	movw	r30, r28
    222a:	ef 5a       	subi	r30, 0xAF	; 175
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8e 01       	movw	r16, r28
    2248:	05 5b       	subi	r16, 0xB5	; 181
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	1f c0       	rjmp	.+62     	; 0x229e <lcd_init+0x574>
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5b       	subi	r30, 0xB7	; 183
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	88 ec       	ldi	r24, 0xC8	; 200
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5b       	subi	r30, 0xB7	; 183
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <lcd_init+0x54e>
    227c:	fe 01       	movw	r30, r28
    227e:	e7 5b       	subi	r30, 0xB7	; 183
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	de 01       	movw	r26, r28
    2288:	a5 5b       	subi	r26, 0xB5	; 181
    228a:	bf 4f       	sbci	r27, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e5 5b       	subi	r30, 0xB5	; 181
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	fe 01       	movw	r30, r28
    22a0:	e5 5b       	subi	r30, 0xB5	; 181
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	d1 f6       	brne	.-76     	; 0x2260 <lcd_init+0x536>
    22ac:	27 c0       	rjmp	.+78     	; 0x22fc <lcd_init+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	8e 01       	movw	r16, r28
    22b0:	05 5b       	subi	r16, 0xB5	; 181
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	e3 5b       	subi	r30, 0xB3	; 179
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	f8 01       	movw	r30, r16
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	de 01       	movw	r26, r28
    22d2:	a9 5b       	subi	r26, 0xB9	; 185
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	fe 01       	movw	r30, r28
    22d8:	e5 5b       	subi	r30, 0xB5	; 181
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	8d 93       	st	X+, r24
    22e2:	9c 93       	st	X, r25
    22e4:	fe 01       	movw	r30, r28
    22e6:	e9 5b       	subi	r30, 0xB9	; 185
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <lcd_init+0x5c4>
    22f2:	fe 01       	movw	r30, r28
    22f4:	e9 5b       	subi	r30, 0xB9	; 185
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    _delay_ms(5);
    lcd_write_nibble(0x02);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
    2302:	fe 01       	movw	r30, r28
    2304:	ed 5b       	subi	r30, 0xBD	; 189
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 ea       	ldi	r26, 0xA0	; 160
    230e:	b0 e4       	ldi	r27, 0x40	; 64
    2310:	80 83       	st	Z, r24
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	a2 83       	std	Z+2, r26	; 0x02
    2316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	8e 01       	movw	r16, r28
    231a:	01 5c       	subi	r16, 0xC1	; 193
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	fe 01       	movw	r30, r28
    2320:	ed 5b       	subi	r30, 0xBD	; 189
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a ef       	ldi	r20, 0xFA	; 250
    2332:	54 e4       	ldi	r21, 0x44	; 68
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	f8 01       	movw	r30, r16
    233e:	80 83       	st	Z, r24
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	a2 83       	std	Z+2, r26	; 0x02
    2344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2346:	fe 01       	movw	r30, r28
    2348:	ff 96       	adiw	r30, 0x3f	; 63
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e8       	ldi	r20, 0x80	; 128
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235e:	88 23       	and	r24, r24
    2360:	2c f4       	brge	.+10     	; 0x236c <lcd_init+0x642>
		__ticks = 1;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9e af       	std	Y+62, r25	; 0x3e
    2368:	8d af       	std	Y+61, r24	; 0x3d
    236a:	46 c0       	rjmp	.+140    	; 0x23f8 <lcd_init+0x6ce>
	else if (__tmp > 65535)
    236c:	fe 01       	movw	r30, r28
    236e:	ff 96       	adiw	r30, 0x3f	; 63
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	64 f5       	brge	.+88     	; 0x23e0 <lcd_init+0x6b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	fe 01       	movw	r30, r28
    238a:	ed 5b       	subi	r30, 0xBD	; 189
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e af       	std	Y+62, r25	; 0x3e
    23b4:	8d af       	std	Y+61, r24	; 0x3d
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <lcd_init+0x6ac>
    23b8:	88 ec       	ldi	r24, 0xC8	; 200
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9c af       	std	Y+60, r25	; 0x3c
    23be:	8b af       	std	Y+59, r24	; 0x3b
    23c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <lcd_init+0x69a>
    23c8:	9c af       	std	Y+60, r25	; 0x3c
    23ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9e af       	std	Y+62, r25	; 0x3e
    23d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <lcd_init+0x68e>
    23de:	16 c0       	rjmp	.+44     	; 0x240c <lcd_init+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	fe 01       	movw	r30, r28
    23e2:	ff 96       	adiw	r30, 0x3f	; 63
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e af       	std	Y+62, r25	; 0x3e
    23f6:	8d af       	std	Y+61, r24	; 0x3d
    23f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    23fc:	9a af       	std	Y+58, r25	; 0x3a
    23fe:	89 af       	std	Y+57, r24	; 0x39
    2400:	89 ad       	ldd	r24, Y+57	; 0x39
    2402:	9a ad       	ldd	r25, Y+58	; 0x3a
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <lcd_init+0x6da>
    2408:	9a af       	std	Y+58, r25	; 0x3a
    240a:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(5);
    
    // Function set: 4-bit mode, 2 lines, 5x8 font
    lcd_write_command(LCD_FUNCTION_SET | LCD_4BIT_MODE | LCD_2LINE | LCD_5x8DOTS);
    240c:	88 e2       	ldi	r24, 0x28	; 40
    240e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <lcd_write_command>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 ea       	ldi	r26, 0xA0	; 160
    2418:	b0 e4       	ldi	r27, 0x40	; 64
    241a:	8d ab       	std	Y+53, r24	; 0x35
    241c:	9e ab       	std	Y+54, r25	; 0x36
    241e:	af ab       	std	Y+55, r26	; 0x37
    2420:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a ef       	ldi	r20, 0xFA	; 250
    2430:	54 e4       	ldi	r21, 0x44	; 68
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	89 ab       	std	Y+49, r24	; 0x31
    243c:	9a ab       	std	Y+50, r25	; 0x32
    243e:	ab ab       	std	Y+51, r26	; 0x33
    2440:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <lcd_init+0x73a>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <lcd_init+0x7b8>
	else if (__tmp > 65535)
    2464:	69 a9       	ldd	r22, Y+49	; 0x31
    2466:	7a a9       	ldd	r23, Y+50	; 0x32
    2468:	8b a9       	ldd	r24, Y+51	; 0x33
    246a:	9c a9       	ldd	r25, Y+52	; 0x34
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <lcd_init+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6d a9       	ldd	r22, Y+53	; 0x35
    247e:	7e a9       	ldd	r23, Y+54	; 0x36
    2480:	8f a9       	ldd	r24, Y+55	; 0x37
    2482:	98 ad       	ldd	r25, Y+56	; 0x38
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	98 ab       	std	Y+48, r25	; 0x30
    24a2:	8f a7       	std	Y+47, r24	; 0x2f
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <lcd_init+0x79a>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e a7       	std	Y+46, r25	; 0x2e
    24ac:	8d a7       	std	Y+45, r24	; 0x2d
    24ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <lcd_init+0x788>
    24b6:	9e a7       	std	Y+46, r25	; 0x2e
    24b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    24bc:	98 a9       	ldd	r25, Y+48	; 0x30
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c6:	98 a9       	ldd	r25, Y+48	; 0x30
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <lcd_init+0x77c>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <lcd_init+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	69 a9       	ldd	r22, Y+49	; 0x31
    24d0:	7a a9       	ldd	r23, Y+50	; 0x32
    24d2:	8b a9       	ldd	r24, Y+51	; 0x33
    24d4:	9c a9       	ldd	r25, Y+52	; 0x34
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	98 ab       	std	Y+48, r25	; 0x30
    24e0:	8f a7       	std	Y+47, r24	; 0x2f
    24e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e4:	98 a9       	ldd	r25, Y+48	; 0x30
    24e6:	9c a7       	std	Y+44, r25	; 0x2c
    24e8:	8b a7       	std	Y+43, r24	; 0x2b
    24ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <lcd_init+0x7c4>
    24f2:	9c a7       	std	Y+44, r25	; 0x2c
    24f4:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(5);
    
    // Display control: display on, cursor off, blink off
    lcd_write_command(LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
    24f6:	8c e0       	ldi	r24, 0x0C	; 12
    24f8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <lcd_write_command>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 ea       	ldi	r26, 0xA0	; 160
    2502:	b0 e4       	ldi	r27, 0x40	; 64
    2504:	8f a3       	std	Y+39, r24	; 0x27
    2506:	98 a7       	std	Y+40, r25	; 0x28
    2508:	a9 a7       	std	Y+41, r26	; 0x29
    250a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	6f a1       	ldd	r22, Y+39	; 0x27
    250e:	78 a5       	ldd	r23, Y+40	; 0x28
    2510:	89 a5       	ldd	r24, Y+41	; 0x29
    2512:	9a a5       	ldd	r25, Y+42	; 0x2a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a ef       	ldi	r20, 0xFA	; 250
    251a:	54 e4       	ldi	r21, 0x44	; 68
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8b a3       	std	Y+35, r24	; 0x23
    2526:	9c a3       	std	Y+36, r25	; 0x24
    2528:	ad a3       	std	Y+37, r26	; 0x25
    252a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2540:	88 23       	and	r24, r24
    2542:	2c f4       	brge	.+10     	; 0x254e <lcd_init+0x824>
		__ticks = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9a a3       	std	Y+34, r25	; 0x22
    254a:	89 a3       	std	Y+33, r24	; 0x21
    254c:	3f c0       	rjmp	.+126    	; 0x25cc <lcd_init+0x8a2>
	else if (__tmp > 65535)
    254e:	6b a1       	ldd	r22, Y+35	; 0x23
    2550:	7c a1       	ldd	r23, Y+36	; 0x24
    2552:	8d a1       	ldd	r24, Y+37	; 0x25
    2554:	9e a1       	ldd	r25, Y+38	; 0x26
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	4c f5       	brge	.+82     	; 0x25b8 <lcd_init+0x88e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	6f a1       	ldd	r22, Y+39	; 0x27
    2568:	78 a5       	ldd	r23, Y+40	; 0x28
    256a:	89 a5       	ldd	r24, Y+41	; 0x29
    256c:	9a a5       	ldd	r25, Y+42	; 0x2a
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9a a3       	std	Y+34, r25	; 0x22
    258c:	89 a3       	std	Y+33, r24	; 0x21
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <lcd_init+0x884>
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	98 a3       	std	Y+32, r25	; 0x20
    2596:	8f 8f       	std	Y+31, r24	; 0x1f
    2598:	8f 8d       	ldd	r24, Y+31	; 0x1f
    259a:	98 a1       	ldd	r25, Y+32	; 0x20
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <lcd_init+0x872>
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	89 a1       	ldd	r24, Y+33	; 0x21
    25a6:	9a a1       	ldd	r25, Y+34	; 0x22
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	89 a1       	ldd	r24, Y+33	; 0x21
    25b0:	9a a1       	ldd	r25, Y+34	; 0x22
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <lcd_init+0x866>
    25b6:	14 c0       	rjmp	.+40     	; 0x25e0 <lcd_init+0x8b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	9e 8f       	std	Y+30, r25	; 0x1e
    25d2:	8d 8f       	std	Y+29, r24	; 0x1d
    25d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <lcd_init+0x8ae>
    25dc:	9e 8f       	std	Y+30, r25	; 0x1e
    25de:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);
    
    // Entry mode set: increment cursor, no display shift
    lcd_write_command(LCD_ENTRY_MODE_SET | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DEC);
    25e0:	86 e0       	ldi	r24, 0x06	; 6
    25e2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <lcd_write_command>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 ea       	ldi	r26, 0xA0	; 160
    25ec:	b0 e4       	ldi	r27, 0x40	; 64
    25ee:	89 8f       	std	Y+25, r24	; 0x19
    25f0:	9a 8f       	std	Y+26, r25	; 0x1a
    25f2:	ab 8f       	std	Y+27, r26	; 0x1b
    25f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	69 8d       	ldd	r22, Y+25	; 0x19
    25f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a ef       	ldi	r20, 0xFA	; 250
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8d 8b       	std	Y+21, r24	; 0x15
    2610:	9e 8b       	std	Y+22, r25	; 0x16
    2612:	af 8b       	std	Y+23, r26	; 0x17
    2614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <lcd_init+0x90e>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <lcd_init+0x98c>
	else if (__tmp > 65535)
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <lcd_init+0x978>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	69 8d       	ldd	r22, Y+25	; 0x19
    2652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <lcd_init+0x96e>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
    2682:	89 89       	ldd	r24, Y+17	; 0x11
    2684:	9a 89       	ldd	r25, Y+18	; 0x12
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <lcd_init+0x95c>
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <lcd_init+0x950>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <lcd_init+0x9a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	98 8b       	std	Y+16, r25	; 0x10
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 89       	ldd	r25, Y+16	; 0x10
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <lcd_init+0x998>
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(5);
    
    // Clear display
    lcd_clear();
    26ca:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	a0 ea       	ldi	r26, 0xA0	; 160
    26d4:	b0 e4       	ldi	r27, 0x40	; 64
    26d6:	8b 87       	std	Y+11, r24	; 0x0b
    26d8:	9c 87       	std	Y+12, r25	; 0x0c
    26da:	ad 87       	std	Y+13, r26	; 0x0d
    26dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26de:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	4a ef       	ldi	r20, 0xFA	; 250
    26ec:	54 e4       	ldi	r21, 0x44	; 68
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	8f 83       	std	Y+7, r24	; 0x07
    26f8:	98 87       	std	Y+8, r25	; 0x08
    26fa:	a9 87       	std	Y+9, r26	; 0x09
    26fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2712:	88 23       	and	r24, r24
    2714:	2c f4       	brge	.+10     	; 0x2720 <lcd_init+0x9f6>
		__ticks = 1;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	3f c0       	rjmp	.+126    	; 0x279e <lcd_init+0xa74>
	else if (__tmp > 65535)
    2720:	6f 81       	ldd	r22, Y+7	; 0x07
    2722:	78 85       	ldd	r23, Y+8	; 0x08
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	57 e4       	ldi	r21, 0x47	; 71
    2730:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	4c f5       	brge	.+82     	; 0x278a <lcd_init+0xa60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2738:	6b 85       	ldd	r22, Y+11	; 0x0b
    273a:	7c 85       	ldd	r23, Y+12	; 0x0c
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <lcd_init+0xa56>
    2762:	88 ec       	ldi	r24, 0xC8	; 200
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <lcd_init+0xa44>
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	69 f7       	brne	.-38     	; 0x2762 <lcd_init+0xa38>
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <lcd_init+0xa88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278a:	6f 81       	ldd	r22, Y+7	; 0x07
    278c:	78 85       	ldd	r23, Y+8	; 0x08
    278e:	89 85       	ldd	r24, Y+9	; 0x09
    2790:	9a 85       	ldd	r25, Y+10	; 0x0a
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <lcd_init+0xa80>
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
}
    27b2:	c2 58       	subi	r28, 0x82	; 130
    27b4:	df 4f       	sbci	r29, 0xFF	; 255
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	08 95       	ret

000027ca <lcd_clear>:

// Clear LCD display
void lcd_clear(void)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	2e 97       	sbiw	r28, 0x0e	; 14
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    lcd_write_command(LCD_CLEAR_DISPLAY);
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <lcd_write_command>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e4       	ldi	r27, 0x40	; 64
    27ec:	8b 87       	std	Y+11, r24	; 0x0b
    27ee:	9c 87       	std	Y+12, r25	; 0x0c
    27f0:	ad 87       	std	Y+13, r26	; 0x0d
    27f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a ef       	ldi	r20, 0xFA	; 250
    2802:	54 e4       	ldi	r21, 0x44	; 68
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8f 83       	std	Y+7, r24	; 0x07
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	a9 87       	std	Y+9, r26	; 0x09
    2812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <lcd_clear+0x6c>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <lcd_clear+0xea>
	else if (__tmp > 65535)
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2850:	7c 85       	ldd	r23, Y+12	; 0x0c
    2852:	8d 85       	ldd	r24, Y+13	; 0x0d
    2854:	9e 85       	ldd	r25, Y+14	; 0x0e
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <lcd_clear+0xcc>
    2878:	88 ec       	ldi	r24, 0xC8	; 200
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <lcd_clear+0xba>
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <lcd_clear+0xae>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <lcd_clear+0xf6>
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    28c8:	2e 96       	adiw	r28, 0x0e	; 14
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <lcd_goto>:

// Move cursor to specified position
void lcd_goto(uint8_t row, uint8_t col)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <lcd_goto+0x6>
    28e0:	0f 92       	push	r0
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	8a 83       	std	Y+2, r24	; 0x02
    28e8:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t address;
    
    if (row == 0) {
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	88 23       	and	r24, r24
    28ee:	19 f4       	brne	.+6      	; 0x28f6 <lcd_goto+0x1c>
        address = 0x00 + col;
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <lcd_goto+0x22>
    } else {
        address = 0x40 + col;
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	80 5c       	subi	r24, 0xC0	; 192
    28fa:	89 83       	std	Y+1, r24	; 0x01
    }
    
    lcd_write_command(LCD_SET_DDRAM_ADDR | address);
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	80 68       	ori	r24, 0x80	; 128
    2900:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <lcd_write_command>
}
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <lcd_print>:

// Print string to LCD
void lcd_print(const char* str)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <lcd_print+0x6>
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	0a c0       	rjmp	.+20     	; 0x2934 <lcd_print+0x24>
    while (*str != '\0') {
        lcd_print_char(*str);
    2920:	e9 81       	ldd	r30, Y+1	; 0x01
    2922:	fa 81       	ldd	r31, Y+2	; 0x02
    2924:	80 81       	ld	r24, Z
    2926:	0e 94 a4 14 	call	0x2948	; 0x2948 <lcd_print_char>
        str++;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	9a 83       	std	Y+2, r25	; 0x02
    2932:	89 83       	std	Y+1, r24	; 0x01
}

// Print string to LCD
void lcd_print(const char* str)
{
    while (*str != '\0') {
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	80 81       	ld	r24, Z
    293a:	88 23       	and	r24, r24
    293c:	89 f7       	brne	.-30     	; 0x2920 <lcd_print+0x10>
        lcd_print_char(*str);
        str++;
    }
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <lcd_print_char>:

// Print single character to LCD
void lcd_print_char(char c)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	0f 92       	push	r0
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	89 83       	std	Y+1, r24	; 0x01
    lcd_write_data(c);
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	0e 94 67 15 	call	0x2ace	; 0x2ace <lcd_write_data>
}
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <lcd_display_time>:

// Display time in HH:MM:SS format
void lcd_display_time(uint8_t hour, uint8_t minute, uint8_t second)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	63 97       	sbiw	r28, 0x13	; 19
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	89 8b       	std	Y+17, r24	; 0x11
    2978:	6a 8b       	std	Y+18, r22	; 0x12
    297a:	4b 8b       	std	Y+19, r20	; 0x13
    char time_str[16];
    sprintf(time_str, "%02d:%02d:%02d", hour, minute, second);
    297c:	89 89       	ldd	r24, Y+17	; 0x11
    297e:	68 2f       	mov	r22, r24
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	8a 89       	ldd	r24, Y+18	; 0x12
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	8b 89       	ldd	r24, Y+19	; 0x13
    298a:	48 2f       	mov	r20, r24
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	8d b7       	in	r24, 0x3d	; 61
    2990:	9e b7       	in	r25, 0x3e	; 62
    2992:	0a 97       	sbiw	r24, 0x0a	; 10
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	9e bf       	out	0x3e, r25	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	8d bf       	out	0x3d, r24	; 61
    299e:	ed b7       	in	r30, 0x3d	; 61
    29a0:	fe b7       	in	r31, 0x3e	; 62
    29a2:	31 96       	adiw	r30, 0x01	; 1
    29a4:	ce 01       	movw	r24, r28
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	84 e7       	ldi	r24, 0x74	; 116
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	93 83       	std	Z+3, r25	; 0x03
    29b2:	82 83       	std	Z+2, r24	; 0x02
    29b4:	75 83       	std	Z+5, r23	; 0x05
    29b6:	64 83       	std	Z+4, r22	; 0x04
    29b8:	37 83       	std	Z+7, r19	; 0x07
    29ba:	26 83       	std	Z+6, r18	; 0x06
    29bc:	51 87       	std	Z+9, r21	; 0x09
    29be:	40 87       	std	Z+8, r20	; 0x08
    29c0:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    29c4:	8d b7       	in	r24, 0x3d	; 61
    29c6:	9e b7       	in	r25, 0x3e	; 62
    29c8:	0a 96       	adiw	r24, 0x0a	; 10
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	9e bf       	out	0x3e, r25	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	8d bf       	out	0x3d, r24	; 61
    lcd_print(time_str);
    29d4:	ce 01       	movw	r24, r28
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
}
    29dc:	63 96       	adiw	r28, 0x13	; 19
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <lcd_display_date>:

// Display date in DD/MM/YYYY format
void lcd_display_date(uint8_t day, uint8_t month, uint16_t year)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	64 97       	sbiw	r28, 0x14	; 20
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	89 8b       	std	Y+17, r24	; 0x11
    2a04:	6a 8b       	std	Y+18, r22	; 0x12
    2a06:	5c 8b       	std	Y+20, r21	; 0x14
    2a08:	4b 8b       	std	Y+19, r20	; 0x13
    char date_str[16];
    sprintf(date_str, "%02d/%02d/%04d", day, month, year);
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	8a 89       	ldd	r24, Y+18	; 0x12
    2a12:	48 2f       	mov	r20, r24
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	8d b7       	in	r24, 0x3d	; 61
    2a18:	9e b7       	in	r25, 0x3e	; 62
    2a1a:	0a 97       	sbiw	r24, 0x0a	; 10
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	9e bf       	out	0x3e, r25	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	8d bf       	out	0x3d, r24	; 61
    2a26:	ed b7       	in	r30, 0x3d	; 61
    2a28:	fe b7       	in	r31, 0x3e	; 62
    2a2a:	31 96       	adiw	r30, 0x01	; 1
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	83 e8       	ldi	r24, 0x83	; 131
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	93 83       	std	Z+3, r25	; 0x03
    2a3a:	82 83       	std	Z+2, r24	; 0x02
    2a3c:	35 83       	std	Z+5, r19	; 0x05
    2a3e:	24 83       	std	Z+4, r18	; 0x04
    2a40:	57 83       	std	Z+7, r21	; 0x07
    2a42:	46 83       	std	Z+6, r20	; 0x06
    2a44:	8b 89       	ldd	r24, Y+19	; 0x13
    2a46:	9c 89       	ldd	r25, Y+20	; 0x14
    2a48:	91 87       	std	Z+9, r25	; 0x09
    2a4a:	80 87       	std	Z+8, r24	; 0x08
    2a4c:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    2a50:	8d b7       	in	r24, 0x3d	; 61
    2a52:	9e b7       	in	r25, 0x3e	; 62
    2a54:	0a 96       	adiw	r24, 0x0a	; 10
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	9e bf       	out	0x3e, r25	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	8d bf       	out	0x3d, r24	; 61
    lcd_print(date_str);
    2a60:	ce 01       	movw	r24, r28
    2a62:	01 96       	adiw	r24, 0x01	; 1
    2a64:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
}
    2a68:	64 96       	adiw	r28, 0x14	; 20
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <lcd_display_mode_name>:

// Display mode name
void lcd_display_mode_name(const char* mode_name)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <lcd_display_mode_name+0x6>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
    lcd_print(mode_name);
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <lcd_write_command>:

// Write command to LCD
void lcd_write_command(uint8_t cmd)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	0f 92       	push	r0
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    // Set RS low for command
    PORTD &= ~(1 << LCD_RS_PIN);
    2aa6:	a2 e3       	ldi	r26, 0x32	; 50
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e2 e3       	ldi	r30, 0x32	; 50
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	8e 7f       	andi	r24, 0xFE	; 254
    2ab2:	8c 93       	st	X, r24
    
    // Write high nibble
    lcd_write_nibble(cmd >> 4);
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	82 95       	swap	r24
    2ab8:	8f 70       	andi	r24, 0x0F	; 15
    2aba:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
    
    // Write low nibble
    lcd_write_nibble(cmd & 0x0F);
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	8f 70       	andi	r24, 0x0F	; 15
    2ac2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
}
    2ac6:	0f 90       	pop	r0
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <lcd_write_data>:

// Write data to LCD
void lcd_write_data(uint8_t data)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    // Set RS high for data
    PORTD |= (1 << LCD_RS_PIN);
    2ada:	a2 e3       	ldi	r26, 0x32	; 50
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e2 e3       	ldi	r30, 0x32	; 50
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	81 60       	ori	r24, 0x01	; 1
    2ae6:	8c 93       	st	X, r24
    
    // Write high nibble
    lcd_write_nibble(data >> 4);
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	82 95       	swap	r24
    2aec:	8f 70       	andi	r24, 0x0F	; 15
    2aee:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
    
    // Write low nibble
    lcd_write_nibble(data & 0x0F);
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	8f 70       	andi	r24, 0x0F	; 15
    2af6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <lcd_write_nibble>
}
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <lcd_write_nibble>:

// Write 4-bit nibble to LCD
void lcd_write_nibble(uint8_t nibble)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	0f 92       	push	r0
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    // Clear data pins
    PORTD &= ~((1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
    2b0e:	a2 e3       	ldi	r26, 0x32	; 50
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e2 e3       	ldi	r30, 0x32	; 50
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8f 70       	andi	r24, 0x0F	; 15
    2b1a:	8c 93       	st	X, r24
    
    // Set data pins according to nibble
    if (nibble & 0x01) PORTD |= (1 << LCD_D4_PIN);
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	81 70       	andi	r24, 0x01	; 1
    2b24:	90 70       	andi	r25, 0x00	; 0
    2b26:	88 23       	and	r24, r24
    2b28:	39 f0       	breq	.+14     	; 0x2b38 <lcd_write_nibble+0x36>
    2b2a:	a2 e3       	ldi	r26, 0x32	; 50
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e2 e3       	ldi	r30, 0x32	; 50
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	80 61       	ori	r24, 0x10	; 16
    2b36:	8c 93       	st	X, r24
    if (nibble & 0x02) PORTD |= (1 << LCD_D5_PIN);
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	88 2f       	mov	r24, r24
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	82 70       	andi	r24, 0x02	; 2
    2b40:	90 70       	andi	r25, 0x00	; 0
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	39 f0       	breq	.+14     	; 0x2b54 <lcd_write_nibble+0x52>
    2b46:	a2 e3       	ldi	r26, 0x32	; 50
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e2 e3       	ldi	r30, 0x32	; 50
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 62       	ori	r24, 0x20	; 32
    2b52:	8c 93       	st	X, r24
    if (nibble & 0x04) PORTD |= (1 << LCD_D6_PIN);
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	84 70       	andi	r24, 0x04	; 4
    2b5c:	90 70       	andi	r25, 0x00	; 0
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	39 f0       	breq	.+14     	; 0x2b70 <lcd_write_nibble+0x6e>
    2b62:	a2 e3       	ldi	r26, 0x32	; 50
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e2 e3       	ldi	r30, 0x32	; 50
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	80 64       	ori	r24, 0x40	; 64
    2b6e:	8c 93       	st	X, r24
    if (nibble & 0x08) PORTD |= (1 << LCD_D7_PIN);
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	88 70       	andi	r24, 0x08	; 8
    2b78:	90 70       	andi	r25, 0x00	; 0
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	39 f0       	breq	.+14     	; 0x2b8c <lcd_write_nibble+0x8a>
    2b7e:	a2 e3       	ldi	r26, 0x32	; 50
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e2 e3       	ldi	r30, 0x32	; 50
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	80 68       	ori	r24, 0x80	; 128
    2b8a:	8c 93       	st	X, r24
    
    // Pulse enable
    lcd_pulse_enable();
    2b8c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <lcd_pulse_enable>
}
    2b90:	0f 90       	pop	r0
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <lcd_pulse_enable>:

// Pulse enable pin
void lcd_pulse_enable(void)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	e0 97       	sbiw	r28, 0x30	; 48
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    PORTD |= (1 << LCD_EN_PIN);
    2bac:	a2 e3       	ldi	r26, 0x32	; 50
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e2 e3       	ldi	r30, 0x32	; 50
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	84 60       	ori	r24, 0x04	; 4
    2bb8:	8c 93       	st	X, r24
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e8       	ldi	r26, 0x80	; 128
    2bc0:	bf e3       	ldi	r27, 0x3F	; 63
    2bc2:	8d a7       	std	Y+45, r24	; 0x2d
    2bc4:	9e a7       	std	Y+46, r25	; 0x2e
    2bc6:	af a7       	std	Y+47, r26	; 0x2f
    2bc8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bca:	6d a5       	ldd	r22, Y+45	; 0x2d
    2bcc:	7e a5       	ldd	r23, Y+46	; 0x2e
    2bce:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd0:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd2:	2b ea       	ldi	r18, 0xAB	; 171
    2bd4:	3a ea       	ldi	r19, 0xAA	; 170
    2bd6:	4a e2       	ldi	r20, 0x2A	; 42
    2bd8:	50 e4       	ldi	r21, 0x40	; 64
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	89 a7       	std	Y+41, r24	; 0x29
    2be4:	9a a7       	std	Y+42, r25	; 0x2a
    2be6:	ab a7       	std	Y+43, r26	; 0x2b
    2be8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2bea:	69 a5       	ldd	r22, Y+41	; 0x29
    2bec:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bf0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	1c f4       	brge	.+6      	; 0x2c08 <lcd_pulse_enable+0x70>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	88 a7       	std	Y+40, r24	; 0x28
    2c06:	91 c0       	rjmp	.+290    	; 0x2d2a <lcd_pulse_enable+0x192>
	else if (__tmp > 255)
    2c08:	69 a5       	ldd	r22, Y+41	; 0x29
    2c0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	53 e4       	ldi	r21, 0x43	; 67
    2c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	0c f0       	brlt	.+2      	; 0x2c22 <lcd_pulse_enable+0x8a>
    2c20:	7b c0       	rjmp	.+246    	; 0x2d18 <lcd_pulse_enable+0x180>
	{
		_delay_ms(__us / 1000.0);
    2c22:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c24:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c28:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	4a e7       	ldi	r20, 0x7A	; 122
    2c30:	54 e4       	ldi	r21, 0x44	; 68
    2c32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	8c a3       	std	Y+36, r24	; 0x24
    2c3c:	9d a3       	std	Y+37, r25	; 0x25
    2c3e:	ae a3       	std	Y+38, r26	; 0x26
    2c40:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	6c a1       	ldd	r22, Y+36	; 0x24
    2c44:	7d a1       	ldd	r23, Y+37	; 0x25
    2c46:	8e a1       	ldd	r24, Y+38	; 0x26
    2c48:	9f a1       	ldd	r25, Y+39	; 0x27
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	4a ef       	ldi	r20, 0xFA	; 250
    2c50:	54 e4       	ldi	r21, 0x44	; 68
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	88 a3       	std	Y+32, r24	; 0x20
    2c5c:	99 a3       	std	Y+33, r25	; 0x21
    2c5e:	aa a3       	std	Y+34, r26	; 0x22
    2c60:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2c62:	68 a1       	ldd	r22, Y+32	; 0x20
    2c64:	79 a1       	ldd	r23, Y+33	; 0x21
    2c66:	8a a1       	ldd	r24, Y+34	; 0x22
    2c68:	9b a1       	ldd	r25, Y+35	; 0x23
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <lcd_pulse_enable+0xec>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c80:	8e 8f       	std	Y+30, r24	; 0x1e
    2c82:	3f c0       	rjmp	.+126    	; 0x2d02 <lcd_pulse_enable+0x16a>
	else if (__tmp > 65535)
    2c84:	68 a1       	ldd	r22, Y+32	; 0x20
    2c86:	79 a1       	ldd	r23, Y+33	; 0x21
    2c88:	8a a1       	ldd	r24, Y+34	; 0x22
    2c8a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	3f ef       	ldi	r19, 0xFF	; 255
    2c90:	4f e7       	ldi	r20, 0x7F	; 127
    2c92:	57 e4       	ldi	r21, 0x47	; 71
    2c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	4c f5       	brge	.+82     	; 0x2cee <lcd_pulse_enable+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	6c a1       	ldd	r22, Y+36	; 0x24
    2c9e:	7d a1       	ldd	r23, Y+37	; 0x25
    2ca0:	8e a1       	ldd	r24, Y+38	; 0x26
    2ca2:	9f a1       	ldd	r25, Y+39	; 0x27
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9f 8f       	std	Y+31, r25	; 0x1f
    2cc2:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <lcd_pulse_enable+0x14c>
    2cc6:	88 ec       	ldi	r24, 0xC8	; 200
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9d 8f       	std	Y+29, r25	; 0x1d
    2ccc:	8c 8f       	std	Y+28, r24	; 0x1c
    2cce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <lcd_pulse_enable+0x13a>
    2cd6:	9d 8f       	std	Y+29, r25	; 0x1d
    2cd8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	9f 8f       	std	Y+31, r25	; 0x1f
    2ce2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ce6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <lcd_pulse_enable+0x12e>
    2cec:	24 c0       	rjmp	.+72     	; 0x2d36 <lcd_pulse_enable+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	68 a1       	ldd	r22, Y+32	; 0x20
    2cf0:	79 a1       	ldd	r23, Y+33	; 0x21
    2cf2:	8a a1       	ldd	r24, Y+34	; 0x22
    2cf4:	9b a1       	ldd	r25, Y+35	; 0x23
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9f 8f       	std	Y+31, r25	; 0x1f
    2d00:	8e 8f       	std	Y+30, r24	; 0x1e
    2d02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d06:	9b 8f       	std	Y+27, r25	; 0x1b
    2d08:	8a 8f       	std	Y+26, r24	; 0x1a
    2d0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <lcd_pulse_enable+0x176>
    2d12:	9b 8f       	std	Y+27, r25	; 0x1b
    2d14:	8a 8f       	std	Y+26, r24	; 0x1a
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <lcd_pulse_enable+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d18:	69 a5       	ldd	r22, Y+41	; 0x29
    2d1a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	88 a7       	std	Y+40, r24	; 0x28
    2d2a:	88 a5       	ldd	r24, Y+40	; 0x28
    2d2c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d2e:	89 8d       	ldd	r24, Y+25	; 0x19
    2d30:	8a 95       	dec	r24
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <lcd_pulse_enable+0x198>
    2d34:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    PORTD &= ~(1 << LCD_EN_PIN);
    2d36:	a2 e3       	ldi	r26, 0x32	; 50
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e2 e3       	ldi	r30, 0x32	; 50
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	8b 7f       	andi	r24, 0xFB	; 251
    2d42:	8c 93       	st	X, r24
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	a0 e8       	ldi	r26, 0x80	; 128
    2d4a:	bf e3       	ldi	r27, 0x3F	; 63
    2d4c:	8d 8b       	std	Y+21, r24	; 0x15
    2d4e:	9e 8b       	std	Y+22, r25	; 0x16
    2d50:	af 8b       	std	Y+23, r26	; 0x17
    2d52:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d54:	6d 89       	ldd	r22, Y+21	; 0x15
    2d56:	7e 89       	ldd	r23, Y+22	; 0x16
    2d58:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5c:	2b ea       	ldi	r18, 0xAB	; 171
    2d5e:	3a ea       	ldi	r19, 0xAA	; 170
    2d60:	4a e2       	ldi	r20, 0x2A	; 42
    2d62:	50 e4       	ldi	r21, 0x40	; 64
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	89 8b       	std	Y+17, r24	; 0x11
    2d6e:	9a 8b       	std	Y+18, r25	; 0x12
    2d70:	ab 8b       	std	Y+19, r26	; 0x13
    2d72:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d74:	69 89       	ldd	r22, Y+17	; 0x11
    2d76:	7a 89       	ldd	r23, Y+18	; 0x12
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	1c f4       	brge	.+6      	; 0x2d92 <lcd_pulse_enable+0x1fa>
		__ticks = 1;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	88 8b       	std	Y+16, r24	; 0x10
    2d90:	91 c0       	rjmp	.+290    	; 0x2eb4 <lcd_pulse_enable+0x31c>
	else if (__tmp > 255)
    2d92:	69 89       	ldd	r22, Y+17	; 0x11
    2d94:	7a 89       	ldd	r23, Y+18	; 0x12
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	4f e7       	ldi	r20, 0x7F	; 127
    2da0:	53 e4       	ldi	r21, 0x43	; 67
    2da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	0c f0       	brlt	.+2      	; 0x2dac <lcd_pulse_enable+0x214>
    2daa:	7b c0       	rjmp	.+246    	; 0x2ea2 <lcd_pulse_enable+0x30a>
	{
		_delay_ms(__us / 1000.0);
    2dac:	6d 89       	ldd	r22, Y+21	; 0x15
    2dae:	7e 89       	ldd	r23, Y+22	; 0x16
    2db0:	8f 89       	ldd	r24, Y+23	; 0x17
    2db2:	98 8d       	ldd	r25, Y+24	; 0x18
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	54 e4       	ldi	r21, 0x44	; 68
    2dbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8c 87       	std	Y+12, r24	; 0x0c
    2dc6:	9d 87       	std	Y+13, r25	; 0x0d
    2dc8:	ae 87       	std	Y+14, r26	; 0x0e
    2dca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4a ef       	ldi	r20, 0xFA	; 250
    2dda:	54 e4       	ldi	r21, 0x44	; 68
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	88 87       	std	Y+8, r24	; 0x08
    2de6:	99 87       	std	Y+9, r25	; 0x09
    2de8:	aa 87       	std	Y+10, r26	; 0x0a
    2dea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2dec:	68 85       	ldd	r22, Y+8	; 0x08
    2dee:	79 85       	ldd	r23, Y+9	; 0x09
    2df0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e8       	ldi	r20, 0x80	; 128
    2dfa:	5f e3       	ldi	r21, 0x3F	; 63
    2dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e00:	88 23       	and	r24, r24
    2e02:	2c f4       	brge	.+10     	; 0x2e0e <lcd_pulse_enable+0x276>
		__ticks = 1;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	9f 83       	std	Y+7, r25	; 0x07
    2e0a:	8e 83       	std	Y+6, r24	; 0x06
    2e0c:	3f c0       	rjmp	.+126    	; 0x2e8c <lcd_pulse_enable+0x2f4>
	else if (__tmp > 65535)
    2e0e:	68 85       	ldd	r22, Y+8	; 0x08
    2e10:	79 85       	ldd	r23, Y+9	; 0x09
    2e12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	4f e7       	ldi	r20, 0x7F	; 127
    2e1c:	57 e4       	ldi	r21, 0x47	; 71
    2e1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e22:	18 16       	cp	r1, r24
    2e24:	4c f5       	brge	.+82     	; 0x2e78 <lcd_pulse_enable+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e26:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e28:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e2       	ldi	r20, 0x20	; 32
    2e34:	51 e4       	ldi	r21, 0x41	; 65
    2e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	9f 83       	std	Y+7, r25	; 0x07
    2e4c:	8e 83       	std	Y+6, r24	; 0x06
    2e4e:	0f c0       	rjmp	.+30     	; 0x2e6e <lcd_pulse_enable+0x2d6>
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9d 83       	std	Y+5, r25	; 0x05
    2e56:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e58:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <lcd_pulse_enable+0x2c4>
    2e60:	9d 83       	std	Y+5, r25	; 0x05
    2e62:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e64:	8e 81       	ldd	r24, Y+6	; 0x06
    2e66:	9f 81       	ldd	r25, Y+7	; 0x07
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	9f 83       	std	Y+7, r25	; 0x07
    2e6c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e70:	9f 81       	ldd	r25, Y+7	; 0x07
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	69 f7       	brne	.-38     	; 0x2e50 <lcd_pulse_enable+0x2b8>
    2e76:	24 c0       	rjmp	.+72     	; 0x2ec0 <lcd_pulse_enable+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e78:	68 85       	ldd	r22, Y+8	; 0x08
    2e7a:	79 85       	ldd	r23, Y+9	; 0x09
    2e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	9f 83       	std	Y+7, r25	; 0x07
    2e8a:	8e 83       	std	Y+6, r24	; 0x06
    2e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e90:	9b 83       	std	Y+3, r25	; 0x03
    2e92:	8a 83       	std	Y+2, r24	; 0x02
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	9b 81       	ldd	r25, Y+3	; 0x03
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <lcd_pulse_enable+0x300>
    2e9c:	9b 83       	std	Y+3, r25	; 0x03
    2e9e:	8a 83       	std	Y+2, r24	; 0x02
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <lcd_pulse_enable+0x328>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ea2:	69 89       	ldd	r22, Y+17	; 0x11
    2ea4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	88 8b       	std	Y+16, r24	; 0x10
    2eb4:	88 89       	ldd	r24, Y+16	; 0x10
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	8a 95       	dec	r24
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <lcd_pulse_enable+0x322>
    2ebe:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    2ec0:	e0 96       	adiw	r28, 0x30	; 48
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <main>:
void update_display(void);
void check_alarm_trigger(void);
void debug_buttons(void);

int main(void)
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	6e 97       	sbiw	r28, 0x1e	; 30
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    // Initialize all modules
    system_init();
    2ee6:	0e 94 c4 18 	call	0x3188	; 0x3188 <system_init>
    
    // Enable global interrupts
    sei();
    2eea:	78 94       	sei
    
    // Main program loop
    while(1) {
        // Poll for button inputs
        buttons_read_input();
    2eec:	0e 94 db 08 	call	0x11b6	; 0x11b6 <buttons_read_input>
        
        // Check for mode change
        if (button_is_pressed(BTN_MODE)) {
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    2ef6:	88 23       	and	r24, r24
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <main+0x2a>
    2efa:	83 c0       	rjmp	.+262    	; 0x3002 <main+0x130>
            current_mode = (current_mode + 1) % MODE_MAX;
    2efc:	80 91 02 03 	lds	r24, 0x0302
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	26 e0       	ldi	r18, 0x06	; 6
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <__divmodhi4>
    2f10:	80 93 02 03 	sts	0x0302, r24
            mode_changed = true;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	80 93 cc 02 	sts	0x02CC, r24
            lcd_clear();
    2f1a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a8 e4       	ldi	r26, 0x48	; 72
    2f24:	b3 e4       	ldi	r27, 0x43	; 67
    2f26:	89 8f       	std	Y+25, r24	; 0x19
    2f28:	9a 8f       	std	Y+26, r25	; 0x1a
    2f2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a ef       	ldi	r20, 0xFA	; 250
    2f3c:	54 e4       	ldi	r21, 0x44	; 68
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8d 8b       	std	Y+21, r24	; 0x15
    2f48:	9e 8b       	std	Y+22, r25	; 0x16
    2f4a:	af 8b       	std	Y+23, r26	; 0x17
    2f4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	2c f4       	brge	.+10     	; 0x2f70 <main+0x9e>
		__ticks = 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9c 8b       	std	Y+20, r25	; 0x14
    2f6c:	8b 8b       	std	Y+19, r24	; 0x13
    2f6e:	3f c0       	rjmp	.+126    	; 0x2fee <main+0x11c>
	else if (__tmp > 65535)
    2f70:	6d 89       	ldd	r22, Y+21	; 0x15
    2f72:	7e 89       	ldd	r23, Y+22	; 0x16
    2f74:	8f 89       	ldd	r24, Y+23	; 0x17
    2f76:	98 8d       	ldd	r25, Y+24	; 0x18
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	57 e4       	ldi	r21, 0x47	; 71
    2f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	4c f5       	brge	.+82     	; 0x2fda <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e2       	ldi	r20, 0x20	; 32
    2f96:	51 e4       	ldi	r21, 0x41	; 65
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	9c 8b       	std	Y+20, r25	; 0x14
    2fae:	8b 8b       	std	Y+19, r24	; 0x13
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <main+0xfe>
    2fb2:	88 ec       	ldi	r24, 0xC8	; 200
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	9a 8b       	std	Y+18, r25	; 0x12
    2fb8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fba:	89 89       	ldd	r24, Y+17	; 0x11
    2fbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <main+0xec>
    2fc2:	9a 8b       	std	Y+18, r25	; 0x12
    2fc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	9c 8b       	std	Y+20, r25	; 0x14
    2fce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	69 f7       	brne	.-38     	; 0x2fb2 <main+0xe0>
    2fd8:	14 c0       	rjmp	.+40     	; 0x3002 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fda:	6d 89       	ldd	r22, Y+21	; 0x15
    2fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	98 8b       	std	Y+16, r25	; 0x10
    2ff4:	8f 87       	std	Y+15, r24	; 0x0f
    2ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff8:	98 89       	ldd	r25, Y+16	; 0x10
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <main+0x128>
    2ffe:	98 8b       	std	Y+16, r25	; 0x10
    3000:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(200); // Debounce delay
        }
        
        // Handle current mode
        switch(current_mode) {
    3002:	80 91 02 03 	lds	r24, 0x0302
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	3e 8f       	std	Y+30, r19	; 0x1e
    300c:	2d 8f       	std	Y+29, r18	; 0x1d
    300e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3010:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3012:	82 30       	cpi	r24, 0x02	; 2
    3014:	91 05       	cpc	r25, r1
    3016:	29 f1       	breq	.+74     	; 0x3062 <main+0x190>
    3018:	2d 8d       	ldd	r18, Y+29	; 0x1d
    301a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    301c:	23 30       	cpi	r18, 0x03	; 3
    301e:	31 05       	cpc	r19, r1
    3020:	54 f4       	brge	.+20     	; 0x3036 <main+0x164>
    3022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3024:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	b1 f0       	breq	.+44     	; 0x3056 <main+0x184>
    302a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    302c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    302e:	21 30       	cpi	r18, 0x01	; 1
    3030:	31 05       	cpc	r19, r1
    3032:	a1 f0       	breq	.+40     	; 0x305c <main+0x18a>
    3034:	22 c0       	rjmp	.+68     	; 0x307a <main+0x1a8>
    3036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3038:	9e 8d       	ldd	r25, Y+30	; 0x1e
    303a:	84 30       	cpi	r24, 0x04	; 4
    303c:	91 05       	cpc	r25, r1
    303e:	b9 f0       	breq	.+46     	; 0x306e <main+0x19c>
    3040:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3042:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3044:	24 30       	cpi	r18, 0x04	; 4
    3046:	31 05       	cpc	r19, r1
    3048:	7c f0       	brlt	.+30     	; 0x3068 <main+0x196>
    304a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    304e:	85 30       	cpi	r24, 0x05	; 5
    3050:	91 05       	cpc	r25, r1
    3052:	81 f0       	breq	.+32     	; 0x3074 <main+0x1a2>
    3054:	12 c0       	rjmp	.+36     	; 0x307a <main+0x1a8>
            case MODE_CLOCK:
                handle_mode_clock();
    3056:	0e 94 bf 19 	call	0x337e	; 0x337e <handle_mode_clock>
    305a:	11 c0       	rjmp	.+34     	; 0x307e <main+0x1ac>
                break;
            case MODE_TIME_SET:
                handle_mode_time_set();
    305c:	0e 94 c6 19 	call	0x338c	; 0x338c <handle_mode_time_set>
    3060:	0e c0       	rjmp	.+28     	; 0x307e <main+0x1ac>
                break;
            case MODE_ALARM_SET:
                handle_mode_alarm_set();
    3062:	0e 94 24 1c 	call	0x3848	; 0x3848 <handle_mode_alarm_set>
    3066:	0b c0       	rjmp	.+22     	; 0x307e <main+0x1ac>
                break;
            case MODE_STOPWATCH:
                handle_mode_stopwatch();
    3068:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <handle_mode_stopwatch>
    306c:	08 c0       	rjmp	.+16     	; 0x307e <main+0x1ac>
                break;
            case MODE_COUNTDOWN:
                handle_mode_countdown();
    306e:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <handle_mode_countdown>
    3072:	05 c0       	rjmp	.+10     	; 0x307e <main+0x1ac>
                break;
            case MODE_SETUP:
                handle_mode_setup();
    3074:	0e 94 a2 20 	call	0x4144	; 0x4144 <handle_mode_setup>
    3078:	02 c0       	rjmp	.+4      	; 0x307e <main+0x1ac>
                break;
            default:
                current_mode = MODE_CLOCK;
    307a:	10 92 02 03 	sts	0x0302, r1
                break;
        }
        
        // Check for alarm trigger
        check_alarm_trigger();
    307e:	0e 94 45 24 	call	0x488a	; 0x488a <check_alarm_trigger>
        
        // Debug buttons (uncomment to test)
        debug_buttons();
    3082:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <debug_buttons>
        
        // Update display if mode changed or every second
        if (mode_changed || seconds_tick) {
    3086:	80 91 cc 02 	lds	r24, 0x02CC
    308a:	88 23       	and	r24, r24
    308c:	21 f4       	brne	.+8      	; 0x3096 <main+0x1c4>
    308e:	80 91 03 03 	lds	r24, 0x0303
    3092:	88 23       	and	r24, r24
    3094:	31 f0       	breq	.+12     	; 0x30a2 <main+0x1d0>
            update_display();
    3096:	0e 94 ef 22 	call	0x45de	; 0x45de <update_display>
            mode_changed = false;
    309a:	10 92 cc 02 	sts	0x02CC, r1
            seconds_tick = 0;
    309e:	10 92 03 03 	sts	0x0303, r1
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	a8 e4       	ldi	r26, 0x48	; 72
    30a8:	b2 e4       	ldi	r27, 0x42	; 66
    30aa:	8b 87       	std	Y+11, r24	; 0x0b
    30ac:	9c 87       	std	Y+12, r25	; 0x0c
    30ae:	ad 87       	std	Y+13, r26	; 0x0d
    30b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4a ef       	ldi	r20, 0xFA	; 250
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	8f 83       	std	Y+7, r24	; 0x07
    30cc:	98 87       	std	Y+8, r25	; 0x08
    30ce:	a9 87       	std	Y+9, r26	; 0x09
    30d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d2:	6f 81       	ldd	r22, Y+7	; 0x07
    30d4:	78 85       	ldd	r23, Y+8	; 0x08
    30d6:	89 85       	ldd	r24, Y+9	; 0x09
    30d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e8       	ldi	r20, 0x80	; 128
    30e0:	5f e3       	ldi	r21, 0x3F	; 63
    30e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e6:	88 23       	and	r24, r24
    30e8:	2c f4       	brge	.+10     	; 0x30f4 <main+0x222>
		__ticks = 1;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	3f c0       	rjmp	.+126    	; 0x3172 <main+0x2a0>
	else if (__tmp > 65535)
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	3f ef       	ldi	r19, 0xFF	; 255
    3100:	4f e7       	ldi	r20, 0x7F	; 127
    3102:	57 e4       	ldi	r21, 0x47	; 71
    3104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3108:	18 16       	cp	r1, r24
    310a:	4c f5       	brge	.+82     	; 0x315e <main+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310c:	6b 85       	ldd	r22, Y+11	; 0x0b
    310e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3110:	8d 85       	ldd	r24, Y+13	; 0x0d
    3112:	9e 85       	ldd	r25, Y+14	; 0x0e
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e2       	ldi	r20, 0x20	; 32
    311a:	51 e4       	ldi	r21, 0x41	; 65
    311c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9e 83       	std	Y+6, r25	; 0x06
    3132:	8d 83       	std	Y+5, r24	; 0x05
    3134:	0f c0       	rjmp	.+30     	; 0x3154 <main+0x282>
    3136:	88 ec       	ldi	r24, 0xC8	; 200
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	9c 83       	std	Y+4, r25	; 0x04
    313c:	8b 83       	std	Y+3, r24	; 0x03
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	f1 f7       	brne	.-4      	; 0x3142 <main+0x270>
    3146:	9c 83       	std	Y+4, r25	; 0x04
    3148:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	69 f7       	brne	.-38     	; 0x3136 <main+0x264>
    315c:	c7 ce       	rjmp	.-626    	; 0x2eec <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315e:	6f 81       	ldd	r22, Y+7	; 0x07
    3160:	78 85       	ldd	r23, Y+8	; 0x08
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	9e 83       	std	Y+6, r25	; 0x06
    3170:	8d 83       	std	Y+5, r24	; 0x05
    3172:	8d 81       	ldd	r24, Y+5	; 0x05
    3174:	9e 81       	ldd	r25, Y+6	; 0x06
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <main+0x2ac>
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	b2 ce       	rjmp	.-668    	; 0x2eec <main+0x1a>

00003188 <system_init>:
    
    return 0;
}

void system_init(void)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	2e 97       	sbiw	r28, 0x0e	; 14
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    // Initialize LCD
    lcd_init();
    319c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <lcd_init>
    
    // Initialize RTC
    rtc_init();
    31a0:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <rtc_init>
    
    // Initialize buttons
    buttons_init();
    31a4:	0e 94 a0 08 	call	0x1140	; 0x1140 <buttons_init>
    
    // Initialize stopwatch
    stopwatch_init();
    31a8:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <stopwatch_init>
    
    // Initialize countdown
    countdown_init();
    31ac:	0e 94 65 0d 	call	0x1aca	; 0x1aca <countdown_init>
    
    // Initialize alarm
    alarm_init();
    31b0:	0e 94 75 07 	call	0xeea	; 0xeea <alarm_init>
    
    // Initialize buzzer
    buzzer_init();
    31b4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <buzzer_init>
    
    // Initialize Timer1 for 1-second ticks
    // Set Timer1 to CTC mode with prescaler 1024
    // For 8MHz: 8000000/1024 = 7812.5 Hz
    // To get 1 second: 7812.5/7812 = 1 Hz
    TCCR1A = 0x00;
    31b8:	ef e4       	ldi	r30, 0x4F	; 79
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	10 82       	st	Z, r1
    TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC mode, prescaler 1024
    31be:	ee e4       	ldi	r30, 0x4E	; 78
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	8d e0       	ldi	r24, 0x0D	; 13
    31c4:	80 83       	st	Z, r24
    OCR1A = 7811; // Compare value for 1 second
    31c6:	ea e4       	ldi	r30, 0x4A	; 74
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	83 e8       	ldi	r24, 0x83	; 131
    31cc:	9e e1       	ldi	r25, 0x1E	; 30
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	80 83       	st	Z, r24
    TIMSK = (1 << OCIE1A); // Enable Timer1 compare interrupt
    31d2:	e9 e5       	ldi	r30, 0x59	; 89
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 e1       	ldi	r24, 0x10	; 16
    31d8:	80 83       	st	Z, r24
    
    // Display welcome message
    lcd_clear();
    31da:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
    lcd_goto(0, 0);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
    lcd_print("RTC System v1.0");
    31e6:	82 e9       	ldi	r24, 0x92	; 146
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    lcd_goto(1, 0);
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
    lcd_print("Initializing...");
    31f6:	82 ea       	ldi	r24, 0xA2	; 162
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	aa ef       	ldi	r26, 0xFA	; 250
    3204:	b4 e4       	ldi	r27, 0x44	; 68
    3206:	8b 87       	std	Y+11, r24	; 0x0b
    3208:	9c 87       	std	Y+12, r25	; 0x0c
    320a:	ad 87       	std	Y+13, r26	; 0x0d
    320c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3210:	7c 85       	ldd	r23, Y+12	; 0x0c
    3212:	8d 85       	ldd	r24, Y+13	; 0x0d
    3214:	9e 85       	ldd	r25, Y+14	; 0x0e
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	4a ef       	ldi	r20, 0xFA	; 250
    321c:	54 e4       	ldi	r21, 0x44	; 68
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	8f 83       	std	Y+7, r24	; 0x07
    3228:	98 87       	std	Y+8, r25	; 0x08
    322a:	a9 87       	std	Y+9, r26	; 0x09
    322c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322e:	6f 81       	ldd	r22, Y+7	; 0x07
    3230:	78 85       	ldd	r23, Y+8	; 0x08
    3232:	89 85       	ldd	r24, Y+9	; 0x09
    3234:	9a 85       	ldd	r25, Y+10	; 0x0a
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	2c f4       	brge	.+10     	; 0x3250 <system_init+0xc8>
		__ticks = 1;
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9e 83       	std	Y+6, r25	; 0x06
    324c:	8d 83       	std	Y+5, r24	; 0x05
    324e:	3f c0       	rjmp	.+126    	; 0x32ce <system_init+0x146>
	else if (__tmp > 65535)
    3250:	6f 81       	ldd	r22, Y+7	; 0x07
    3252:	78 85       	ldd	r23, Y+8	; 0x08
    3254:	89 85       	ldd	r24, Y+9	; 0x09
    3256:	9a 85       	ldd	r25, Y+10	; 0x0a
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	3f ef       	ldi	r19, 0xFF	; 255
    325c:	4f e7       	ldi	r20, 0x7F	; 127
    325e:	57 e4       	ldi	r21, 0x47	; 71
    3260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3264:	18 16       	cp	r1, r24
    3266:	4c f5       	brge	.+82     	; 0x32ba <system_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3268:	6b 85       	ldd	r22, Y+11	; 0x0b
    326a:	7c 85       	ldd	r23, Y+12	; 0x0c
    326c:	8d 85       	ldd	r24, Y+13	; 0x0d
    326e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e2       	ldi	r20, 0x20	; 32
    3276:	51 e4       	ldi	r21, 0x41	; 65
    3278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	0f c0       	rjmp	.+30     	; 0x32b0 <system_init+0x128>
    3292:	88 ec       	ldi	r24, 0xC8	; 200
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	9c 81       	ldd	r25, Y+4	; 0x04
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <system_init+0x116>
    32a2:	9c 83       	std	Y+4, r25	; 0x04
    32a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	9e 83       	std	Y+6, r25	; 0x06
    32ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	69 f7       	brne	.-38     	; 0x3292 <system_init+0x10a>
    32b8:	14 c0       	rjmp	.+40     	; 0x32e2 <system_init+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	78 85       	ldd	r23, Y+8	; 0x08
    32be:	89 85       	ldd	r24, Y+9	; 0x09
    32c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	9a 81       	ldd	r25, Y+2	; 0x02
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <system_init+0x152>
    32de:	9a 83       	std	Y+2, r25	; 0x02
    32e0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
    lcd_clear();
    32e2:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
}
    32e6:	2e 96       	adiw	r28, 0x0e	; 14
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	de bf       	out	0x3e, r29	; 62
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <set_initial_time_date>:

// Function to set initial time and date (uncomment and modify as needed)
void set_initial_time_date(void)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	2c 97       	sbiw	r28, 0x0c	; 12
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    // ===== SET YOUR DESIRED TIME HERE =====
    time_t initial_time = {
        .hour = 12,    // Set hour (0-23)
        .minute = 30,  // Set minute (0-59)
        .second = 0    // Set second (0-59)
    };
    330c:	ce 01       	movw	r24, r28
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	99 87       	std	Y+9, r25	; 0x09
    3312:	88 87       	std	Y+8, r24	; 0x08
    3314:	e0 ee       	ldi	r30, 0xE0	; 224
    3316:	f2 e0       	ldi	r31, 0x02	; 2
    3318:	fb 87       	std	Y+11, r31	; 0x0b
    331a:	ea 87       	std	Y+10, r30	; 0x0a
    331c:	f3 e0       	ldi	r31, 0x03	; 3
    331e:	fc 87       	std	Y+12, r31	; 0x0c
    3320:	ea 85       	ldd	r30, Y+10	; 0x0a
    3322:	fb 85       	ldd	r31, Y+11	; 0x0b
    3324:	00 80       	ld	r0, Z
    3326:	8a 85       	ldd	r24, Y+10	; 0x0a
    3328:	9b 85       	ldd	r25, Y+11	; 0x0b
    332a:	01 96       	adiw	r24, 0x01	; 1
    332c:	9b 87       	std	Y+11, r25	; 0x0b
    332e:	8a 87       	std	Y+10, r24	; 0x0a
    3330:	e8 85       	ldd	r30, Y+8	; 0x08
    3332:	f9 85       	ldd	r31, Y+9	; 0x09
    3334:	00 82       	st	Z, r0
    3336:	88 85       	ldd	r24, Y+8	; 0x08
    3338:	99 85       	ldd	r25, Y+9	; 0x09
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	99 87       	std	Y+9, r25	; 0x09
    333e:	88 87       	std	Y+8, r24	; 0x08
    3340:	9c 85       	ldd	r25, Y+12	; 0x0c
    3342:	91 50       	subi	r25, 0x01	; 1
    3344:	9c 87       	std	Y+12, r25	; 0x0c
    3346:	ec 85       	ldd	r30, Y+12	; 0x0c
    3348:	ee 23       	and	r30, r30
    334a:	51 f7       	brne	.-44     	; 0x3320 <set_initial_time_date+0x28>
    // ===== SET YOUR DESIRED DATE HERE =====
    date_t initial_date = {
        .day = 15,     // Set day (1-31)
        .month = 1,    // Set month (1-12)
        .year = 2024   // Set year (2000-2099)
    };
    334c:	8f e0       	ldi	r24, 0x0F	; 15
    334e:	8c 83       	std	Y+4, r24	; 0x04
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	88 ee       	ldi	r24, 0xE8	; 232
    3356:	97 e0       	ldi	r25, 0x07	; 7
    3358:	9f 83       	std	Y+7, r25	; 0x07
    335a:	8e 83       	std	Y+6, r24	; 0x06
    
    // Set the time and date in RTC
    rtc_set_time(&initial_time);
    335c:	ce 01       	movw	r24, r28
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	0e 94 d6 30 	call	0x61ac	; 0x61ac <rtc_set_time>
    rtc_set_date(&initial_date);
    3364:	ce 01       	movw	r24, r28
    3366:	04 96       	adiw	r24, 0x04	; 4
    3368:	0e 94 2b 31 	call	0x6256	; 0x6256 <rtc_set_date>
}
    336c:	2c 96       	adiw	r28, 0x0c	; 12
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <handle_mode_clock>:

void handle_mode_clock(void)
{
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    // Clock mode - just display current time
    // No special handling needed, display is updated in update_display()
}
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <handle_mode_time_set>:

void handle_mode_time_set(void)
{
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	ae 97       	sbiw	r28, 0x2e	; 46
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    static uint8_t set_field = 0; // 0=hour, 1=minute, 2=second, 3=day, 4=month, 5=year
    
    // Initialize with current RTC values if not done yet
    if (!time_set_initialized) {
    33a0:	80 91 04 03 	lds	r24, 0x0304
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	89 27       	eor	r24, r25
    33a8:	88 23       	and	r24, r24
    33aa:	59 f0       	breq	.+22     	; 0x33c2 <handle_mode_time_set+0x36>
        rtc_get_time(&time_set_time);
    33ac:	84 ed       	ldi	r24, 0xD4	; 212
    33ae:	92 e0       	ldi	r25, 0x02	; 2
    33b0:	0e 94 af 30 	call	0x615e	; 0x615e <rtc_get_time>
        rtc_get_date(&time_set_date);
    33b4:	87 ed       	ldi	r24, 0xD7	; 215
    33b6:	92 e0       	ldi	r25, 0x02	; 2
    33b8:	0e 94 00 31 	call	0x6200	; 0x6200 <rtc_get_date>
        time_set_initialized = true;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	80 93 04 03 	sts	0x0304, r24
    }
    
    // Handle SET button to cycle through fields
    if (button_is_pressed(BTN_SET)) {
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    33c8:	88 23       	and	r24, r24
    33ca:	09 f4       	brne	.+2      	; 0x33ce <handle_mode_time_set+0x42>
    33cc:	7e c0       	rjmp	.+252    	; 0x34ca <handle_mode_time_set+0x13e>
        set_field = (set_field + 1) % 6;
    33ce:	80 91 05 03 	lds	r24, 0x0305
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	01 96       	adiw	r24, 0x01	; 1
    33d8:	26 e0       	ldi	r18, 0x06	; 6
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	b9 01       	movw	r22, r18
    33de:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <__divmodhi4>
    33e2:	80 93 05 03 	sts	0x0305, r24
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a8 e4       	ldi	r26, 0x48	; 72
    33ec:	b3 e4       	ldi	r27, 0x43	; 67
    33ee:	8f a3       	std	Y+39, r24	; 0x27
    33f0:	98 a7       	std	Y+40, r25	; 0x28
    33f2:	a9 a7       	std	Y+41, r26	; 0x29
    33f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	6f a1       	ldd	r22, Y+39	; 0x27
    33f8:	78 a5       	ldd	r23, Y+40	; 0x28
    33fa:	89 a5       	ldd	r24, Y+41	; 0x29
    33fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a ef       	ldi	r20, 0xFA	; 250
    3404:	54 e4       	ldi	r21, 0x44	; 68
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8b a3       	std	Y+35, r24	; 0x23
    3410:	9c a3       	std	Y+36, r25	; 0x24
    3412:	ad a3       	std	Y+37, r26	; 0x25
    3414:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3416:	6b a1       	ldd	r22, Y+35	; 0x23
    3418:	7c a1       	ldd	r23, Y+36	; 0x24
    341a:	8d a1       	ldd	r24, Y+37	; 0x25
    341c:	9e a1       	ldd	r25, Y+38	; 0x26
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	2c f4       	brge	.+10     	; 0x3438 <handle_mode_time_set+0xac>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9a a3       	std	Y+34, r25	; 0x22
    3434:	89 a3       	std	Y+33, r24	; 0x21
    3436:	3f c0       	rjmp	.+126    	; 0x34b6 <handle_mode_time_set+0x12a>
	else if (__tmp > 65535)
    3438:	6b a1       	ldd	r22, Y+35	; 0x23
    343a:	7c a1       	ldd	r23, Y+36	; 0x24
    343c:	8d a1       	ldd	r24, Y+37	; 0x25
    343e:	9e a1       	ldd	r25, Y+38	; 0x26
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	4c f5       	brge	.+82     	; 0x34a2 <handle_mode_time_set+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3450:	6f a1       	ldd	r22, Y+39	; 0x27
    3452:	78 a5       	ldd	r23, Y+40	; 0x28
    3454:	89 a5       	ldd	r24, Y+41	; 0x29
    3456:	9a a5       	ldd	r25, Y+42	; 0x2a
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9a a3       	std	Y+34, r25	; 0x22
    3476:	89 a3       	std	Y+33, r24	; 0x21
    3478:	0f c0       	rjmp	.+30     	; 0x3498 <handle_mode_time_set+0x10c>
    347a:	88 ec       	ldi	r24, 0xC8	; 200
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	98 a3       	std	Y+32, r25	; 0x20
    3480:	8f 8f       	std	Y+31, r24	; 0x1f
    3482:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3484:	98 a1       	ldd	r25, Y+32	; 0x20
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <handle_mode_time_set+0xfa>
    348a:	98 a3       	std	Y+32, r25	; 0x20
    348c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348e:	89 a1       	ldd	r24, Y+33	; 0x21
    3490:	9a a1       	ldd	r25, Y+34	; 0x22
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	9a a3       	std	Y+34, r25	; 0x22
    3496:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3498:	89 a1       	ldd	r24, Y+33	; 0x21
    349a:	9a a1       	ldd	r25, Y+34	; 0x22
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	69 f7       	brne	.-38     	; 0x347a <handle_mode_time_set+0xee>
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <handle_mode_time_set+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a2:	6b a1       	ldd	r22, Y+35	; 0x23
    34a4:	7c a1       	ldd	r23, Y+36	; 0x24
    34a6:	8d a1       	ldd	r24, Y+37	; 0x25
    34a8:	9e a1       	ldd	r25, Y+38	; 0x26
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	9a a3       	std	Y+34, r25	; 0x22
    34b4:	89 a3       	std	Y+33, r24	; 0x21
    34b6:	89 a1       	ldd	r24, Y+33	; 0x21
    34b8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ba:	9e 8f       	std	Y+30, r25	; 0x1e
    34bc:	8d 8f       	std	Y+29, r24	; 0x1d
    34be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	f1 f7       	brne	.-4      	; 0x34c2 <handle_mode_time_set+0x136>
    34c6:	9e 8f       	std	Y+30, r25	; 0x1e
    34c8:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(200);
    }
    
    // Handle START button for increment (since we don't have INC button)
    if (button_is_pressed(BTN_START)) {
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    34d0:	88 23       	and	r24, r24
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <handle_mode_time_set+0x14a>
    34d4:	d1 c0       	rjmp	.+418    	; 0x3678 <handle_mode_time_set+0x2ec>
        switch(set_field) {
    34d6:	80 91 05 03 	lds	r24, 0x0305
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	3e a7       	std	Y+46, r19	; 0x2e
    34e0:	2d a7       	std	Y+45, r18	; 0x2d
    34e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    34e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    34e6:	82 30       	cpi	r24, 0x02	; 2
    34e8:	91 05       	cpc	r25, r1
    34ea:	69 f1       	breq	.+90     	; 0x3546 <handle_mode_time_set+0x1ba>
    34ec:	2d a5       	ldd	r18, Y+45	; 0x2d
    34ee:	3e a5       	ldd	r19, Y+46	; 0x2e
    34f0:	23 30       	cpi	r18, 0x03	; 3
    34f2:	31 05       	cpc	r19, r1
    34f4:	54 f4       	brge	.+20     	; 0x350a <handle_mode_time_set+0x17e>
    34f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    34f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	b1 f0       	breq	.+44     	; 0x352a <handle_mode_time_set+0x19e>
    34fe:	2d a5       	ldd	r18, Y+45	; 0x2d
    3500:	3e a5       	ldd	r19, Y+46	; 0x2e
    3502:	21 30       	cpi	r18, 0x01	; 1
    3504:	31 05       	cpc	r19, r1
    3506:	c1 f0       	breq	.+48     	; 0x3538 <handle_mode_time_set+0x1ac>
    3508:	45 c0       	rjmp	.+138    	; 0x3594 <handle_mode_time_set+0x208>
    350a:	8d a5       	ldd	r24, Y+45	; 0x2d
    350c:	9e a5       	ldd	r25, Y+46	; 0x2e
    350e:	84 30       	cpi	r24, 0x04	; 4
    3510:	91 05       	cpc	r25, r1
    3512:	79 f1       	breq	.+94     	; 0x3572 <handle_mode_time_set+0x1e6>
    3514:	2d a5       	ldd	r18, Y+45	; 0x2d
    3516:	3e a5       	ldd	r19, Y+46	; 0x2e
    3518:	24 30       	cpi	r18, 0x04	; 4
    351a:	31 05       	cpc	r19, r1
    351c:	dc f0       	brlt	.+54     	; 0x3554 <handle_mode_time_set+0x1c8>
    351e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3520:	9e a5       	ldd	r25, Y+46	; 0x2e
    3522:	85 30       	cpi	r24, 0x05	; 5
    3524:	91 05       	cpc	r25, r1
    3526:	61 f1       	breq	.+88     	; 0x3580 <handle_mode_time_set+0x1f4>
    3528:	35 c0       	rjmp	.+106    	; 0x3594 <handle_mode_time_set+0x208>
            case 0: // Hour
                time_set_time.hour = increment_hour(time_set_time.hour);
    352a:	80 91 d6 02 	lds	r24, 0x02D6
    352e:	0e 94 4a 33 	call	0x6694	; 0x6694 <increment_hour>
    3532:	80 93 d6 02 	sts	0x02D6, r24
    3536:	2e c0       	rjmp	.+92     	; 0x3594 <handle_mode_time_set+0x208>
                break;
            case 1: // Minute
                time_set_time.minute = increment_minute(time_set_time.minute);
    3538:	80 91 d5 02 	lds	r24, 0x02D5
    353c:	0e 94 70 33 	call	0x66e0	; 0x66e0 <increment_minute>
    3540:	80 93 d5 02 	sts	0x02D5, r24
    3544:	27 c0       	rjmp	.+78     	; 0x3594 <handle_mode_time_set+0x208>
                break;
            case 2: // Second
                time_set_time.second = increment_second(time_set_time.second);
    3546:	80 91 d4 02 	lds	r24, 0x02D4
    354a:	0e 94 96 33 	call	0x672c	; 0x672c <increment_second>
    354e:	80 93 d4 02 	sts	0x02D4, r24
    3552:	20 c0       	rjmp	.+64     	; 0x3594 <handle_mode_time_set+0x208>
                break;
            case 3: // Day
                time_set_date.day = increment_day(time_set_date.day, time_set_date.month, time_set_date.year);
    3554:	80 91 d7 02 	lds	r24, 0x02D7
    3558:	90 91 d8 02 	lds	r25, 0x02D8
    355c:	20 91 d9 02 	lds	r18, 0x02D9
    3560:	30 91 da 02 	lds	r19, 0x02DA
    3564:	69 2f       	mov	r22, r25
    3566:	a9 01       	movw	r20, r18
    3568:	0e 94 bc 33 	call	0x6778	; 0x6778 <increment_day>
    356c:	80 93 d7 02 	sts	0x02D7, r24
    3570:	11 c0       	rjmp	.+34     	; 0x3594 <handle_mode_time_set+0x208>
                break;
            case 4: // Month
                time_set_date.month = increment_month(time_set_date.month);
    3572:	80 91 d8 02 	lds	r24, 0x02D8
    3576:	0e 94 00 34 	call	0x6800	; 0x6800 <increment_month>
    357a:	80 93 d8 02 	sts	0x02D8, r24
    357e:	0a c0       	rjmp	.+20     	; 0x3594 <handle_mode_time_set+0x208>
                break;
            case 5: // Year
                time_set_date.year = increment_year(time_set_date.year);
    3580:	80 91 d9 02 	lds	r24, 0x02D9
    3584:	90 91 da 02 	lds	r25, 0x02DA
    3588:	0e 94 27 34 	call	0x684e	; 0x684e <increment_year>
    358c:	90 93 da 02 	sts	0x02DA, r25
    3590:	80 93 d9 02 	sts	0x02D9, r24
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	a8 e4       	ldi	r26, 0x48	; 72
    359a:	b3 e4       	ldi	r27, 0x43	; 67
    359c:	89 8f       	std	Y+25, r24	; 0x19
    359e:	9a 8f       	std	Y+26, r25	; 0x1a
    35a0:	ab 8f       	std	Y+27, r26	; 0x1b
    35a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a4:	69 8d       	ldd	r22, Y+25	; 0x19
    35a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4a ef       	ldi	r20, 0xFA	; 250
    35b2:	54 e4       	ldi	r21, 0x44	; 68
    35b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	8d 8b       	std	Y+21, r24	; 0x15
    35be:	9e 8b       	std	Y+22, r25	; 0x16
    35c0:	af 8b       	std	Y+23, r26	; 0x17
    35c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35c4:	6d 89       	ldd	r22, Y+21	; 0x15
    35c6:	7e 89       	ldd	r23, Y+22	; 0x16
    35c8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ca:	98 8d       	ldd	r25, Y+24	; 0x18
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e8       	ldi	r20, 0x80	; 128
    35d2:	5f e3       	ldi	r21, 0x3F	; 63
    35d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d8:	88 23       	and	r24, r24
    35da:	2c f4       	brge	.+10     	; 0x35e6 <handle_mode_time_set+0x25a>
		__ticks = 1;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	9c 8b       	std	Y+20, r25	; 0x14
    35e2:	8b 8b       	std	Y+19, r24	; 0x13
    35e4:	3f c0       	rjmp	.+126    	; 0x3664 <handle_mode_time_set+0x2d8>
	else if (__tmp > 65535)
    35e6:	6d 89       	ldd	r22, Y+21	; 0x15
    35e8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ea:	8f 89       	ldd	r24, Y+23	; 0x17
    35ec:	98 8d       	ldd	r25, Y+24	; 0x18
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	3f ef       	ldi	r19, 0xFF	; 255
    35f2:	4f e7       	ldi	r20, 0x7F	; 127
    35f4:	57 e4       	ldi	r21, 0x47	; 71
    35f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35fa:	18 16       	cp	r1, r24
    35fc:	4c f5       	brge	.+82     	; 0x3650 <handle_mode_time_set+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e2       	ldi	r20, 0x20	; 32
    360c:	51 e4       	ldi	r21, 0x41	; 65
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	9c 8b       	std	Y+20, r25	; 0x14
    3624:	8b 8b       	std	Y+19, r24	; 0x13
    3626:	0f c0       	rjmp	.+30     	; 0x3646 <handle_mode_time_set+0x2ba>
    3628:	88 ec       	ldi	r24, 0xC8	; 200
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9a 8b       	std	Y+18, r25	; 0x12
    362e:	89 8b       	std	Y+17, r24	; 0x11
    3630:	89 89       	ldd	r24, Y+17	; 0x11
    3632:	9a 89       	ldd	r25, Y+18	; 0x12
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <handle_mode_time_set+0x2a8>
    3638:	9a 8b       	std	Y+18, r25	; 0x12
    363a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363c:	8b 89       	ldd	r24, Y+19	; 0x13
    363e:	9c 89       	ldd	r25, Y+20	; 0x14
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	9c 8b       	std	Y+20, r25	; 0x14
    3644:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3646:	8b 89       	ldd	r24, Y+19	; 0x13
    3648:	9c 89       	ldd	r25, Y+20	; 0x14
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	69 f7       	brne	.-38     	; 0x3628 <handle_mode_time_set+0x29c>
    364e:	14 c0       	rjmp	.+40     	; 0x3678 <handle_mode_time_set+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	7e 89       	ldd	r23, Y+22	; 0x16
    3654:	8f 89       	ldd	r24, Y+23	; 0x17
    3656:	98 8d       	ldd	r25, Y+24	; 0x18
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9c 8b       	std	Y+20, r25	; 0x14
    3662:	8b 8b       	std	Y+19, r24	; 0x13
    3664:	8b 89       	ldd	r24, Y+19	; 0x13
    3666:	9c 89       	ldd	r25, Y+20	; 0x14
    3668:	98 8b       	std	Y+16, r25	; 0x10
    366a:	8f 87       	std	Y+15, r24	; 0x0f
    366c:	8f 85       	ldd	r24, Y+15	; 0x0f
    366e:	98 89       	ldd	r25, Y+16	; 0x10
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <handle_mode_time_set+0x2e4>
    3674:	98 8b       	std	Y+16, r25	; 0x10
    3676:	8f 87       	std	Y+15, r24	; 0x0f
        }
        _delay_ms(200);
    }
    
    // Handle STOP button for decrement (since we don't have DEC button)
    if (button_is_pressed(BTN_STOP)) {
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    367e:	88 23       	and	r24, r24
    3680:	09 f4       	brne	.+2      	; 0x3684 <handle_mode_time_set+0x2f8>
    3682:	d1 c0       	rjmp	.+418    	; 0x3826 <handle_mode_time_set+0x49a>
        switch(set_field) {
    3684:	80 91 05 03 	lds	r24, 0x0305
    3688:	28 2f       	mov	r18, r24
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	3c a7       	std	Y+44, r19	; 0x2c
    368e:	2b a7       	std	Y+43, r18	; 0x2b
    3690:	8b a5       	ldd	r24, Y+43	; 0x2b
    3692:	9c a5       	ldd	r25, Y+44	; 0x2c
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	91 05       	cpc	r25, r1
    3698:	69 f1       	breq	.+90     	; 0x36f4 <handle_mode_time_set+0x368>
    369a:	2b a5       	ldd	r18, Y+43	; 0x2b
    369c:	3c a5       	ldd	r19, Y+44	; 0x2c
    369e:	23 30       	cpi	r18, 0x03	; 3
    36a0:	31 05       	cpc	r19, r1
    36a2:	54 f4       	brge	.+20     	; 0x36b8 <handle_mode_time_set+0x32c>
    36a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	b1 f0       	breq	.+44     	; 0x36d8 <handle_mode_time_set+0x34c>
    36ac:	2b a5       	ldd	r18, Y+43	; 0x2b
    36ae:	3c a5       	ldd	r19, Y+44	; 0x2c
    36b0:	21 30       	cpi	r18, 0x01	; 1
    36b2:	31 05       	cpc	r19, r1
    36b4:	c1 f0       	breq	.+48     	; 0x36e6 <handle_mode_time_set+0x35a>
    36b6:	45 c0       	rjmp	.+138    	; 0x3742 <handle_mode_time_set+0x3b6>
    36b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    36bc:	84 30       	cpi	r24, 0x04	; 4
    36be:	91 05       	cpc	r25, r1
    36c0:	79 f1       	breq	.+94     	; 0x3720 <handle_mode_time_set+0x394>
    36c2:	2b a5       	ldd	r18, Y+43	; 0x2b
    36c4:	3c a5       	ldd	r19, Y+44	; 0x2c
    36c6:	24 30       	cpi	r18, 0x04	; 4
    36c8:	31 05       	cpc	r19, r1
    36ca:	dc f0       	brlt	.+54     	; 0x3702 <handle_mode_time_set+0x376>
    36cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    36d0:	85 30       	cpi	r24, 0x05	; 5
    36d2:	91 05       	cpc	r25, r1
    36d4:	61 f1       	breq	.+88     	; 0x372e <handle_mode_time_set+0x3a2>
    36d6:	35 c0       	rjmp	.+106    	; 0x3742 <handle_mode_time_set+0x3b6>
            case 0: // Hour
                time_set_time.hour = decrement_hour(time_set_time.hour);
    36d8:	80 91 d6 02 	lds	r24, 0x02D6
    36dc:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <decrement_hour>
    36e0:	80 93 d6 02 	sts	0x02D6, r24
    36e4:	2e c0       	rjmp	.+92     	; 0x3742 <handle_mode_time_set+0x3b6>
                break;
            case 1: // Minute
                time_set_time.minute = decrement_minute(time_set_time.minute);
    36e6:	80 91 d5 02 	lds	r24, 0x02D5
    36ea:	0e 94 82 33 	call	0x6704	; 0x6704 <decrement_minute>
    36ee:	80 93 d5 02 	sts	0x02D5, r24
    36f2:	27 c0       	rjmp	.+78     	; 0x3742 <handle_mode_time_set+0x3b6>
                break;
            case 2: // Second
                time_set_time.second = decrement_second(time_set_time.second);
    36f4:	80 91 d4 02 	lds	r24, 0x02D4
    36f8:	0e 94 a8 33 	call	0x6750	; 0x6750 <decrement_second>
    36fc:	80 93 d4 02 	sts	0x02D4, r24
    3700:	20 c0       	rjmp	.+64     	; 0x3742 <handle_mode_time_set+0x3b6>
                break;
            case 3: // Day
                time_set_date.day = decrement_day(time_set_date.day, time_set_date.month, time_set_date.year);
    3702:	80 91 d7 02 	lds	r24, 0x02D7
    3706:	90 91 d8 02 	lds	r25, 0x02D8
    370a:	20 91 d9 02 	lds	r18, 0x02D9
    370e:	30 91 da 02 	lds	r19, 0x02DA
    3712:	69 2f       	mov	r22, r25
    3714:	a9 01       	movw	r20, r18
    3716:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <decrement_day>
    371a:	80 93 d7 02 	sts	0x02D7, r24
    371e:	11 c0       	rjmp	.+34     	; 0x3742 <handle_mode_time_set+0x3b6>
                break;
            case 4: // Month
                time_set_date.month = decrement_month(time_set_date.month);
    3720:	80 91 d8 02 	lds	r24, 0x02D8
    3724:	0e 94 13 34 	call	0x6826	; 0x6826 <decrement_month>
    3728:	80 93 d8 02 	sts	0x02D8, r24
    372c:	0a c0       	rjmp	.+20     	; 0x3742 <handle_mode_time_set+0x3b6>
                break;
            case 5: // Year
                time_set_date.year = decrement_year(time_set_date.year);
    372e:	80 91 d9 02 	lds	r24, 0x02D9
    3732:	90 91 da 02 	lds	r25, 0x02DA
    3736:	0e 94 44 34 	call	0x6888	; 0x6888 <decrement_year>
    373a:	90 93 da 02 	sts	0x02DA, r25
    373e:	80 93 d9 02 	sts	0x02D9, r24
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a8 e4       	ldi	r26, 0x48	; 72
    3748:	b3 e4       	ldi	r27, 0x43	; 67
    374a:	8b 87       	std	Y+11, r24	; 0x0b
    374c:	9c 87       	std	Y+12, r25	; 0x0c
    374e:	ad 87       	std	Y+13, r26	; 0x0d
    3750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	6b 85       	ldd	r22, Y+11	; 0x0b
    3754:	7c 85       	ldd	r23, Y+12	; 0x0c
    3756:	8d 85       	ldd	r24, Y+13	; 0x0d
    3758:	9e 85       	ldd	r25, Y+14	; 0x0e
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	4a ef       	ldi	r20, 0xFA	; 250
    3760:	54 e4       	ldi	r21, 0x44	; 68
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8f 83       	std	Y+7, r24	; 0x07
    376c:	98 87       	std	Y+8, r25	; 0x08
    376e:	a9 87       	std	Y+9, r26	; 0x09
    3770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3772:	6f 81       	ldd	r22, Y+7	; 0x07
    3774:	78 85       	ldd	r23, Y+8	; 0x08
    3776:	89 85       	ldd	r24, Y+9	; 0x09
    3778:	9a 85       	ldd	r25, Y+10	; 0x0a
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3786:	88 23       	and	r24, r24
    3788:	2c f4       	brge	.+10     	; 0x3794 <handle_mode_time_set+0x408>
		__ticks = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
    3792:	3f c0       	rjmp	.+126    	; 0x3812 <handle_mode_time_set+0x486>
	else if (__tmp > 65535)
    3794:	6f 81       	ldd	r22, Y+7	; 0x07
    3796:	78 85       	ldd	r23, Y+8	; 0x08
    3798:	89 85       	ldd	r24, Y+9	; 0x09
    379a:	9a 85       	ldd	r25, Y+10	; 0x0a
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	4c f5       	brge	.+82     	; 0x37fe <handle_mode_time_set+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e2       	ldi	r20, 0x20	; 32
    37ba:	51 e4       	ldi	r21, 0x41	; 65
    37bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <handle_mode_time_set+0x468>
    37d6:	88 ec       	ldi	r24, 0xC8	; 200
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	9c 83       	std	Y+4, r25	; 0x04
    37dc:	8b 83       	std	Y+3, r24	; 0x03
    37de:	8b 81       	ldd	r24, Y+3	; 0x03
    37e0:	9c 81       	ldd	r25, Y+4	; 0x04
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <handle_mode_time_set+0x456>
    37e6:	9c 83       	std	Y+4, r25	; 0x04
    37e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	8d 81       	ldd	r24, Y+5	; 0x05
    37f6:	9e 81       	ldd	r25, Y+6	; 0x06
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <handle_mode_time_set+0x44a>
    37fc:	14 c0       	rjmp	.+40     	; 0x3826 <handle_mode_time_set+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3800:	78 85       	ldd	r23, Y+8	; 0x08
    3802:	89 85       	ldd	r24, Y+9	; 0x09
    3804:	9a 85       	ldd	r25, Y+10	; 0x0a
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	8d 83       	std	Y+5, r24	; 0x05
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9e 81       	ldd	r25, Y+6	; 0x06
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	9a 81       	ldd	r25, Y+2	; 0x02
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <handle_mode_time_set+0x492>
    3822:	9a 83       	std	Y+2, r25	; 0x02
    3824:	89 83       	std	Y+1, r24	; 0x01
        }
        _delay_ms(200);
    }
    
    // Update RTC if any changes were made
    rtc_set_time(&time_set_time);
    3826:	84 ed       	ldi	r24, 0xD4	; 212
    3828:	92 e0       	ldi	r25, 0x02	; 2
    382a:	0e 94 d6 30 	call	0x61ac	; 0x61ac <rtc_set_time>
    rtc_set_date(&time_set_date);
    382e:	87 ed       	ldi	r24, 0xD7	; 215
    3830:	92 e0       	ldi	r25, 0x02	; 2
    3832:	0e 94 2b 31 	call	0x6256	; 0x6256 <rtc_set_date>
}
    3836:	ae 96       	adiw	r28, 0x2e	; 46
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <handle_mode_alarm_set>:

void handle_mode_alarm_set(void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	aa 97       	sbiw	r28, 0x2a	; 42
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    static uint8_t alarm_field = 0; // 0=hour, 1=minute
    static time_t alarm_time = {6, 30, 0}; // Default 06:30
    
    // Handle SET button to cycle through fields
    if (button_is_pressed(BTN_SET)) {
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    3862:	88 23       	and	r24, r24
    3864:	09 f4       	brne	.+2      	; 0x3868 <handle_mode_alarm_set+0x20>
    3866:	7e c0       	rjmp	.+252    	; 0x3964 <handle_mode_alarm_set+0x11c>
        alarm_field = (alarm_field + 1) % 2;
    3868:	80 91 06 03 	lds	r24, 0x0306
    386c:	88 2f       	mov	r24, r24
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	01 96       	adiw	r24, 0x01	; 1
    3872:	22 e0       	ldi	r18, 0x02	; 2
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	b9 01       	movw	r22, r18
    3878:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <__divmodhi4>
    387c:	80 93 06 03 	sts	0x0306, r24
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a8 e4       	ldi	r26, 0x48	; 72
    3886:	b3 e4       	ldi	r27, 0x43	; 67
    3888:	8f a3       	std	Y+39, r24	; 0x27
    388a:	98 a7       	std	Y+40, r25	; 0x28
    388c:	a9 a7       	std	Y+41, r26	; 0x29
    388e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	6f a1       	ldd	r22, Y+39	; 0x27
    3892:	78 a5       	ldd	r23, Y+40	; 0x28
    3894:	89 a5       	ldd	r24, Y+41	; 0x29
    3896:	9a a5       	ldd	r25, Y+42	; 0x2a
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	4a ef       	ldi	r20, 0xFA	; 250
    389e:	54 e4       	ldi	r21, 0x44	; 68
    38a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	8b a3       	std	Y+35, r24	; 0x23
    38aa:	9c a3       	std	Y+36, r25	; 0x24
    38ac:	ad a3       	std	Y+37, r26	; 0x25
    38ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38b0:	6b a1       	ldd	r22, Y+35	; 0x23
    38b2:	7c a1       	ldd	r23, Y+36	; 0x24
    38b4:	8d a1       	ldd	r24, Y+37	; 0x25
    38b6:	9e a1       	ldd	r25, Y+38	; 0x26
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e8       	ldi	r20, 0x80	; 128
    38be:	5f e3       	ldi	r21, 0x3F	; 63
    38c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c4:	88 23       	and	r24, r24
    38c6:	2c f4       	brge	.+10     	; 0x38d2 <handle_mode_alarm_set+0x8a>
		__ticks = 1;
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	9a a3       	std	Y+34, r25	; 0x22
    38ce:	89 a3       	std	Y+33, r24	; 0x21
    38d0:	3f c0       	rjmp	.+126    	; 0x3950 <handle_mode_alarm_set+0x108>
	else if (__tmp > 65535)
    38d2:	6b a1       	ldd	r22, Y+35	; 0x23
    38d4:	7c a1       	ldd	r23, Y+36	; 0x24
    38d6:	8d a1       	ldd	r24, Y+37	; 0x25
    38d8:	9e a1       	ldd	r25, Y+38	; 0x26
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	3f ef       	ldi	r19, 0xFF	; 255
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	57 e4       	ldi	r21, 0x47	; 71
    38e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	4c f5       	brge	.+82     	; 0x393c <handle_mode_alarm_set+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ea:	6f a1       	ldd	r22, Y+39	; 0x27
    38ec:	78 a5       	ldd	r23, Y+40	; 0x28
    38ee:	89 a5       	ldd	r24, Y+41	; 0x29
    38f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	40 e2       	ldi	r20, 0x20	; 32
    38f8:	51 e4       	ldi	r21, 0x41	; 65
    38fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	bc 01       	movw	r22, r24
    3904:	cd 01       	movw	r24, r26
    3906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	9a a3       	std	Y+34, r25	; 0x22
    3910:	89 a3       	std	Y+33, r24	; 0x21
    3912:	0f c0       	rjmp	.+30     	; 0x3932 <handle_mode_alarm_set+0xea>
    3914:	88 ec       	ldi	r24, 0xC8	; 200
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	98 a3       	std	Y+32, r25	; 0x20
    391a:	8f 8f       	std	Y+31, r24	; 0x1f
    391c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    391e:	98 a1       	ldd	r25, Y+32	; 0x20
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <handle_mode_alarm_set+0xd8>
    3924:	98 a3       	std	Y+32, r25	; 0x20
    3926:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3928:	89 a1       	ldd	r24, Y+33	; 0x21
    392a:	9a a1       	ldd	r25, Y+34	; 0x22
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	9a a3       	std	Y+34, r25	; 0x22
    3930:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3932:	89 a1       	ldd	r24, Y+33	; 0x21
    3934:	9a a1       	ldd	r25, Y+34	; 0x22
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	69 f7       	brne	.-38     	; 0x3914 <handle_mode_alarm_set+0xcc>
    393a:	14 c0       	rjmp	.+40     	; 0x3964 <handle_mode_alarm_set+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393c:	6b a1       	ldd	r22, Y+35	; 0x23
    393e:	7c a1       	ldd	r23, Y+36	; 0x24
    3940:	8d a1       	ldd	r24, Y+37	; 0x25
    3942:	9e a1       	ldd	r25, Y+38	; 0x26
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9a a3       	std	Y+34, r25	; 0x22
    394e:	89 a3       	std	Y+33, r24	; 0x21
    3950:	89 a1       	ldd	r24, Y+33	; 0x21
    3952:	9a a1       	ldd	r25, Y+34	; 0x22
    3954:	9e 8f       	std	Y+30, r25	; 0x1e
    3956:	8d 8f       	std	Y+29, r24	; 0x1d
    3958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    395a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <handle_mode_alarm_set+0x114>
    3960:	9e 8f       	std	Y+30, r25	; 0x1e
    3962:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(200);
    }
    
    // Handle START button for increment
    if (button_is_pressed(BTN_START)) {
    3964:	82 e0       	ldi	r24, 0x02	; 2
    3966:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    396a:	88 23       	and	r24, r24
    396c:	09 f4       	brne	.+2      	; 0x3970 <handle_mode_alarm_set+0x128>
    396e:	8a c0       	rjmp	.+276    	; 0x3a84 <handle_mode_alarm_set+0x23c>
        if (alarm_field == 0) {
    3970:	80 91 06 03 	lds	r24, 0x0306
    3974:	88 23       	and	r24, r24
    3976:	39 f4       	brne	.+14     	; 0x3986 <handle_mode_alarm_set+0x13e>
            alarm_time.hour = increment_hour(alarm_time.hour);
    3978:	80 91 dd 02 	lds	r24, 0x02DD
    397c:	0e 94 4a 33 	call	0x6694	; 0x6694 <increment_hour>
    3980:	80 93 dd 02 	sts	0x02DD, r24
    3984:	06 c0       	rjmp	.+12     	; 0x3992 <handle_mode_alarm_set+0x14a>
        } else {
            alarm_time.minute = increment_minute(alarm_time.minute);
    3986:	80 91 dc 02 	lds	r24, 0x02DC
    398a:	0e 94 70 33 	call	0x66e0	; 0x66e0 <increment_minute>
    398e:	80 93 dc 02 	sts	0x02DC, r24
        }
        alarm_set(alarm_time.hour, alarm_time.minute);
    3992:	80 91 dd 02 	lds	r24, 0x02DD
    3996:	90 91 dc 02 	lds	r25, 0x02DC
    399a:	69 2f       	mov	r22, r25
    399c:	0e 94 86 07 	call	0xf0c	; 0xf0c <alarm_set>
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	a8 e4       	ldi	r26, 0x48	; 72
    39a6:	b3 e4       	ldi	r27, 0x43	; 67
    39a8:	89 8f       	std	Y+25, r24	; 0x19
    39aa:	9a 8f       	std	Y+26, r25	; 0x1a
    39ac:	ab 8f       	std	Y+27, r26	; 0x1b
    39ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b0:	69 8d       	ldd	r22, Y+25	; 0x19
    39b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	4a ef       	ldi	r20, 0xFA	; 250
    39be:	54 e4       	ldi	r21, 0x44	; 68
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	8d 8b       	std	Y+21, r24	; 0x15
    39ca:	9e 8b       	std	Y+22, r25	; 0x16
    39cc:	af 8b       	std	Y+23, r26	; 0x17
    39ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39d0:	6d 89       	ldd	r22, Y+21	; 0x15
    39d2:	7e 89       	ldd	r23, Y+22	; 0x16
    39d4:	8f 89       	ldd	r24, Y+23	; 0x17
    39d6:	98 8d       	ldd	r25, Y+24	; 0x18
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e8       	ldi	r20, 0x80	; 128
    39de:	5f e3       	ldi	r21, 0x3F	; 63
    39e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e4:	88 23       	and	r24, r24
    39e6:	2c f4       	brge	.+10     	; 0x39f2 <handle_mode_alarm_set+0x1aa>
		__ticks = 1;
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	9c 8b       	std	Y+20, r25	; 0x14
    39ee:	8b 8b       	std	Y+19, r24	; 0x13
    39f0:	3f c0       	rjmp	.+126    	; 0x3a70 <handle_mode_alarm_set+0x228>
	else if (__tmp > 65535)
    39f2:	6d 89       	ldd	r22, Y+21	; 0x15
    39f4:	7e 89       	ldd	r23, Y+22	; 0x16
    39f6:	8f 89       	ldd	r24, Y+23	; 0x17
    39f8:	98 8d       	ldd	r25, Y+24	; 0x18
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	4f e7       	ldi	r20, 0x7F	; 127
    3a00:	57 e4       	ldi	r21, 0x47	; 71
    3a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a06:	18 16       	cp	r1, r24
    3a08:	4c f5       	brge	.+82     	; 0x3a5c <handle_mode_alarm_set+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e2       	ldi	r20, 0x20	; 32
    3a18:	51 e4       	ldi	r21, 0x41	; 65
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	9c 8b       	std	Y+20, r25	; 0x14
    3a30:	8b 8b       	std	Y+19, r24	; 0x13
    3a32:	0f c0       	rjmp	.+30     	; 0x3a52 <handle_mode_alarm_set+0x20a>
    3a34:	88 ec       	ldi	r24, 0xC8	; 200
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	9a 8b       	std	Y+18, r25	; 0x12
    3a3a:	89 8b       	std	Y+17, r24	; 0x11
    3a3c:	89 89       	ldd	r24, Y+17	; 0x11
    3a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <handle_mode_alarm_set+0x1f8>
    3a44:	9a 8b       	std	Y+18, r25	; 0x12
    3a46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	9c 8b       	std	Y+20, r25	; 0x14
    3a50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a52:	8b 89       	ldd	r24, Y+19	; 0x13
    3a54:	9c 89       	ldd	r25, Y+20	; 0x14
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	69 f7       	brne	.-38     	; 0x3a34 <handle_mode_alarm_set+0x1ec>
    3a5a:	14 c0       	rjmp	.+40     	; 0x3a84 <handle_mode_alarm_set+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a60:	8f 89       	ldd	r24, Y+23	; 0x17
    3a62:	98 8d       	ldd	r25, Y+24	; 0x18
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	9c 8b       	std	Y+20, r25	; 0x14
    3a6e:	8b 8b       	std	Y+19, r24	; 0x13
    3a70:	8b 89       	ldd	r24, Y+19	; 0x13
    3a72:	9c 89       	ldd	r25, Y+20	; 0x14
    3a74:	98 8b       	std	Y+16, r25	; 0x10
    3a76:	8f 87       	std	Y+15, r24	; 0x0f
    3a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a7a:	98 89       	ldd	r25, Y+16	; 0x10
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <handle_mode_alarm_set+0x234>
    3a80:	98 8b       	std	Y+16, r25	; 0x10
    3a82:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(200);
    }
    
    // Handle STOP button for decrement
    if (button_is_pressed(BTN_STOP)) {
    3a84:	83 e0       	ldi	r24, 0x03	; 3
    3a86:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    3a8a:	88 23       	and	r24, r24
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <handle_mode_alarm_set+0x248>
    3a8e:	8a c0       	rjmp	.+276    	; 0x3ba4 <handle_mode_alarm_set+0x35c>
        if (alarm_field == 0) {
    3a90:	80 91 06 03 	lds	r24, 0x0306
    3a94:	88 23       	and	r24, r24
    3a96:	39 f4       	brne	.+14     	; 0x3aa6 <handle_mode_alarm_set+0x25e>
            alarm_time.hour = decrement_hour(alarm_time.hour);
    3a98:	80 91 dd 02 	lds	r24, 0x02DD
    3a9c:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <decrement_hour>
    3aa0:	80 93 dd 02 	sts	0x02DD, r24
    3aa4:	06 c0       	rjmp	.+12     	; 0x3ab2 <handle_mode_alarm_set+0x26a>
        } else {
            alarm_time.minute = decrement_minute(alarm_time.minute);
    3aa6:	80 91 dc 02 	lds	r24, 0x02DC
    3aaa:	0e 94 82 33 	call	0x6704	; 0x6704 <decrement_minute>
    3aae:	80 93 dc 02 	sts	0x02DC, r24
        }
        alarm_set(alarm_time.hour, alarm_time.minute);
    3ab2:	80 91 dd 02 	lds	r24, 0x02DD
    3ab6:	90 91 dc 02 	lds	r25, 0x02DC
    3aba:	69 2f       	mov	r22, r25
    3abc:	0e 94 86 07 	call	0xf0c	; 0xf0c <alarm_set>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	a8 e4       	ldi	r26, 0x48	; 72
    3ac6:	b3 e4       	ldi	r27, 0x43	; 67
    3ac8:	8b 87       	std	Y+11, r24	; 0x0b
    3aca:	9c 87       	std	Y+12, r25	; 0x0c
    3acc:	ad 87       	std	Y+13, r26	; 0x0d
    3ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a ef       	ldi	r20, 0xFA	; 250
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8f 83       	std	Y+7, r24	; 0x07
    3aea:	98 87       	std	Y+8, r25	; 0x08
    3aec:	a9 87       	std	Y+9, r26	; 0x09
    3aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af0:	6f 81       	ldd	r22, Y+7	; 0x07
    3af2:	78 85       	ldd	r23, Y+8	; 0x08
    3af4:	89 85       	ldd	r24, Y+9	; 0x09
    3af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	2c f4       	brge	.+10     	; 0x3b12 <handle_mode_alarm_set+0x2ca>
		__ticks = 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
    3b10:	3f c0       	rjmp	.+126    	; 0x3b90 <handle_mode_alarm_set+0x348>
	else if (__tmp > 65535)
    3b12:	6f 81       	ldd	r22, Y+7	; 0x07
    3b14:	78 85       	ldd	r23, Y+8	; 0x08
    3b16:	89 85       	ldd	r24, Y+9	; 0x09
    3b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	3f ef       	ldi	r19, 0xFF	; 255
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	57 e4       	ldi	r21, 0x47	; 71
    3b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	4c f5       	brge	.+82     	; 0x3b7c <handle_mode_alarm_set+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e2       	ldi	r20, 0x20	; 32
    3b38:	51 e4       	ldi	r21, 0x41	; 65
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	0f c0       	rjmp	.+30     	; 0x3b72 <handle_mode_alarm_set+0x32a>
    3b54:	88 ec       	ldi	r24, 0xC8	; 200
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <handle_mode_alarm_set+0x318>
    3b64:	9c 83       	std	Y+4, r25	; 0x04
    3b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b68:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	69 f7       	brne	.-38     	; 0x3b54 <handle_mode_alarm_set+0x30c>
    3b7a:	14 c0       	rjmp	.+40     	; 0x3ba4 <handle_mode_alarm_set+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7e:	78 85       	ldd	r23, Y+8	; 0x08
    3b80:	89 85       	ldd	r24, Y+9	; 0x09
    3b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e 83       	std	Y+6, r25	; 0x06
    3b8e:	8d 83       	std	Y+5, r24	; 0x05
    3b90:	8d 81       	ldd	r24, Y+5	; 0x05
    3b92:	9e 81       	ldd	r25, Y+6	; 0x06
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <handle_mode_alarm_set+0x354>
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);
    }
}
    3ba4:	aa 96       	adiw	r28, 0x2a	; 42
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <handle_mode_stopwatch>:

void handle_mode_stopwatch(void)
{
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	6c 97       	sbiw	r28, 0x1c	; 28
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    // Handle START button for start/stop
    if (button_is_pressed(BTN_START)) {
    3bca:	82 e0       	ldi	r24, 0x02	; 2
    3bcc:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    3bd0:	88 23       	and	r24, r24
    3bd2:	09 f4       	brne	.+2      	; 0x3bd6 <handle_mode_stopwatch+0x20>
    3bd4:	7b c0       	rjmp	.+246    	; 0x3ccc <handle_mode_stopwatch+0x116>
        if (stopwatch_is_running()) {
    3bd6:	0e 94 3a 32 	call	0x6474	; 0x6474 <stopwatch_is_running>
    3bda:	88 23       	and	r24, r24
    3bdc:	19 f0       	breq	.+6      	; 0x3be4 <handle_mode_stopwatch+0x2e>
            stopwatch_stop();
    3bde:	0e 94 11 32 	call	0x6422	; 0x6422 <stopwatch_stop>
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <handle_mode_stopwatch+0x32>
        } else {
            stopwatch_start();
    3be4:	0e 94 03 32 	call	0x6406	; 0x6406 <stopwatch_start>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	a8 e4       	ldi	r26, 0x48	; 72
    3bee:	b3 e4       	ldi	r27, 0x43	; 67
    3bf0:	89 8f       	std	Y+25, r24	; 0x19
    3bf2:	9a 8f       	std	Y+26, r25	; 0x1a
    3bf4:	ab 8f       	std	Y+27, r26	; 0x1b
    3bf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    3bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	4a ef       	ldi	r20, 0xFA	; 250
    3c06:	54 e4       	ldi	r21, 0x44	; 68
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	8d 8b       	std	Y+21, r24	; 0x15
    3c12:	9e 8b       	std	Y+22, r25	; 0x16
    3c14:	af 8b       	std	Y+23, r26	; 0x17
    3c16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c18:	6d 89       	ldd	r22, Y+21	; 0x15
    3c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e8       	ldi	r20, 0x80	; 128
    3c26:	5f e3       	ldi	r21, 0x3F	; 63
    3c28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c2c:	88 23       	and	r24, r24
    3c2e:	2c f4       	brge	.+10     	; 0x3c3a <handle_mode_stopwatch+0x84>
		__ticks = 1;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	9c 8b       	std	Y+20, r25	; 0x14
    3c36:	8b 8b       	std	Y+19, r24	; 0x13
    3c38:	3f c0       	rjmp	.+126    	; 0x3cb8 <handle_mode_stopwatch+0x102>
	else if (__tmp > 65535)
    3c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c40:	98 8d       	ldd	r25, Y+24	; 0x18
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	3f ef       	ldi	r19, 0xFF	; 255
    3c46:	4f e7       	ldi	r20, 0x7F	; 127
    3c48:	57 e4       	ldi	r21, 0x47	; 71
    3c4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4e:	18 16       	cp	r1, r24
    3c50:	4c f5       	brge	.+82     	; 0x3ca4 <handle_mode_stopwatch+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c52:	69 8d       	ldd	r22, Y+25	; 0x19
    3c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e2       	ldi	r20, 0x20	; 32
    3c60:	51 e4       	ldi	r21, 0x41	; 65
    3c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9c 8b       	std	Y+20, r25	; 0x14
    3c78:	8b 8b       	std	Y+19, r24	; 0x13
    3c7a:	0f c0       	rjmp	.+30     	; 0x3c9a <handle_mode_stopwatch+0xe4>
    3c7c:	88 ec       	ldi	r24, 0xC8	; 200
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	9a 8b       	std	Y+18, r25	; 0x12
    3c82:	89 8b       	std	Y+17, r24	; 0x11
    3c84:	89 89       	ldd	r24, Y+17	; 0x11
    3c86:	9a 89       	ldd	r25, Y+18	; 0x12
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <handle_mode_stopwatch+0xd2>
    3c8c:	9a 8b       	std	Y+18, r25	; 0x12
    3c8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c90:	8b 89       	ldd	r24, Y+19	; 0x13
    3c92:	9c 89       	ldd	r25, Y+20	; 0x14
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	9c 8b       	std	Y+20, r25	; 0x14
    3c98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	69 f7       	brne	.-38     	; 0x3c7c <handle_mode_stopwatch+0xc6>
    3ca2:	14 c0       	rjmp	.+40     	; 0x3ccc <handle_mode_stopwatch+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    3caa:	98 8d       	ldd	r25, Y+24	; 0x18
    3cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	9c 8b       	std	Y+20, r25	; 0x14
    3cb6:	8b 8b       	std	Y+19, r24	; 0x13
    3cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3cba:	9c 89       	ldd	r25, Y+20	; 0x14
    3cbc:	98 8b       	std	Y+16, r25	; 0x10
    3cbe:	8f 87       	std	Y+15, r24	; 0x0f
    3cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc2:	98 89       	ldd	r25, Y+16	; 0x10
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <handle_mode_stopwatch+0x10e>
    3cc8:	98 8b       	std	Y+16, r25	; 0x10
    3cca:	8f 87       	std	Y+15, r24	; 0x0f
        }
        _delay_ms(200);
    }
    
    // Handle STOP button for reset
    if (button_is_pressed(BTN_STOP)) {
    3ccc:	83 e0       	ldi	r24, 0x03	; 3
    3cce:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    3cd2:	88 23       	and	r24, r24
    3cd4:	09 f4       	brne	.+2      	; 0x3cd8 <handle_mode_stopwatch+0x122>
    3cd6:	74 c0       	rjmp	.+232    	; 0x3dc0 <handle_mode_stopwatch+0x20a>
        stopwatch_reset();
    3cd8:	0e 94 1e 32 	call	0x643c	; 0x643c <stopwatch_reset>
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	a8 e4       	ldi	r26, 0x48	; 72
    3ce2:	b3 e4       	ldi	r27, 0x43	; 67
    3ce4:	8b 87       	std	Y+11, r24	; 0x0b
    3ce6:	9c 87       	std	Y+12, r25	; 0x0c
    3ce8:	ad 87       	std	Y+13, r26	; 0x0d
    3cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	4a ef       	ldi	r20, 0xFA	; 250
    3cfa:	54 e4       	ldi	r21, 0x44	; 68
    3cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	8f 83       	std	Y+7, r24	; 0x07
    3d06:	98 87       	std	Y+8, r25	; 0x08
    3d08:	a9 87       	std	Y+9, r26	; 0x09
    3d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0e:	78 85       	ldd	r23, Y+8	; 0x08
    3d10:	89 85       	ldd	r24, Y+9	; 0x09
    3d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e8       	ldi	r20, 0x80	; 128
    3d1a:	5f e3       	ldi	r21, 0x3F	; 63
    3d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d20:	88 23       	and	r24, r24
    3d22:	2c f4       	brge	.+10     	; 0x3d2e <handle_mode_stopwatch+0x178>
		__ticks = 1;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	9e 83       	std	Y+6, r25	; 0x06
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
    3d2c:	3f c0       	rjmp	.+126    	; 0x3dac <handle_mode_stopwatch+0x1f6>
	else if (__tmp > 65535)
    3d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d30:	78 85       	ldd	r23, Y+8	; 0x08
    3d32:	89 85       	ldd	r24, Y+9	; 0x09
    3d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	3f ef       	ldi	r19, 0xFF	; 255
    3d3a:	4f e7       	ldi	r20, 0x7F	; 127
    3d3c:	57 e4       	ldi	r21, 0x47	; 71
    3d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d42:	18 16       	cp	r1, r24
    3d44:	4c f5       	brge	.+82     	; 0x3d98 <handle_mode_stopwatch+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e2       	ldi	r20, 0x20	; 32
    3d54:	51 e4       	ldi	r21, 0x41	; 65
    3d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	bc 01       	movw	r22, r24
    3d60:	cd 01       	movw	r24, r26
    3d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	9e 83       	std	Y+6, r25	; 0x06
    3d6c:	8d 83       	std	Y+5, r24	; 0x05
    3d6e:	0f c0       	rjmp	.+30     	; 0x3d8e <handle_mode_stopwatch+0x1d8>
    3d70:	88 ec       	ldi	r24, 0xC8	; 200
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	9c 83       	std	Y+4, r25	; 0x04
    3d76:	8b 83       	std	Y+3, r24	; 0x03
    3d78:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	f1 f7       	brne	.-4      	; 0x3d7c <handle_mode_stopwatch+0x1c6>
    3d80:	9c 83       	std	Y+4, r25	; 0x04
    3d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	9e 83       	std	Y+6, r25	; 0x06
    3d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d90:	9e 81       	ldd	r25, Y+6	; 0x06
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	69 f7       	brne	.-38     	; 0x3d70 <handle_mode_stopwatch+0x1ba>
    3d96:	14 c0       	rjmp	.+40     	; 0x3dc0 <handle_mode_stopwatch+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d98:	6f 81       	ldd	r22, Y+7	; 0x07
    3d9a:	78 85       	ldd	r23, Y+8	; 0x08
    3d9c:	89 85       	ldd	r24, Y+9	; 0x09
    3d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9e 83       	std	Y+6, r25	; 0x06
    3daa:	8d 83       	std	Y+5, r24	; 0x05
    3dac:	8d 81       	ldd	r24, Y+5	; 0x05
    3dae:	9e 81       	ldd	r25, Y+6	; 0x06
    3db0:	9a 83       	std	Y+2, r25	; 0x02
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	9a 81       	ldd	r25, Y+2	; 0x02
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	f1 f7       	brne	.-4      	; 0x3db8 <handle_mode_stopwatch+0x202>
    3dbc:	9a 83       	std	Y+2, r25	; 0x02
    3dbe:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);
    }
    
    // Update stopwatch every second
    if (seconds_tick) {
    3dc0:	80 91 03 03 	lds	r24, 0x0303
    3dc4:	88 23       	and	r24, r24
    3dc6:	11 f0       	breq	.+4      	; 0x3dcc <handle_mode_stopwatch+0x216>
        stopwatch_update();
    3dc8:	0e 94 2d 32 	call	0x645a	; 0x645a <stopwatch_update>
    }
}
    3dcc:	6c 96       	adiw	r28, 0x1c	; 28
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	de bf       	out	0x3e, r29	; 62
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	cd bf       	out	0x3d, r28	; 61
    3dd8:	cf 91       	pop	r28
    3dda:	df 91       	pop	r29
    3ddc:	08 95       	ret

00003dde <handle_mode_countdown>:

void handle_mode_countdown(void)
{
    3dde:	df 93       	push	r29
    3de0:	cf 93       	push	r28
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	aa 97       	sbiw	r28, 0x2a	; 42
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	f8 94       	cli
    3dec:	de bf       	out	0x3e, r29	; 62
    3dee:	0f be       	out	0x3f, r0	; 63
    3df0:	cd bf       	out	0x3d, r28	; 61
    static uint8_t countdown_field = 0; // 0=minute, 1=second
    static uint16_t countdown_time = 120; // Default 2 minutes
    
    // Handle SET button to cycle through fields
    if (button_is_pressed(BTN_SET)) {
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    3df8:	88 23       	and	r24, r24
    3dfa:	09 f4       	brne	.+2      	; 0x3dfe <handle_mode_countdown+0x20>
    3dfc:	7e c0       	rjmp	.+252    	; 0x3efa <handle_mode_countdown+0x11c>
        countdown_field = (countdown_field + 1) % 2;
    3dfe:	80 91 07 03 	lds	r24, 0x0307
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	22 e0       	ldi	r18, 0x02	; 2
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	b9 01       	movw	r22, r18
    3e0e:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <__divmodhi4>
    3e12:	80 93 07 03 	sts	0x0307, r24
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	a8 e4       	ldi	r26, 0x48	; 72
    3e1c:	b3 e4       	ldi	r27, 0x43	; 67
    3e1e:	8f a3       	std	Y+39, r24	; 0x27
    3e20:	98 a7       	std	Y+40, r25	; 0x28
    3e22:	a9 a7       	std	Y+41, r26	; 0x29
    3e24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e26:	6f a1       	ldd	r22, Y+39	; 0x27
    3e28:	78 a5       	ldd	r23, Y+40	; 0x28
    3e2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	4a ef       	ldi	r20, 0xFA	; 250
    3e34:	54 e4       	ldi	r21, 0x44	; 68
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	8b a3       	std	Y+35, r24	; 0x23
    3e40:	9c a3       	std	Y+36, r25	; 0x24
    3e42:	ad a3       	std	Y+37, r26	; 0x25
    3e44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e46:	6b a1       	ldd	r22, Y+35	; 0x23
    3e48:	7c a1       	ldd	r23, Y+36	; 0x24
    3e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e8       	ldi	r20, 0x80	; 128
    3e54:	5f e3       	ldi	r21, 0x3F	; 63
    3e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e5a:	88 23       	and	r24, r24
    3e5c:	2c f4       	brge	.+10     	; 0x3e68 <handle_mode_countdown+0x8a>
		__ticks = 1;
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	9a a3       	std	Y+34, r25	; 0x22
    3e64:	89 a3       	std	Y+33, r24	; 0x21
    3e66:	3f c0       	rjmp	.+126    	; 0x3ee6 <handle_mode_countdown+0x108>
	else if (__tmp > 65535)
    3e68:	6b a1       	ldd	r22, Y+35	; 0x23
    3e6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	3f ef       	ldi	r19, 0xFF	; 255
    3e74:	4f e7       	ldi	r20, 0x7F	; 127
    3e76:	57 e4       	ldi	r21, 0x47	; 71
    3e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e7c:	18 16       	cp	r1, r24
    3e7e:	4c f5       	brge	.+82     	; 0x3ed2 <handle_mode_countdown+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e80:	6f a1       	ldd	r22, Y+39	; 0x27
    3e82:	78 a5       	ldd	r23, Y+40	; 0x28
    3e84:	89 a5       	ldd	r24, Y+41	; 0x29
    3e86:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	bc 01       	movw	r22, r24
    3e9a:	cd 01       	movw	r24, r26
    3e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	9a a3       	std	Y+34, r25	; 0x22
    3ea6:	89 a3       	std	Y+33, r24	; 0x21
    3ea8:	0f c0       	rjmp	.+30     	; 0x3ec8 <handle_mode_countdown+0xea>
    3eaa:	88 ec       	ldi	r24, 0xC8	; 200
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	98 a3       	std	Y+32, r25	; 0x20
    3eb0:	8f 8f       	std	Y+31, r24	; 0x1f
    3eb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eb4:	98 a1       	ldd	r25, Y+32	; 0x20
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <handle_mode_countdown+0xd8>
    3eba:	98 a3       	std	Y+32, r25	; 0x20
    3ebc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebe:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	9a a3       	std	Y+34, r25	; 0x22
    3ec6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eca:	9a a1       	ldd	r25, Y+34	; 0x22
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	69 f7       	brne	.-38     	; 0x3eaa <handle_mode_countdown+0xcc>
    3ed0:	14 c0       	rjmp	.+40     	; 0x3efa <handle_mode_countdown+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	9a a3       	std	Y+34, r25	; 0x22
    3ee4:	89 a3       	std	Y+33, r24	; 0x21
    3ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    3eea:	9e 8f       	std	Y+30, r25	; 0x1e
    3eec:	8d 8f       	std	Y+29, r24	; 0x1d
    3eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ef0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <handle_mode_countdown+0x114>
    3ef6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ef8:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(200);
    }
    
    // Handle START button for start/stop
    if (button_is_pressed(BTN_START)) {
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    3f00:	88 23       	and	r24, r24
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <handle_mode_countdown+0x128>
    3f04:	7b c0       	rjmp	.+246    	; 0x3ffc <handle_mode_countdown+0x21e>
        if (countdown_is_running()) {
    3f06:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <countdown_is_running>
    3f0a:	88 23       	and	r24, r24
    3f0c:	19 f0       	breq	.+6      	; 0x3f14 <handle_mode_countdown+0x136>
            countdown_stop();
    3f0e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <countdown_stop>
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <handle_mode_countdown+0x13a>
        } else {
            countdown_start();
    3f14:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <countdown_start>
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	a8 e4       	ldi	r26, 0x48	; 72
    3f1e:	b3 e4       	ldi	r27, 0x43	; 67
    3f20:	89 8f       	std	Y+25, r24	; 0x19
    3f22:	9a 8f       	std	Y+26, r25	; 0x1a
    3f24:	ab 8f       	std	Y+27, r26	; 0x1b
    3f26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f28:	69 8d       	ldd	r22, Y+25	; 0x19
    3f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	4a ef       	ldi	r20, 0xFA	; 250
    3f36:	54 e4       	ldi	r21, 0x44	; 68
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	8d 8b       	std	Y+21, r24	; 0x15
    3f42:	9e 8b       	std	Y+22, r25	; 0x16
    3f44:	af 8b       	std	Y+23, r26	; 0x17
    3f46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f48:	6d 89       	ldd	r22, Y+21	; 0x15
    3f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e8       	ldi	r20, 0x80	; 128
    3f56:	5f e3       	ldi	r21, 0x3F	; 63
    3f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f5c:	88 23       	and	r24, r24
    3f5e:	2c f4       	brge	.+10     	; 0x3f6a <handle_mode_countdown+0x18c>
		__ticks = 1;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	9c 8b       	std	Y+20, r25	; 0x14
    3f66:	8b 8b       	std	Y+19, r24	; 0x13
    3f68:	3f c0       	rjmp	.+126    	; 0x3fe8 <handle_mode_countdown+0x20a>
	else if (__tmp > 65535)
    3f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f70:	98 8d       	ldd	r25, Y+24	; 0x18
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	3f ef       	ldi	r19, 0xFF	; 255
    3f76:	4f e7       	ldi	r20, 0x7F	; 127
    3f78:	57 e4       	ldi	r21, 0x47	; 71
    3f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f7e:	18 16       	cp	r1, r24
    3f80:	4c f5       	brge	.+82     	; 0x3fd4 <handle_mode_countdown+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f82:	69 8d       	ldd	r22, Y+25	; 0x19
    3f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	40 e2       	ldi	r20, 0x20	; 32
    3f90:	51 e4       	ldi	r21, 0x41	; 65
    3f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	bc 01       	movw	r22, r24
    3f9c:	cd 01       	movw	r24, r26
    3f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	9c 8b       	std	Y+20, r25	; 0x14
    3fa8:	8b 8b       	std	Y+19, r24	; 0x13
    3faa:	0f c0       	rjmp	.+30     	; 0x3fca <handle_mode_countdown+0x1ec>
    3fac:	88 ec       	ldi	r24, 0xC8	; 200
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	9a 8b       	std	Y+18, r25	; 0x12
    3fb2:	89 8b       	std	Y+17, r24	; 0x11
    3fb4:	89 89       	ldd	r24, Y+17	; 0x11
    3fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <handle_mode_countdown+0x1da>
    3fbc:	9a 8b       	std	Y+18, r25	; 0x12
    3fbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	9c 8b       	std	Y+20, r25	; 0x14
    3fc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fca:	8b 89       	ldd	r24, Y+19	; 0x13
    3fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3fce:	00 97       	sbiw	r24, 0x00	; 0
    3fd0:	69 f7       	brne	.-38     	; 0x3fac <handle_mode_countdown+0x1ce>
    3fd2:	14 c0       	rjmp	.+40     	; 0x3ffc <handle_mode_countdown+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fda:	98 8d       	ldd	r25, Y+24	; 0x18
    3fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	9c 8b       	std	Y+20, r25	; 0x14
    3fe6:	8b 8b       	std	Y+19, r24	; 0x13
    3fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fea:	9c 89       	ldd	r25, Y+20	; 0x14
    3fec:	98 8b       	std	Y+16, r25	; 0x10
    3fee:	8f 87       	std	Y+15, r24	; 0x0f
    3ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ff2:	98 89       	ldd	r25, Y+16	; 0x10
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <handle_mode_countdown+0x216>
    3ff8:	98 8b       	std	Y+16, r25	; 0x10
    3ffa:	8f 87       	std	Y+15, r24	; 0x0f
        }
        _delay_ms(200);
    }
    
    // Handle STOP button for increment/decrement based on field
    if (button_is_pressed(BTN_STOP)) {
    3ffc:	83 e0       	ldi	r24, 0x03	; 3
    3ffe:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    4002:	88 23       	and	r24, r24
    4004:	09 f4       	brne	.+2      	; 0x4008 <handle_mode_countdown+0x22a>
    4006:	8f c0       	rjmp	.+286    	; 0x4126 <handle_mode_countdown+0x348>
        if (countdown_field == 0) {
    4008:	80 91 07 03 	lds	r24, 0x0307
    400c:	88 23       	and	r24, r24
    400e:	51 f4       	brne	.+20     	; 0x4024 <handle_mode_countdown+0x246>
            // Minute field - increment
            countdown_time += 60;
    4010:	80 91 de 02 	lds	r24, 0x02DE
    4014:	90 91 df 02 	lds	r25, 0x02DF
    4018:	cc 96       	adiw	r24, 0x3c	; 60
    401a:	90 93 df 02 	sts	0x02DF, r25
    401e:	80 93 de 02 	sts	0x02DE, r24
    4022:	09 c0       	rjmp	.+18     	; 0x4036 <handle_mode_countdown+0x258>
        } else {
            // Second field - increment
            countdown_time += 1;
    4024:	80 91 de 02 	lds	r24, 0x02DE
    4028:	90 91 df 02 	lds	r25, 0x02DF
    402c:	01 96       	adiw	r24, 0x01	; 1
    402e:	90 93 df 02 	sts	0x02DF, r25
    4032:	80 93 de 02 	sts	0x02DE, r24
        }
        countdown_set(countdown_time);
    4036:	80 91 de 02 	lds	r24, 0x02DE
    403a:	90 91 df 02 	lds	r25, 0x02DF
    403e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <countdown_set>
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	a8 e4       	ldi	r26, 0x48	; 72
    4048:	b3 e4       	ldi	r27, 0x43	; 67
    404a:	8b 87       	std	Y+11, r24	; 0x0b
    404c:	9c 87       	std	Y+12, r25	; 0x0c
    404e:	ad 87       	std	Y+13, r26	; 0x0d
    4050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4052:	6b 85       	ldd	r22, Y+11	; 0x0b
    4054:	7c 85       	ldd	r23, Y+12	; 0x0c
    4056:	8d 85       	ldd	r24, Y+13	; 0x0d
    4058:	9e 85       	ldd	r25, Y+14	; 0x0e
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	4a ef       	ldi	r20, 0xFA	; 250
    4060:	54 e4       	ldi	r21, 0x44	; 68
    4062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	8f 83       	std	Y+7, r24	; 0x07
    406c:	98 87       	std	Y+8, r25	; 0x08
    406e:	a9 87       	std	Y+9, r26	; 0x09
    4070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4072:	6f 81       	ldd	r22, Y+7	; 0x07
    4074:	78 85       	ldd	r23, Y+8	; 0x08
    4076:	89 85       	ldd	r24, Y+9	; 0x09
    4078:	9a 85       	ldd	r25, Y+10	; 0x0a
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	40 e8       	ldi	r20, 0x80	; 128
    4080:	5f e3       	ldi	r21, 0x3F	; 63
    4082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4086:	88 23       	and	r24, r24
    4088:	2c f4       	brge	.+10     	; 0x4094 <handle_mode_countdown+0x2b6>
		__ticks = 1;
    408a:	81 e0       	ldi	r24, 0x01	; 1
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	9e 83       	std	Y+6, r25	; 0x06
    4090:	8d 83       	std	Y+5, r24	; 0x05
    4092:	3f c0       	rjmp	.+126    	; 0x4112 <handle_mode_countdown+0x334>
	else if (__tmp > 65535)
    4094:	6f 81       	ldd	r22, Y+7	; 0x07
    4096:	78 85       	ldd	r23, Y+8	; 0x08
    4098:	89 85       	ldd	r24, Y+9	; 0x09
    409a:	9a 85       	ldd	r25, Y+10	; 0x0a
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	3f ef       	ldi	r19, 0xFF	; 255
    40a0:	4f e7       	ldi	r20, 0x7F	; 127
    40a2:	57 e4       	ldi	r21, 0x47	; 71
    40a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a8:	18 16       	cp	r1, r24
    40aa:	4c f5       	brge	.+82     	; 0x40fe <handle_mode_countdown+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    40b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e2       	ldi	r20, 0x20	; 32
    40ba:	51 e4       	ldi	r21, 0x41	; 65
    40bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	9e 83       	std	Y+6, r25	; 0x06
    40d2:	8d 83       	std	Y+5, r24	; 0x05
    40d4:	0f c0       	rjmp	.+30     	; 0x40f4 <handle_mode_countdown+0x316>
    40d6:	88 ec       	ldi	r24, 0xC8	; 200
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	9c 83       	std	Y+4, r25	; 0x04
    40dc:	8b 83       	std	Y+3, r24	; 0x03
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	9c 81       	ldd	r25, Y+4	; 0x04
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <handle_mode_countdown+0x304>
    40e6:	9c 83       	std	Y+4, r25	; 0x04
    40e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ea:	8d 81       	ldd	r24, Y+5	; 0x05
    40ec:	9e 81       	ldd	r25, Y+6	; 0x06
    40ee:	01 97       	sbiw	r24, 0x01	; 1
    40f0:	9e 83       	std	Y+6, r25	; 0x06
    40f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f4:	8d 81       	ldd	r24, Y+5	; 0x05
    40f6:	9e 81       	ldd	r25, Y+6	; 0x06
    40f8:	00 97       	sbiw	r24, 0x00	; 0
    40fa:	69 f7       	brne	.-38     	; 0x40d6 <handle_mode_countdown+0x2f8>
    40fc:	14 c0       	rjmp	.+40     	; 0x4126 <handle_mode_countdown+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4100:	78 85       	ldd	r23, Y+8	; 0x08
    4102:	89 85       	ldd	r24, Y+9	; 0x09
    4104:	9a 85       	ldd	r25, Y+10	; 0x0a
    4106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	9e 83       	std	Y+6, r25	; 0x06
    4110:	8d 83       	std	Y+5, r24	; 0x05
    4112:	8d 81       	ldd	r24, Y+5	; 0x05
    4114:	9e 81       	ldd	r25, Y+6	; 0x06
    4116:	9a 83       	std	Y+2, r25	; 0x02
    4118:	89 83       	std	Y+1, r24	; 0x01
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	9a 81       	ldd	r25, Y+2	; 0x02
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	f1 f7       	brne	.-4      	; 0x411e <handle_mode_countdown+0x340>
    4122:	9a 83       	std	Y+2, r25	; 0x02
    4124:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);
    }
    
    // Update countdown every second
    if (seconds_tick) {
    4126:	80 91 03 03 	lds	r24, 0x0303
    412a:	88 23       	and	r24, r24
    412c:	11 f0       	breq	.+4      	; 0x4132 <handle_mode_countdown+0x354>
        countdown_update();
    412e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <countdown_update>
    }
}
    4132:	aa 96       	adiw	r28, 0x2a	; 42
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
    413e:	cf 91       	pop	r28
    4140:	df 91       	pop	r29
    4142:	08 95       	ret

00004144 <handle_mode_setup>:

void handle_mode_setup(void)
{
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	ae 97       	sbiw	r28, 0x2e	; 46
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	f8 94       	cli
    4152:	de bf       	out	0x3e, r29	; 62
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	cd bf       	out	0x3d, r28	; 61
    static uint8_t setup_field = 0; // 0=hour, 1=minute, 2=second, 3=day, 4=month, 5=year
    
    // Handle SET button to cycle through fields
    if (button_is_pressed(BTN_SET)) {
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    415e:	88 23       	and	r24, r24
    4160:	09 f4       	brne	.+2      	; 0x4164 <handle_mode_setup+0x20>
    4162:	7e c0       	rjmp	.+252    	; 0x4260 <handle_mode_setup+0x11c>
        setup_field = (setup_field + 1) % 6;
    4164:	80 91 08 03 	lds	r24, 0x0308
    4168:	88 2f       	mov	r24, r24
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	26 e0       	ldi	r18, 0x06	; 6
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	b9 01       	movw	r22, r18
    4174:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <__divmodhi4>
    4178:	80 93 08 03 	sts	0x0308, r24
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	a8 e4       	ldi	r26, 0x48	; 72
    4182:	b3 e4       	ldi	r27, 0x43	; 67
    4184:	8f a3       	std	Y+39, r24	; 0x27
    4186:	98 a7       	std	Y+40, r25	; 0x28
    4188:	a9 a7       	std	Y+41, r26	; 0x29
    418a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    418c:	6f a1       	ldd	r22, Y+39	; 0x27
    418e:	78 a5       	ldd	r23, Y+40	; 0x28
    4190:	89 a5       	ldd	r24, Y+41	; 0x29
    4192:	9a a5       	ldd	r25, Y+42	; 0x2a
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	4a ef       	ldi	r20, 0xFA	; 250
    419a:	54 e4       	ldi	r21, 0x44	; 68
    419c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	8b a3       	std	Y+35, r24	; 0x23
    41a6:	9c a3       	std	Y+36, r25	; 0x24
    41a8:	ad a3       	std	Y+37, r26	; 0x25
    41aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41ac:	6b a1       	ldd	r22, Y+35	; 0x23
    41ae:	7c a1       	ldd	r23, Y+36	; 0x24
    41b0:	8d a1       	ldd	r24, Y+37	; 0x25
    41b2:	9e a1       	ldd	r25, Y+38	; 0x26
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e8       	ldi	r20, 0x80	; 128
    41ba:	5f e3       	ldi	r21, 0x3F	; 63
    41bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c0:	88 23       	and	r24, r24
    41c2:	2c f4       	brge	.+10     	; 0x41ce <handle_mode_setup+0x8a>
		__ticks = 1;
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	9a a3       	std	Y+34, r25	; 0x22
    41ca:	89 a3       	std	Y+33, r24	; 0x21
    41cc:	3f c0       	rjmp	.+126    	; 0x424c <handle_mode_setup+0x108>
	else if (__tmp > 65535)
    41ce:	6b a1       	ldd	r22, Y+35	; 0x23
    41d0:	7c a1       	ldd	r23, Y+36	; 0x24
    41d2:	8d a1       	ldd	r24, Y+37	; 0x25
    41d4:	9e a1       	ldd	r25, Y+38	; 0x26
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	3f ef       	ldi	r19, 0xFF	; 255
    41da:	4f e7       	ldi	r20, 0x7F	; 127
    41dc:	57 e4       	ldi	r21, 0x47	; 71
    41de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e2:	18 16       	cp	r1, r24
    41e4:	4c f5       	brge	.+82     	; 0x4238 <handle_mode_setup+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41e6:	6f a1       	ldd	r22, Y+39	; 0x27
    41e8:	78 a5       	ldd	r23, Y+40	; 0x28
    41ea:	89 a5       	ldd	r24, Y+41	; 0x29
    41ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	40 e2       	ldi	r20, 0x20	; 32
    41f4:	51 e4       	ldi	r21, 0x41	; 65
    41f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	bc 01       	movw	r22, r24
    4200:	cd 01       	movw	r24, r26
    4202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	9a a3       	std	Y+34, r25	; 0x22
    420c:	89 a3       	std	Y+33, r24	; 0x21
    420e:	0f c0       	rjmp	.+30     	; 0x422e <handle_mode_setup+0xea>
    4210:	88 ec       	ldi	r24, 0xC8	; 200
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	98 a3       	std	Y+32, r25	; 0x20
    4216:	8f 8f       	std	Y+31, r24	; 0x1f
    4218:	8f 8d       	ldd	r24, Y+31	; 0x1f
    421a:	98 a1       	ldd	r25, Y+32	; 0x20
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	f1 f7       	brne	.-4      	; 0x421c <handle_mode_setup+0xd8>
    4220:	98 a3       	std	Y+32, r25	; 0x20
    4222:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4224:	89 a1       	ldd	r24, Y+33	; 0x21
    4226:	9a a1       	ldd	r25, Y+34	; 0x22
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	9a a3       	std	Y+34, r25	; 0x22
    422c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    422e:	89 a1       	ldd	r24, Y+33	; 0x21
    4230:	9a a1       	ldd	r25, Y+34	; 0x22
    4232:	00 97       	sbiw	r24, 0x00	; 0
    4234:	69 f7       	brne	.-38     	; 0x4210 <handle_mode_setup+0xcc>
    4236:	14 c0       	rjmp	.+40     	; 0x4260 <handle_mode_setup+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4238:	6b a1       	ldd	r22, Y+35	; 0x23
    423a:	7c a1       	ldd	r23, Y+36	; 0x24
    423c:	8d a1       	ldd	r24, Y+37	; 0x25
    423e:	9e a1       	ldd	r25, Y+38	; 0x26
    4240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	9a a3       	std	Y+34, r25	; 0x22
    424a:	89 a3       	std	Y+33, r24	; 0x21
    424c:	89 a1       	ldd	r24, Y+33	; 0x21
    424e:	9a a1       	ldd	r25, Y+34	; 0x22
    4250:	9e 8f       	std	Y+30, r25	; 0x1e
    4252:	8d 8f       	std	Y+29, r24	; 0x1d
    4254:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4256:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4258:	01 97       	sbiw	r24, 0x01	; 1
    425a:	f1 f7       	brne	.-4      	; 0x4258 <handle_mode_setup+0x114>
    425c:	9e 8f       	std	Y+30, r25	; 0x1e
    425e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(200);
    }
    
    // Handle START button for increment
    if (button_is_pressed(BTN_START)) {
    4260:	82 e0       	ldi	r24, 0x02	; 2
    4262:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    4266:	88 23       	and	r24, r24
    4268:	09 f4       	brne	.+2      	; 0x426c <handle_mode_setup+0x128>
    426a:	d1 c0       	rjmp	.+418    	; 0x440e <handle_mode_setup+0x2ca>
        switch(setup_field) {
    426c:	80 91 08 03 	lds	r24, 0x0308
    4270:	28 2f       	mov	r18, r24
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	3e a7       	std	Y+46, r19	; 0x2e
    4276:	2d a7       	std	Y+45, r18	; 0x2d
    4278:	8d a5       	ldd	r24, Y+45	; 0x2d
    427a:	9e a5       	ldd	r25, Y+46	; 0x2e
    427c:	82 30       	cpi	r24, 0x02	; 2
    427e:	91 05       	cpc	r25, r1
    4280:	69 f1       	breq	.+90     	; 0x42dc <handle_mode_setup+0x198>
    4282:	2d a5       	ldd	r18, Y+45	; 0x2d
    4284:	3e a5       	ldd	r19, Y+46	; 0x2e
    4286:	23 30       	cpi	r18, 0x03	; 3
    4288:	31 05       	cpc	r19, r1
    428a:	54 f4       	brge	.+20     	; 0x42a0 <handle_mode_setup+0x15c>
    428c:	8d a5       	ldd	r24, Y+45	; 0x2d
    428e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	b1 f0       	breq	.+44     	; 0x42c0 <handle_mode_setup+0x17c>
    4294:	2d a5       	ldd	r18, Y+45	; 0x2d
    4296:	3e a5       	ldd	r19, Y+46	; 0x2e
    4298:	21 30       	cpi	r18, 0x01	; 1
    429a:	31 05       	cpc	r19, r1
    429c:	c1 f0       	breq	.+48     	; 0x42ce <handle_mode_setup+0x18a>
    429e:	45 c0       	rjmp	.+138    	; 0x432a <handle_mode_setup+0x1e6>
    42a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    42a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    42a4:	84 30       	cpi	r24, 0x04	; 4
    42a6:	91 05       	cpc	r25, r1
    42a8:	79 f1       	breq	.+94     	; 0x4308 <handle_mode_setup+0x1c4>
    42aa:	2d a5       	ldd	r18, Y+45	; 0x2d
    42ac:	3e a5       	ldd	r19, Y+46	; 0x2e
    42ae:	24 30       	cpi	r18, 0x04	; 4
    42b0:	31 05       	cpc	r19, r1
    42b2:	dc f0       	brlt	.+54     	; 0x42ea <handle_mode_setup+0x1a6>
    42b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    42b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    42b8:	85 30       	cpi	r24, 0x05	; 5
    42ba:	91 05       	cpc	r25, r1
    42bc:	61 f1       	breq	.+88     	; 0x4316 <handle_mode_setup+0x1d2>
    42be:	35 c0       	rjmp	.+106    	; 0x432a <handle_mode_setup+0x1e6>
            case 0: // Hour
                setup_time.hour = increment_hour(setup_time.hour);
    42c0:	80 91 cf 02 	lds	r24, 0x02CF
    42c4:	0e 94 4a 33 	call	0x6694	; 0x6694 <increment_hour>
    42c8:	80 93 cf 02 	sts	0x02CF, r24
    42cc:	2e c0       	rjmp	.+92     	; 0x432a <handle_mode_setup+0x1e6>
                break;
            case 1: // Minute
                setup_time.minute = increment_minute(setup_time.minute);
    42ce:	80 91 ce 02 	lds	r24, 0x02CE
    42d2:	0e 94 70 33 	call	0x66e0	; 0x66e0 <increment_minute>
    42d6:	80 93 ce 02 	sts	0x02CE, r24
    42da:	27 c0       	rjmp	.+78     	; 0x432a <handle_mode_setup+0x1e6>
                break;
            case 2: // Second
                setup_time.second = increment_second(setup_time.second);
    42dc:	80 91 cd 02 	lds	r24, 0x02CD
    42e0:	0e 94 96 33 	call	0x672c	; 0x672c <increment_second>
    42e4:	80 93 cd 02 	sts	0x02CD, r24
    42e8:	20 c0       	rjmp	.+64     	; 0x432a <handle_mode_setup+0x1e6>
                break;
            case 3: // Day
                setup_date.day = increment_day(setup_date.day, setup_date.month, setup_date.year);
    42ea:	80 91 d0 02 	lds	r24, 0x02D0
    42ee:	90 91 d1 02 	lds	r25, 0x02D1
    42f2:	20 91 d2 02 	lds	r18, 0x02D2
    42f6:	30 91 d3 02 	lds	r19, 0x02D3
    42fa:	69 2f       	mov	r22, r25
    42fc:	a9 01       	movw	r20, r18
    42fe:	0e 94 bc 33 	call	0x6778	; 0x6778 <increment_day>
    4302:	80 93 d0 02 	sts	0x02D0, r24
    4306:	11 c0       	rjmp	.+34     	; 0x432a <handle_mode_setup+0x1e6>
                break;
            case 4: // Month
                setup_date.month = increment_month(setup_date.month);
    4308:	80 91 d1 02 	lds	r24, 0x02D1
    430c:	0e 94 00 34 	call	0x6800	; 0x6800 <increment_month>
    4310:	80 93 d1 02 	sts	0x02D1, r24
    4314:	0a c0       	rjmp	.+20     	; 0x432a <handle_mode_setup+0x1e6>
                break;
            case 5: // Year
                setup_date.year = increment_year(setup_date.year);
    4316:	80 91 d2 02 	lds	r24, 0x02D2
    431a:	90 91 d3 02 	lds	r25, 0x02D3
    431e:	0e 94 27 34 	call	0x684e	; 0x684e <increment_year>
    4322:	90 93 d3 02 	sts	0x02D3, r25
    4326:	80 93 d2 02 	sts	0x02D2, r24
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	a8 e4       	ldi	r26, 0x48	; 72
    4330:	b3 e4       	ldi	r27, 0x43	; 67
    4332:	89 8f       	std	Y+25, r24	; 0x19
    4334:	9a 8f       	std	Y+26, r25	; 0x1a
    4336:	ab 8f       	std	Y+27, r26	; 0x1b
    4338:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433a:	69 8d       	ldd	r22, Y+25	; 0x19
    433c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    433e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	4a ef       	ldi	r20, 0xFA	; 250
    4348:	54 e4       	ldi	r21, 0x44	; 68
    434a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	8d 8b       	std	Y+21, r24	; 0x15
    4354:	9e 8b       	std	Y+22, r25	; 0x16
    4356:	af 8b       	std	Y+23, r26	; 0x17
    4358:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    435a:	6d 89       	ldd	r22, Y+21	; 0x15
    435c:	7e 89       	ldd	r23, Y+22	; 0x16
    435e:	8f 89       	ldd	r24, Y+23	; 0x17
    4360:	98 8d       	ldd	r25, Y+24	; 0x18
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e8       	ldi	r20, 0x80	; 128
    4368:	5f e3       	ldi	r21, 0x3F	; 63
    436a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    436e:	88 23       	and	r24, r24
    4370:	2c f4       	brge	.+10     	; 0x437c <handle_mode_setup+0x238>
		__ticks = 1;
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	9c 8b       	std	Y+20, r25	; 0x14
    4378:	8b 8b       	std	Y+19, r24	; 0x13
    437a:	3f c0       	rjmp	.+126    	; 0x43fa <handle_mode_setup+0x2b6>
	else if (__tmp > 65535)
    437c:	6d 89       	ldd	r22, Y+21	; 0x15
    437e:	7e 89       	ldd	r23, Y+22	; 0x16
    4380:	8f 89       	ldd	r24, Y+23	; 0x17
    4382:	98 8d       	ldd	r25, Y+24	; 0x18
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	3f ef       	ldi	r19, 0xFF	; 255
    4388:	4f e7       	ldi	r20, 0x7F	; 127
    438a:	57 e4       	ldi	r21, 0x47	; 71
    438c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4390:	18 16       	cp	r1, r24
    4392:	4c f5       	brge	.+82     	; 0x43e6 <handle_mode_setup+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4394:	69 8d       	ldd	r22, Y+25	; 0x19
    4396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    439a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e2       	ldi	r20, 0x20	; 32
    43a2:	51 e4       	ldi	r21, 0x41	; 65
    43a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	bc 01       	movw	r22, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	9c 8b       	std	Y+20, r25	; 0x14
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
    43bc:	0f c0       	rjmp	.+30     	; 0x43dc <handle_mode_setup+0x298>
    43be:	88 ec       	ldi	r24, 0xC8	; 200
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	9a 8b       	std	Y+18, r25	; 0x12
    43c4:	89 8b       	std	Y+17, r24	; 0x11
    43c6:	89 89       	ldd	r24, Y+17	; 0x11
    43c8:	9a 89       	ldd	r25, Y+18	; 0x12
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <handle_mode_setup+0x286>
    43ce:	9a 8b       	std	Y+18, r25	; 0x12
    43d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d2:	8b 89       	ldd	r24, Y+19	; 0x13
    43d4:	9c 89       	ldd	r25, Y+20	; 0x14
    43d6:	01 97       	sbiw	r24, 0x01	; 1
    43d8:	9c 8b       	std	Y+20, r25	; 0x14
    43da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43dc:	8b 89       	ldd	r24, Y+19	; 0x13
    43de:	9c 89       	ldd	r25, Y+20	; 0x14
    43e0:	00 97       	sbiw	r24, 0x00	; 0
    43e2:	69 f7       	brne	.-38     	; 0x43be <handle_mode_setup+0x27a>
    43e4:	14 c0       	rjmp	.+40     	; 0x440e <handle_mode_setup+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e6:	6d 89       	ldd	r22, Y+21	; 0x15
    43e8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ea:	8f 89       	ldd	r24, Y+23	; 0x17
    43ec:	98 8d       	ldd	r25, Y+24	; 0x18
    43ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	9c 8b       	std	Y+20, r25	; 0x14
    43f8:	8b 8b       	std	Y+19, r24	; 0x13
    43fa:	8b 89       	ldd	r24, Y+19	; 0x13
    43fc:	9c 89       	ldd	r25, Y+20	; 0x14
    43fe:	98 8b       	std	Y+16, r25	; 0x10
    4400:	8f 87       	std	Y+15, r24	; 0x0f
    4402:	8f 85       	ldd	r24, Y+15	; 0x0f
    4404:	98 89       	ldd	r25, Y+16	; 0x10
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	f1 f7       	brne	.-4      	; 0x4406 <handle_mode_setup+0x2c2>
    440a:	98 8b       	std	Y+16, r25	; 0x10
    440c:	8f 87       	std	Y+15, r24	; 0x0f
        }
        _delay_ms(200);
    }
    
    // Handle STOP button for decrement
    if (button_is_pressed(BTN_STOP)) {
    440e:	83 e0       	ldi	r24, 0x03	; 3
    4410:	0e 94 2f 0a 	call	0x145e	; 0x145e <button_is_pressed>
    4414:	88 23       	and	r24, r24
    4416:	09 f4       	brne	.+2      	; 0x441a <handle_mode_setup+0x2d6>
    4418:	d1 c0       	rjmp	.+418    	; 0x45bc <handle_mode_setup+0x478>
        switch(setup_field) {
    441a:	80 91 08 03 	lds	r24, 0x0308
    441e:	28 2f       	mov	r18, r24
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	3c a7       	std	Y+44, r19	; 0x2c
    4424:	2b a7       	std	Y+43, r18	; 0x2b
    4426:	8b a5       	ldd	r24, Y+43	; 0x2b
    4428:	9c a5       	ldd	r25, Y+44	; 0x2c
    442a:	82 30       	cpi	r24, 0x02	; 2
    442c:	91 05       	cpc	r25, r1
    442e:	69 f1       	breq	.+90     	; 0x448a <handle_mode_setup+0x346>
    4430:	2b a5       	ldd	r18, Y+43	; 0x2b
    4432:	3c a5       	ldd	r19, Y+44	; 0x2c
    4434:	23 30       	cpi	r18, 0x03	; 3
    4436:	31 05       	cpc	r19, r1
    4438:	54 f4       	brge	.+20     	; 0x444e <handle_mode_setup+0x30a>
    443a:	8b a5       	ldd	r24, Y+43	; 0x2b
    443c:	9c a5       	ldd	r25, Y+44	; 0x2c
    443e:	00 97       	sbiw	r24, 0x00	; 0
    4440:	b1 f0       	breq	.+44     	; 0x446e <handle_mode_setup+0x32a>
    4442:	2b a5       	ldd	r18, Y+43	; 0x2b
    4444:	3c a5       	ldd	r19, Y+44	; 0x2c
    4446:	21 30       	cpi	r18, 0x01	; 1
    4448:	31 05       	cpc	r19, r1
    444a:	c1 f0       	breq	.+48     	; 0x447c <handle_mode_setup+0x338>
    444c:	45 c0       	rjmp	.+138    	; 0x44d8 <handle_mode_setup+0x394>
    444e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4450:	9c a5       	ldd	r25, Y+44	; 0x2c
    4452:	84 30       	cpi	r24, 0x04	; 4
    4454:	91 05       	cpc	r25, r1
    4456:	79 f1       	breq	.+94     	; 0x44b6 <handle_mode_setup+0x372>
    4458:	2b a5       	ldd	r18, Y+43	; 0x2b
    445a:	3c a5       	ldd	r19, Y+44	; 0x2c
    445c:	24 30       	cpi	r18, 0x04	; 4
    445e:	31 05       	cpc	r19, r1
    4460:	dc f0       	brlt	.+54     	; 0x4498 <handle_mode_setup+0x354>
    4462:	8b a5       	ldd	r24, Y+43	; 0x2b
    4464:	9c a5       	ldd	r25, Y+44	; 0x2c
    4466:	85 30       	cpi	r24, 0x05	; 5
    4468:	91 05       	cpc	r25, r1
    446a:	61 f1       	breq	.+88     	; 0x44c4 <handle_mode_setup+0x380>
    446c:	35 c0       	rjmp	.+106    	; 0x44d8 <handle_mode_setup+0x394>
            case 0: // Hour
                setup_time.hour = decrement_hour(setup_time.hour);
    446e:	80 91 cf 02 	lds	r24, 0x02CF
    4472:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <decrement_hour>
    4476:	80 93 cf 02 	sts	0x02CF, r24
    447a:	2e c0       	rjmp	.+92     	; 0x44d8 <handle_mode_setup+0x394>
                break;
            case 1: // Minute
                setup_time.minute = decrement_minute(setup_time.minute);
    447c:	80 91 ce 02 	lds	r24, 0x02CE
    4480:	0e 94 82 33 	call	0x6704	; 0x6704 <decrement_minute>
    4484:	80 93 ce 02 	sts	0x02CE, r24
    4488:	27 c0       	rjmp	.+78     	; 0x44d8 <handle_mode_setup+0x394>
                break;
            case 2: // Second
                setup_time.second = decrement_second(setup_time.second);
    448a:	80 91 cd 02 	lds	r24, 0x02CD
    448e:	0e 94 a8 33 	call	0x6750	; 0x6750 <decrement_second>
    4492:	80 93 cd 02 	sts	0x02CD, r24
    4496:	20 c0       	rjmp	.+64     	; 0x44d8 <handle_mode_setup+0x394>
                break;
            case 3: // Day
                setup_date.day = decrement_day(setup_date.day, setup_date.month, setup_date.year);
    4498:	80 91 d0 02 	lds	r24, 0x02D0
    449c:	90 91 d1 02 	lds	r25, 0x02D1
    44a0:	20 91 d2 02 	lds	r18, 0x02D2
    44a4:	30 91 d3 02 	lds	r19, 0x02D3
    44a8:	69 2f       	mov	r22, r25
    44aa:	a9 01       	movw	r20, r18
    44ac:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <decrement_day>
    44b0:	80 93 d0 02 	sts	0x02D0, r24
    44b4:	11 c0       	rjmp	.+34     	; 0x44d8 <handle_mode_setup+0x394>
                break;
            case 4: // Month
                setup_date.month = decrement_month(setup_date.month);
    44b6:	80 91 d1 02 	lds	r24, 0x02D1
    44ba:	0e 94 13 34 	call	0x6826	; 0x6826 <decrement_month>
    44be:	80 93 d1 02 	sts	0x02D1, r24
    44c2:	0a c0       	rjmp	.+20     	; 0x44d8 <handle_mode_setup+0x394>
                break;
            case 5: // Year
                setup_date.year = decrement_year(setup_date.year);
    44c4:	80 91 d2 02 	lds	r24, 0x02D2
    44c8:	90 91 d3 02 	lds	r25, 0x02D3
    44cc:	0e 94 44 34 	call	0x6888	; 0x6888 <decrement_year>
    44d0:	90 93 d3 02 	sts	0x02D3, r25
    44d4:	80 93 d2 02 	sts	0x02D2, r24
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	a8 e4       	ldi	r26, 0x48	; 72
    44de:	b3 e4       	ldi	r27, 0x43	; 67
    44e0:	8b 87       	std	Y+11, r24	; 0x0b
    44e2:	9c 87       	std	Y+12, r25	; 0x0c
    44e4:	ad 87       	std	Y+13, r26	; 0x0d
    44e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	4a ef       	ldi	r20, 0xFA	; 250
    44f6:	54 e4       	ldi	r21, 0x44	; 68
    44f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	8f 83       	std	Y+7, r24	; 0x07
    4502:	98 87       	std	Y+8, r25	; 0x08
    4504:	a9 87       	std	Y+9, r26	; 0x09
    4506:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4508:	6f 81       	ldd	r22, Y+7	; 0x07
    450a:	78 85       	ldd	r23, Y+8	; 0x08
    450c:	89 85       	ldd	r24, Y+9	; 0x09
    450e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e8       	ldi	r20, 0x80	; 128
    4516:	5f e3       	ldi	r21, 0x3F	; 63
    4518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    451c:	88 23       	and	r24, r24
    451e:	2c f4       	brge	.+10     	; 0x452a <handle_mode_setup+0x3e6>
		__ticks = 1;
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	9e 83       	std	Y+6, r25	; 0x06
    4526:	8d 83       	std	Y+5, r24	; 0x05
    4528:	3f c0       	rjmp	.+126    	; 0x45a8 <handle_mode_setup+0x464>
	else if (__tmp > 65535)
    452a:	6f 81       	ldd	r22, Y+7	; 0x07
    452c:	78 85       	ldd	r23, Y+8	; 0x08
    452e:	89 85       	ldd	r24, Y+9	; 0x09
    4530:	9a 85       	ldd	r25, Y+10	; 0x0a
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	3f ef       	ldi	r19, 0xFF	; 255
    4536:	4f e7       	ldi	r20, 0x7F	; 127
    4538:	57 e4       	ldi	r21, 0x47	; 71
    453a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    453e:	18 16       	cp	r1, r24
    4540:	4c f5       	brge	.+82     	; 0x4594 <handle_mode_setup+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4542:	6b 85       	ldd	r22, Y+11	; 0x0b
    4544:	7c 85       	ldd	r23, Y+12	; 0x0c
    4546:	8d 85       	ldd	r24, Y+13	; 0x0d
    4548:	9e 85       	ldd	r25, Y+14	; 0x0e
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e2       	ldi	r20, 0x20	; 32
    4550:	51 e4       	ldi	r21, 0x41	; 65
    4552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	bc 01       	movw	r22, r24
    455c:	cd 01       	movw	r24, r26
    455e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	9e 83       	std	Y+6, r25	; 0x06
    4568:	8d 83       	std	Y+5, r24	; 0x05
    456a:	0f c0       	rjmp	.+30     	; 0x458a <handle_mode_setup+0x446>
    456c:	88 ec       	ldi	r24, 0xC8	; 200
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	9c 83       	std	Y+4, r25	; 0x04
    4572:	8b 83       	std	Y+3, r24	; 0x03
    4574:	8b 81       	ldd	r24, Y+3	; 0x03
    4576:	9c 81       	ldd	r25, Y+4	; 0x04
    4578:	01 97       	sbiw	r24, 0x01	; 1
    457a:	f1 f7       	brne	.-4      	; 0x4578 <handle_mode_setup+0x434>
    457c:	9c 83       	std	Y+4, r25	; 0x04
    457e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4580:	8d 81       	ldd	r24, Y+5	; 0x05
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	01 97       	sbiw	r24, 0x01	; 1
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	9e 81       	ldd	r25, Y+6	; 0x06
    458e:	00 97       	sbiw	r24, 0x00	; 0
    4590:	69 f7       	brne	.-38     	; 0x456c <handle_mode_setup+0x428>
    4592:	14 c0       	rjmp	.+40     	; 0x45bc <handle_mode_setup+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4594:	6f 81       	ldd	r22, Y+7	; 0x07
    4596:	78 85       	ldd	r23, Y+8	; 0x08
    4598:	89 85       	ldd	r24, Y+9	; 0x09
    459a:	9a 85       	ldd	r25, Y+10	; 0x0a
    459c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	9e 83       	std	Y+6, r25	; 0x06
    45a6:	8d 83       	std	Y+5, r24	; 0x05
    45a8:	8d 81       	ldd	r24, Y+5	; 0x05
    45aa:	9e 81       	ldd	r25, Y+6	; 0x06
    45ac:	9a 83       	std	Y+2, r25	; 0x02
    45ae:	89 83       	std	Y+1, r24	; 0x01
    45b0:	89 81       	ldd	r24, Y+1	; 0x01
    45b2:	9a 81       	ldd	r25, Y+2	; 0x02
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <handle_mode_setup+0x470>
    45b8:	9a 83       	std	Y+2, r25	; 0x02
    45ba:	89 83       	std	Y+1, r24	; 0x01
        }
        _delay_ms(200);
    }
    
    // Update RTC with setup values
    rtc_set_time(&setup_time);
    45bc:	8d ec       	ldi	r24, 0xCD	; 205
    45be:	92 e0       	ldi	r25, 0x02	; 2
    45c0:	0e 94 d6 30 	call	0x61ac	; 0x61ac <rtc_set_time>
    rtc_set_date(&setup_date);
    45c4:	80 ed       	ldi	r24, 0xD0	; 208
    45c6:	92 e0       	ldi	r25, 0x02	; 2
    45c8:	0e 94 2b 31 	call	0x6256	; 0x6256 <rtc_set_date>
}
    45cc:	ae 96       	adiw	r28, 0x2e	; 46
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	cf 91       	pop	r28
    45da:	df 91       	pop	r29
    45dc:	08 95       	ret

000045de <update_display>:

void update_display(void)
{
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
    45e6:	e9 97       	sbiw	r28, 0x39	; 57
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	f8 94       	cli
    45ec:	de bf       	out	0x3e, r29	; 62
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	cd bf       	out	0x3d, r28	; 61
    char time_str[16];
    char date_str[16];
    char date_short[16];
    
    // Get current time and date from RTC
    rtc_get_time(&current_time);
    45f2:	ce 01       	movw	r24, r28
    45f4:	01 96       	adiw	r24, 0x01	; 1
    45f6:	0e 94 af 30 	call	0x615e	; 0x615e <rtc_get_time>
    rtc_get_date(&current_date);
    45fa:	ce 01       	movw	r24, r28
    45fc:	04 96       	adiw	r24, 0x04	; 4
    45fe:	0e 94 00 31 	call	0x6200	; 0x6200 <rtc_get_date>
    
    // Display based on current mode
    switch(current_mode) {
    4602:	80 91 02 03 	lds	r24, 0x0302
    4606:	28 2f       	mov	r18, r24
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	39 af       	std	Y+57, r19	; 0x39
    460c:	28 af       	std	Y+56, r18	; 0x38
    460e:	88 ad       	ldd	r24, Y+56	; 0x38
    4610:	99 ad       	ldd	r25, Y+57	; 0x39
    4612:	82 30       	cpi	r24, 0x02	; 2
    4614:	91 05       	cpc	r25, r1
    4616:	09 f4       	brne	.+2      	; 0x461a <update_display+0x3c>
    4618:	95 c0       	rjmp	.+298    	; 0x4744 <update_display+0x166>
    461a:	28 ad       	ldd	r18, Y+56	; 0x38
    461c:	39 ad       	ldd	r19, Y+57	; 0x39
    461e:	23 30       	cpi	r18, 0x03	; 3
    4620:	31 05       	cpc	r19, r1
    4622:	5c f4       	brge	.+22     	; 0x463a <update_display+0x5c>
    4624:	88 ad       	ldd	r24, Y+56	; 0x38
    4626:	99 ad       	ldd	r25, Y+57	; 0x39
    4628:	00 97       	sbiw	r24, 0x00	; 0
    462a:	d1 f0       	breq	.+52     	; 0x4660 <update_display+0x82>
    462c:	28 ad       	ldd	r18, Y+56	; 0x38
    462e:	39 ad       	ldd	r19, Y+57	; 0x39
    4630:	21 30       	cpi	r18, 0x01	; 1
    4632:	31 05       	cpc	r19, r1
    4634:	09 f4       	brne	.+2      	; 0x4638 <update_display+0x5a>
    4636:	4d c0       	rjmp	.+154    	; 0x46d2 <update_display+0xf4>
    4638:	0f c1       	rjmp	.+542    	; 0x4858 <update_display+0x27a>
    463a:	88 ad       	ldd	r24, Y+56	; 0x38
    463c:	99 ad       	ldd	r25, Y+57	; 0x39
    463e:	84 30       	cpi	r24, 0x04	; 4
    4640:	91 05       	cpc	r25, r1
    4642:	09 f4       	brne	.+2      	; 0x4646 <update_display+0x68>
    4644:	b5 c0       	rjmp	.+362    	; 0x47b0 <update_display+0x1d2>
    4646:	28 ad       	ldd	r18, Y+56	; 0x38
    4648:	39 ad       	ldd	r19, Y+57	; 0x39
    464a:	24 30       	cpi	r18, 0x04	; 4
    464c:	31 05       	cpc	r19, r1
    464e:	0c f4       	brge	.+2      	; 0x4652 <update_display+0x74>
    4650:	94 c0       	rjmp	.+296    	; 0x477a <update_display+0x19c>
    4652:	88 ad       	ldd	r24, Y+56	; 0x38
    4654:	99 ad       	ldd	r25, Y+57	; 0x39
    4656:	85 30       	cpi	r24, 0x05	; 5
    4658:	91 05       	cpc	r25, r1
    465a:	09 f4       	brne	.+2      	; 0x465e <update_display+0x80>
    465c:	c4 c0       	rjmp	.+392    	; 0x47e6 <update_display+0x208>
    465e:	fc c0       	rjmp	.+504    	; 0x4858 <update_display+0x27a>
        case MODE_CLOCK:
            // Use RTC values
            format_time_to_string(&current_time, time_str);
    4660:	9e 01       	movw	r18, r28
    4662:	28 5f       	subi	r18, 0xF8	; 248
    4664:	3f 4f       	sbci	r19, 0xFF	; 255
    4666:	ce 01       	movw	r24, r28
    4668:	01 96       	adiw	r24, 0x01	; 1
    466a:	b9 01       	movw	r22, r18
    466c:	0e 94 62 34 	call	0x68c4	; 0x68c4 <format_time_to_string>
            format_date_to_string(&current_date, date_str);
    4670:	ce 01       	movw	r24, r28
    4672:	04 96       	adiw	r24, 0x04	; 4
    4674:	9e 01       	movw	r18, r28
    4676:	28 5e       	subi	r18, 0xE8	; 232
    4678:	3f 4f       	sbci	r19, 0xFF	; 255
    467a:	b9 01       	movw	r22, r18
    467c:	0e 94 a5 34 	call	0x694a	; 0x694a <format_date_to_string>
            format_date_short(&current_date, date_short);
    4680:	ce 01       	movw	r24, r28
    4682:	04 96       	adiw	r24, 0x04	; 4
    4684:	9e 01       	movw	r18, r28
    4686:	28 5d       	subi	r18, 0xD8	; 216
    4688:	3f 4f       	sbci	r19, 0xFF	; 255
    468a:	b9 01       	movw	r22, r18
    468c:	0e 94 e7 34 	call	0x69ce	; 0x69ce <format_date_short>
            
            lcd_goto(0, 0);
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Clock Mode");
    4698:	82 eb       	ldi	r24, 0xB2	; 178
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(0, 11);
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	6b e0       	ldi	r22, 0x0B	; 11
    46a4:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("M0");
    46a8:	8d eb       	ldi	r24, 0xBD	; 189
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	60 e0       	ldi	r22, 0x00	; 0
    46b4:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print(time_str);
    46b8:	ce 01       	movw	r24, r28
    46ba:	08 96       	adiw	r24, 0x08	; 8
    46bc:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 9);
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	69 e0       	ldi	r22, 0x09	; 9
    46c4:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print(date_short);
    46c8:	ce 01       	movw	r24, r28
    46ca:	88 96       	adiw	r24, 0x28	; 40
    46cc:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    46d0:	d3 c0       	rjmp	.+422    	; 0x4878 <update_display+0x29a>
            break;
            
        case MODE_TIME_SET:
            // Use the values being modified in handle_mode_time_set
            format_time_to_string(&time_set_time, time_str);
    46d2:	84 ed       	ldi	r24, 0xD4	; 212
    46d4:	92 e0       	ldi	r25, 0x02	; 2
    46d6:	9e 01       	movw	r18, r28
    46d8:	28 5f       	subi	r18, 0xF8	; 248
    46da:	3f 4f       	sbci	r19, 0xFF	; 255
    46dc:	b9 01       	movw	r22, r18
    46de:	0e 94 62 34 	call	0x68c4	; 0x68c4 <format_time_to_string>
            format_date_to_string(&time_set_date, date_str);
    46e2:	87 ed       	ldi	r24, 0xD7	; 215
    46e4:	92 e0       	ldi	r25, 0x02	; 2
    46e6:	9e 01       	movw	r18, r28
    46e8:	28 5e       	subi	r18, 0xE8	; 232
    46ea:	3f 4f       	sbci	r19, 0xFF	; 255
    46ec:	b9 01       	movw	r22, r18
    46ee:	0e 94 a5 34 	call	0x694a	; 0x694a <format_date_to_string>
            format_date_short(&time_set_date, date_short);
    46f2:	87 ed       	ldi	r24, 0xD7	; 215
    46f4:	92 e0       	ldi	r25, 0x02	; 2
    46f6:	9e 01       	movw	r18, r28
    46f8:	28 5d       	subi	r18, 0xD8	; 216
    46fa:	3f 4f       	sbci	r19, 0xFF	; 255
    46fc:	b9 01       	movw	r22, r18
    46fe:	0e 94 e7 34 	call	0x69ce	; 0x69ce <format_date_short>
            
            lcd_goto(0, 0);
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	60 e0       	ldi	r22, 0x00	; 0
    4706:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Set Time");
    470a:	80 ec       	ldi	r24, 0xC0	; 192
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(0, 11);
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	6b e0       	ldi	r22, 0x0B	; 11
    4716:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("M1");
    471a:	89 ec       	ldi	r24, 0xC9	; 201
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print(time_str);
    472a:	ce 01       	movw	r24, r28
    472c:	08 96       	adiw	r24, 0x08	; 8
    472e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 9);
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	69 e0       	ldi	r22, 0x09	; 9
    4736:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print(date_short);
    473a:	ce 01       	movw	r24, r28
    473c:	88 96       	adiw	r24, 0x28	; 40
    473e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4742:	9a c0       	rjmp	.+308    	; 0x4878 <update_display+0x29a>
            break;
            
        case MODE_ALARM_SET:
            lcd_goto(0, 0);
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Set Alarm");
    474c:	8c ec       	ldi	r24, 0xCC	; 204
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(0, 11);
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	6b e0       	ldi	r22, 0x0B	; 11
    4758:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("M2");
    475c:	86 ed       	ldi	r24, 0xD6	; 214
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Alarm: ");
    476c:	89 ed       	ldi	r24, 0xD9	; 217
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            alarm_display();
    4774:	0e 94 2f 08 	call	0x105e	; 0x105e <alarm_display>
    4778:	7f c0       	rjmp	.+254    	; 0x4878 <update_display+0x29a>
            break;
            
        case MODE_STOPWATCH:
            lcd_goto(0, 0);
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	60 e0       	ldi	r22, 0x00	; 0
    477e:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Stopwatch");
    4782:	81 ee       	ldi	r24, 0xE1	; 225
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(0, 11);
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	6b e0       	ldi	r22, 0x0B	; 11
    478e:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("M3");
    4792:	8b ee       	ldi	r24, 0xEB	; 235
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	60 e0       	ldi	r22, 0x00	; 0
    479e:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Time: ");
    47a2:	8e ee       	ldi	r24, 0xEE	; 238
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            stopwatch_display();
    47aa:	0e 94 8d 32 	call	0x651a	; 0x651a <stopwatch_display>
    47ae:	64 c0       	rjmp	.+200    	; 0x4878 <update_display+0x29a>
            break;
            
        case MODE_COUNTDOWN:
            lcd_goto(0, 0);
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	60 e0       	ldi	r22, 0x00	; 0
    47b4:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Countdown");
    47b8:	85 ef       	ldi	r24, 0xF5	; 245
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(0, 11);
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	6b e0       	ldi	r22, 0x0B	; 11
    47c4:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("M4");
    47c8:	8f ef       	ldi	r24, 0xFF	; 255
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Time: ");
    47d8:	8e ee       	ldi	r24, 0xEE	; 238
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            countdown_display();
    47e0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <countdown_display>
    47e4:	49 c0       	rjmp	.+146    	; 0x4878 <update_display+0x29a>
            break;
            
        case MODE_SETUP:
            // Use static setup values from handle_mode_setup
            format_time_to_string(&setup_time, time_str);
    47e6:	8d ec       	ldi	r24, 0xCD	; 205
    47e8:	92 e0       	ldi	r25, 0x02	; 2
    47ea:	9e 01       	movw	r18, r28
    47ec:	28 5f       	subi	r18, 0xF8	; 248
    47ee:	3f 4f       	sbci	r19, 0xFF	; 255
    47f0:	b9 01       	movw	r22, r18
    47f2:	0e 94 62 34 	call	0x68c4	; 0x68c4 <format_time_to_string>
            format_date_to_string(&setup_date, date_str);
    47f6:	80 ed       	ldi	r24, 0xD0	; 208
    47f8:	92 e0       	ldi	r25, 0x02	; 2
    47fa:	9e 01       	movw	r18, r28
    47fc:	28 5e       	subi	r18, 0xE8	; 232
    47fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4800:	b9 01       	movw	r22, r18
    4802:	0e 94 a5 34 	call	0x694a	; 0x694a <format_date_to_string>
            format_date_short(&setup_date, date_short);
    4806:	80 ed       	ldi	r24, 0xD0	; 208
    4808:	92 e0       	ldi	r25, 0x02	; 2
    480a:	9e 01       	movw	r18, r28
    480c:	28 5d       	subi	r18, 0xD8	; 216
    480e:	3f 4f       	sbci	r19, 0xFF	; 255
    4810:	b9 01       	movw	r22, r18
    4812:	0e 94 e7 34 	call	0x69ce	; 0x69ce <format_date_short>
            
            lcd_goto(0, 0);
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	60 e0       	ldi	r22, 0x00	; 0
    481a:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Setup Mode");
    481e:	82 e0       	ldi	r24, 0x02	; 2
    4820:	91 e0       	ldi	r25, 0x01	; 1
    4822:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(0, 11);
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	6b e0       	ldi	r22, 0x0B	; 11
    482a:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("M5");
    482e:	8d e0       	ldi	r24, 0x0D	; 13
    4830:	91 e0       	ldi	r25, 0x01	; 1
    4832:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    4836:	81 e0       	ldi	r24, 0x01	; 1
    4838:	60 e0       	ldi	r22, 0x00	; 0
    483a:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print(time_str);
    483e:	ce 01       	movw	r24, r28
    4840:	08 96       	adiw	r24, 0x08	; 8
    4842:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 9);
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	69 e0       	ldi	r22, 0x09	; 9
    484a:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print(date_short);
    484e:	ce 01       	movw	r24, r28
    4850:	88 96       	adiw	r24, 0x28	; 40
    4852:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4856:	10 c0       	rjmp	.+32     	; 0x4878 <update_display+0x29a>
            break;
            
        default:
            // MODE_MAX case - should not happen in normal operation
            lcd_goto(0, 0);
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	60 e0       	ldi	r22, 0x00	; 0
    485c:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Error Mode");
    4860:	80 e1       	ldi	r24, 0x10	; 16
    4862:	91 e0       	ldi	r25, 0x01	; 1
    4864:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            lcd_goto(1, 0);
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
            lcd_print("Invalid Mode");
    4870:	8b e1       	ldi	r24, 0x1B	; 27
    4872:	91 e0       	ldi	r25, 0x01	; 1
    4874:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
            break;
    }
}
    4878:	e9 96       	adiw	r28, 0x39	; 57
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <check_alarm_trigger>:

void check_alarm_trigger(void)
{
    488a:	df 93       	push	r29
    488c:	cf 93       	push	r28
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
    4892:	2e 97       	sbiw	r28, 0x0e	; 14
    4894:	0f b6       	in	r0, 0x3f	; 63
    4896:	f8 94       	cli
    4898:	de bf       	out	0x3e, r29	; 62
    489a:	0f be       	out	0x3f, r0	; 63
    489c:	cd bf       	out	0x3d, r28	; 61
    if (alarm_check_trigger()) {
    489e:	0e 94 b8 07 	call	0xf70	; 0xf70 <alarm_check_trigger>
    48a2:	88 23       	and	r24, r24
    48a4:	09 f4       	brne	.+2      	; 0x48a8 <check_alarm_trigger+0x1e>
    48a6:	78 c0       	rjmp	.+240    	; 0x4998 <check_alarm_trigger+0x10e>
        buzzer_on();
    48a8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <buzzer_on>
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	aa e7       	ldi	r26, 0x7A	; 122
    48b2:	b4 e4       	ldi	r27, 0x44	; 68
    48b4:	8b 87       	std	Y+11, r24	; 0x0b
    48b6:	9c 87       	std	Y+12, r25	; 0x0c
    48b8:	ad 87       	std	Y+13, r26	; 0x0d
    48ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    48be:	7c 85       	ldd	r23, Y+12	; 0x0c
    48c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	4a ef       	ldi	r20, 0xFA	; 250
    48ca:	54 e4       	ldi	r21, 0x44	; 68
    48cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	8f 83       	std	Y+7, r24	; 0x07
    48d6:	98 87       	std	Y+8, r25	; 0x08
    48d8:	a9 87       	std	Y+9, r26	; 0x09
    48da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48dc:	6f 81       	ldd	r22, Y+7	; 0x07
    48de:	78 85       	ldd	r23, Y+8	; 0x08
    48e0:	89 85       	ldd	r24, Y+9	; 0x09
    48e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	40 e8       	ldi	r20, 0x80	; 128
    48ea:	5f e3       	ldi	r21, 0x3F	; 63
    48ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48f0:	88 23       	and	r24, r24
    48f2:	2c f4       	brge	.+10     	; 0x48fe <check_alarm_trigger+0x74>
		__ticks = 1;
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	9e 83       	std	Y+6, r25	; 0x06
    48fa:	8d 83       	std	Y+5, r24	; 0x05
    48fc:	3f c0       	rjmp	.+126    	; 0x497c <check_alarm_trigger+0xf2>
	else if (__tmp > 65535)
    48fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4900:	78 85       	ldd	r23, Y+8	; 0x08
    4902:	89 85       	ldd	r24, Y+9	; 0x09
    4904:	9a 85       	ldd	r25, Y+10	; 0x0a
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	4f e7       	ldi	r20, 0x7F	; 127
    490c:	57 e4       	ldi	r21, 0x47	; 71
    490e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4912:	18 16       	cp	r1, r24
    4914:	4c f5       	brge	.+82     	; 0x4968 <check_alarm_trigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4916:	6b 85       	ldd	r22, Y+11	; 0x0b
    4918:	7c 85       	ldd	r23, Y+12	; 0x0c
    491a:	8d 85       	ldd	r24, Y+13	; 0x0d
    491c:	9e 85       	ldd	r25, Y+14	; 0x0e
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	40 e2       	ldi	r20, 0x20	; 32
    4924:	51 e4       	ldi	r21, 0x41	; 65
    4926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	bc 01       	movw	r22, r24
    4930:	cd 01       	movw	r24, r26
    4932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4936:	dc 01       	movw	r26, r24
    4938:	cb 01       	movw	r24, r22
    493a:	9e 83       	std	Y+6, r25	; 0x06
    493c:	8d 83       	std	Y+5, r24	; 0x05
    493e:	0f c0       	rjmp	.+30     	; 0x495e <check_alarm_trigger+0xd4>
    4940:	88 ec       	ldi	r24, 0xC8	; 200
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	9c 83       	std	Y+4, r25	; 0x04
    4946:	8b 83       	std	Y+3, r24	; 0x03
    4948:	8b 81       	ldd	r24, Y+3	; 0x03
    494a:	9c 81       	ldd	r25, Y+4	; 0x04
    494c:	01 97       	sbiw	r24, 0x01	; 1
    494e:	f1 f7       	brne	.-4      	; 0x494c <check_alarm_trigger+0xc2>
    4950:	9c 83       	std	Y+4, r25	; 0x04
    4952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4954:	8d 81       	ldd	r24, Y+5	; 0x05
    4956:	9e 81       	ldd	r25, Y+6	; 0x06
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	9e 83       	std	Y+6, r25	; 0x06
    495c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    495e:	8d 81       	ldd	r24, Y+5	; 0x05
    4960:	9e 81       	ldd	r25, Y+6	; 0x06
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	69 f7       	brne	.-38     	; 0x4940 <check_alarm_trigger+0xb6>
    4966:	14 c0       	rjmp	.+40     	; 0x4990 <check_alarm_trigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4968:	6f 81       	ldd	r22, Y+7	; 0x07
    496a:	78 85       	ldd	r23, Y+8	; 0x08
    496c:	89 85       	ldd	r24, Y+9	; 0x09
    496e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	9e 83       	std	Y+6, r25	; 0x06
    497a:	8d 83       	std	Y+5, r24	; 0x05
    497c:	8d 81       	ldd	r24, Y+5	; 0x05
    497e:	9e 81       	ldd	r25, Y+6	; 0x06
    4980:	9a 83       	std	Y+2, r25	; 0x02
    4982:	89 83       	std	Y+1, r24	; 0x01
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	9a 81       	ldd	r25, Y+2	; 0x02
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <check_alarm_trigger+0xfe>
    498c:	9a 83       	std	Y+2, r25	; 0x02
    498e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1000);
        buzzer_off();
    4990:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <buzzer_off>
        alarm_stop();
    4994:	0e 94 af 07 	call	0xf5e	; 0xf5e <alarm_stop>
    }
}
    4998:	2e 96       	adiw	r28, 0x0e	; 14
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	f8 94       	cli
    499e:	de bf       	out	0x3e, r29	; 62
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	cd bf       	out	0x3d, r28	; 61
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	08 95       	ret

000049aa <__vector_7>:

// Timer1 Compare Match ISR - called every second
ISR(TIMER1_COMPA_vect)
{
    49aa:	1f 92       	push	r1
    49ac:	0f 92       	push	r0
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	0f 92       	push	r0
    49b2:	11 24       	eor	r1, r1
    49b4:	8f 93       	push	r24
    49b6:	df 93       	push	r29
    49b8:	cf 93       	push	r28
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
    seconds_tick = 1;
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	80 93 03 03 	sts	0x0303, r24
} 
    49c4:	cf 91       	pop	r28
    49c6:	df 91       	pop	r29
    49c8:	8f 91       	pop	r24
    49ca:	0f 90       	pop	r0
    49cc:	0f be       	out	0x3f, r0	; 63
    49ce:	0f 90       	pop	r0
    49d0:	1f 90       	pop	r1
    49d2:	18 95       	reti

000049d4 <debug_buttons>:

void debug_buttons(void)
{
    49d4:	df 93       	push	r29
    49d6:	cf 93       	push	r28
    49d8:	cd b7       	in	r28, 0x3d	; 61
    49da:	de b7       	in	r29, 0x3e	; 62
    49dc:	eb 97       	sbiw	r28, 0x3b	; 59
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    uint8_t pressed_button = get_pressed_button();
    49e8:	0e 94 94 0a 	call	0x1528	; 0x1528 <get_pressed_button>
    49ec:	89 af       	std	Y+57, r24	; 0x39
    
    switch(pressed_button) {
    49ee:	89 ad       	ldd	r24, Y+57	; 0x39
    49f0:	28 2f       	mov	r18, r24
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	3b af       	std	Y+59, r19	; 0x3b
    49f6:	2a af       	std	Y+58, r18	; 0x3a
    49f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    49fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    49fc:	81 30       	cpi	r24, 0x01	; 1
    49fe:	91 05       	cpc	r25, r1
    4a00:	09 f4       	brne	.+2      	; 0x4a04 <debug_buttons+0x30>
    4a02:	90 c0       	rjmp	.+288    	; 0x4b24 <debug_buttons+0x150>
    4a04:	2a ad       	ldd	r18, Y+58	; 0x3a
    4a06:	3b ad       	ldd	r19, Y+59	; 0x3b
    4a08:	22 30       	cpi	r18, 0x02	; 2
    4a0a:	31 05       	cpc	r19, r1
    4a0c:	2c f4       	brge	.+10     	; 0x4a18 <debug_buttons+0x44>
    4a0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a10:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a12:	00 97       	sbiw	r24, 0x00	; 0
    4a14:	71 f0       	breq	.+28     	; 0x4a32 <debug_buttons+0x5e>
    4a16:	f0 c1       	rjmp	.+992    	; 0x4df8 <debug_buttons+0x424>
    4a18:	2a ad       	ldd	r18, Y+58	; 0x3a
    4a1a:	3b ad       	ldd	r19, Y+59	; 0x3b
    4a1c:	22 30       	cpi	r18, 0x02	; 2
    4a1e:	31 05       	cpc	r19, r1
    4a20:	09 f4       	brne	.+2      	; 0x4a24 <debug_buttons+0x50>
    4a22:	f9 c0       	rjmp	.+498    	; 0x4c16 <debug_buttons+0x242>
    4a24:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a26:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a28:	83 30       	cpi	r24, 0x03	; 3
    4a2a:	91 05       	cpc	r25, r1
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <debug_buttons+0x5c>
    4a2e:	6c c1       	rjmp	.+728    	; 0x4d08 <debug_buttons+0x334>
    4a30:	e3 c1       	rjmp	.+966    	; 0x4df8 <debug_buttons+0x424>
        case BTN_MODE:
            lcd_clear();
    4a32:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
            lcd_print("MODE Pressed");
    4a36:	88 e2       	ldi	r24, 0x28	; 40
    4a38:	91 e0       	ldi	r25, 0x01	; 1
    4a3a:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	aa e7       	ldi	r26, 0x7A	; 122
    4a44:	b4 e4       	ldi	r27, 0x44	; 68
    4a46:	8d ab       	std	Y+53, r24	; 0x35
    4a48:	9e ab       	std	Y+54, r25	; 0x36
    4a4a:	af ab       	std	Y+55, r26	; 0x37
    4a4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    4a50:	7e a9       	ldd	r23, Y+54	; 0x36
    4a52:	8f a9       	ldd	r24, Y+55	; 0x37
    4a54:	98 ad       	ldd	r25, Y+56	; 0x38
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	4a ef       	ldi	r20, 0xFA	; 250
    4a5c:	54 e4       	ldi	r21, 0x44	; 68
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	89 ab       	std	Y+49, r24	; 0x31
    4a68:	9a ab       	std	Y+50, r25	; 0x32
    4a6a:	ab ab       	std	Y+51, r26	; 0x33
    4a6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    4a70:	7a a9       	ldd	r23, Y+50	; 0x32
    4a72:	8b a9       	ldd	r24, Y+51	; 0x33
    4a74:	9c a9       	ldd	r25, Y+52	; 0x34
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e8       	ldi	r20, 0x80	; 128
    4a7c:	5f e3       	ldi	r21, 0x3F	; 63
    4a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	2c f4       	brge	.+10     	; 0x4a90 <debug_buttons+0xbc>
		__ticks = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	98 ab       	std	Y+48, r25	; 0x30
    4a8c:	8f a7       	std	Y+47, r24	; 0x2f
    4a8e:	3f c0       	rjmp	.+126    	; 0x4b0e <debug_buttons+0x13a>
	else if (__tmp > 65535)
    4a90:	69 a9       	ldd	r22, Y+49	; 0x31
    4a92:	7a a9       	ldd	r23, Y+50	; 0x32
    4a94:	8b a9       	ldd	r24, Y+51	; 0x33
    4a96:	9c a9       	ldd	r25, Y+52	; 0x34
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	3f ef       	ldi	r19, 0xFF	; 255
    4a9c:	4f e7       	ldi	r20, 0x7F	; 127
    4a9e:	57 e4       	ldi	r21, 0x47	; 71
    4aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa4:	18 16       	cp	r1, r24
    4aa6:	4c f5       	brge	.+82     	; 0x4afa <debug_buttons+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    4aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    4aac:	8f a9       	ldd	r24, Y+55	; 0x37
    4aae:	98 ad       	ldd	r25, Y+56	; 0x38
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	40 e2       	ldi	r20, 0x20	; 32
    4ab6:	51 e4       	ldi	r21, 0x41	; 65
    4ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	cd 01       	movw	r24, r26
    4ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	98 ab       	std	Y+48, r25	; 0x30
    4ace:	8f a7       	std	Y+47, r24	; 0x2f
    4ad0:	0f c0       	rjmp	.+30     	; 0x4af0 <debug_buttons+0x11c>
    4ad2:	88 ec       	ldi	r24, 0xC8	; 200
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	9e a7       	std	Y+46, r25	; 0x2e
    4ad8:	8d a7       	std	Y+45, r24	; 0x2d
    4ada:	8d a5       	ldd	r24, Y+45	; 0x2d
    4adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ade:	01 97       	sbiw	r24, 0x01	; 1
    4ae0:	f1 f7       	brne	.-4      	; 0x4ade <debug_buttons+0x10a>
    4ae2:	9e a7       	std	Y+46, r25	; 0x2e
    4ae4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    4aea:	01 97       	sbiw	r24, 0x01	; 1
    4aec:	98 ab       	std	Y+48, r25	; 0x30
    4aee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4af2:	98 a9       	ldd	r25, Y+48	; 0x30
    4af4:	00 97       	sbiw	r24, 0x00	; 0
    4af6:	69 f7       	brne	.-38     	; 0x4ad2 <debug_buttons+0xfe>
    4af8:	7f c1       	rjmp	.+766    	; 0x4df8 <debug_buttons+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afa:	69 a9       	ldd	r22, Y+49	; 0x31
    4afc:	7a a9       	ldd	r23, Y+50	; 0x32
    4afe:	8b a9       	ldd	r24, Y+51	; 0x33
    4b00:	9c a9       	ldd	r25, Y+52	; 0x34
    4b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	98 ab       	std	Y+48, r25	; 0x30
    4b0c:	8f a7       	std	Y+47, r24	; 0x2f
    4b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b10:	98 a9       	ldd	r25, Y+48	; 0x30
    4b12:	9c a7       	std	Y+44, r25	; 0x2c
    4b14:	8b a7       	std	Y+43, r24	; 0x2b
    4b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <debug_buttons+0x146>
    4b1e:	9c a7       	std	Y+44, r25	; 0x2c
    4b20:	8b a7       	std	Y+43, r24	; 0x2b
    4b22:	6a c1       	rjmp	.+724    	; 0x4df8 <debug_buttons+0x424>
            _delay_ms(1000);
            break;
        case BTN_SET:
            lcd_clear();
    4b24:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
            lcd_print("SET Pressed");
    4b28:	85 e3       	ldi	r24, 0x35	; 53
    4b2a:	91 e0       	ldi	r25, 0x01	; 1
    4b2c:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	aa e7       	ldi	r26, 0x7A	; 122
    4b36:	b4 e4       	ldi	r27, 0x44	; 68
    4b38:	8f a3       	std	Y+39, r24	; 0x27
    4b3a:	98 a7       	std	Y+40, r25	; 0x28
    4b3c:	a9 a7       	std	Y+41, r26	; 0x29
    4b3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b40:	6f a1       	ldd	r22, Y+39	; 0x27
    4b42:	78 a5       	ldd	r23, Y+40	; 0x28
    4b44:	89 a5       	ldd	r24, Y+41	; 0x29
    4b46:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	4a ef       	ldi	r20, 0xFA	; 250
    4b4e:	54 e4       	ldi	r21, 0x44	; 68
    4b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	8b a3       	std	Y+35, r24	; 0x23
    4b5a:	9c a3       	std	Y+36, r25	; 0x24
    4b5c:	ad a3       	std	Y+37, r26	; 0x25
    4b5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b60:	6b a1       	ldd	r22, Y+35	; 0x23
    4b62:	7c a1       	ldd	r23, Y+36	; 0x24
    4b64:	8d a1       	ldd	r24, Y+37	; 0x25
    4b66:	9e a1       	ldd	r25, Y+38	; 0x26
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	40 e8       	ldi	r20, 0x80	; 128
    4b6e:	5f e3       	ldi	r21, 0x3F	; 63
    4b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b74:	88 23       	and	r24, r24
    4b76:	2c f4       	brge	.+10     	; 0x4b82 <debug_buttons+0x1ae>
		__ticks = 1;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	9a a3       	std	Y+34, r25	; 0x22
    4b7e:	89 a3       	std	Y+33, r24	; 0x21
    4b80:	3f c0       	rjmp	.+126    	; 0x4c00 <debug_buttons+0x22c>
	else if (__tmp > 65535)
    4b82:	6b a1       	ldd	r22, Y+35	; 0x23
    4b84:	7c a1       	ldd	r23, Y+36	; 0x24
    4b86:	8d a1       	ldd	r24, Y+37	; 0x25
    4b88:	9e a1       	ldd	r25, Y+38	; 0x26
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	3f ef       	ldi	r19, 0xFF	; 255
    4b8e:	4f e7       	ldi	r20, 0x7F	; 127
    4b90:	57 e4       	ldi	r21, 0x47	; 71
    4b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b96:	18 16       	cp	r1, r24
    4b98:	4c f5       	brge	.+82     	; 0x4bec <debug_buttons+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    4b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    4b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    4ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	40 e2       	ldi	r20, 0x20	; 32
    4ba8:	51 e4       	ldi	r21, 0x41	; 65
    4baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	bc 01       	movw	r22, r24
    4bb4:	cd 01       	movw	r24, r26
    4bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	9a a3       	std	Y+34, r25	; 0x22
    4bc0:	89 a3       	std	Y+33, r24	; 0x21
    4bc2:	0f c0       	rjmp	.+30     	; 0x4be2 <debug_buttons+0x20e>
    4bc4:	88 ec       	ldi	r24, 0xC8	; 200
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	98 a3       	std	Y+32, r25	; 0x20
    4bca:	8f 8f       	std	Y+31, r24	; 0x1f
    4bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bce:	98 a1       	ldd	r25, Y+32	; 0x20
    4bd0:	01 97       	sbiw	r24, 0x01	; 1
    4bd2:	f1 f7       	brne	.-4      	; 0x4bd0 <debug_buttons+0x1fc>
    4bd4:	98 a3       	std	Y+32, r25	; 0x20
    4bd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    4bda:	9a a1       	ldd	r25, Y+34	; 0x22
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	9a a3       	std	Y+34, r25	; 0x22
    4be0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be2:	89 a1       	ldd	r24, Y+33	; 0x21
    4be4:	9a a1       	ldd	r25, Y+34	; 0x22
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	69 f7       	brne	.-38     	; 0x4bc4 <debug_buttons+0x1f0>
    4bea:	06 c1       	rjmp	.+524    	; 0x4df8 <debug_buttons+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bec:	6b a1       	ldd	r22, Y+35	; 0x23
    4bee:	7c a1       	ldd	r23, Y+36	; 0x24
    4bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    4bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    4bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	9a a3       	std	Y+34, r25	; 0x22
    4bfe:	89 a3       	std	Y+33, r24	; 0x21
    4c00:	89 a1       	ldd	r24, Y+33	; 0x21
    4c02:	9a a1       	ldd	r25, Y+34	; 0x22
    4c04:	9e 8f       	std	Y+30, r25	; 0x1e
    4c06:	8d 8f       	std	Y+29, r24	; 0x1d
    4c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	f1 f7       	brne	.-4      	; 0x4c0c <debug_buttons+0x238>
    4c10:	9e 8f       	std	Y+30, r25	; 0x1e
    4c12:	8d 8f       	std	Y+29, r24	; 0x1d
    4c14:	f1 c0       	rjmp	.+482    	; 0x4df8 <debug_buttons+0x424>
            _delay_ms(1000);
            break;
        case BTN_START:
            lcd_clear();
    4c16:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
            lcd_print("START Pressed");
    4c1a:	81 e4       	ldi	r24, 0x41	; 65
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4c22:	80 e0       	ldi	r24, 0x00	; 0
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	aa e7       	ldi	r26, 0x7A	; 122
    4c28:	b4 e4       	ldi	r27, 0x44	; 68
    4c2a:	89 8f       	std	Y+25, r24	; 0x19
    4c2c:	9a 8f       	std	Y+26, r25	; 0x1a
    4c2e:	ab 8f       	std	Y+27, r26	; 0x1b
    4c30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c32:	69 8d       	ldd	r22, Y+25	; 0x19
    4c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	4a ef       	ldi	r20, 0xFA	; 250
    4c40:	54 e4       	ldi	r21, 0x44	; 68
    4c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	8d 8b       	std	Y+21, r24	; 0x15
    4c4c:	9e 8b       	std	Y+22, r25	; 0x16
    4c4e:	af 8b       	std	Y+23, r26	; 0x17
    4c50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c52:	6d 89       	ldd	r22, Y+21	; 0x15
    4c54:	7e 89       	ldd	r23, Y+22	; 0x16
    4c56:	8f 89       	ldd	r24, Y+23	; 0x17
    4c58:	98 8d       	ldd	r25, Y+24	; 0x18
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e8       	ldi	r20, 0x80	; 128
    4c60:	5f e3       	ldi	r21, 0x3F	; 63
    4c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c66:	88 23       	and	r24, r24
    4c68:	2c f4       	brge	.+10     	; 0x4c74 <debug_buttons+0x2a0>
		__ticks = 1;
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	9c 8b       	std	Y+20, r25	; 0x14
    4c70:	8b 8b       	std	Y+19, r24	; 0x13
    4c72:	3f c0       	rjmp	.+126    	; 0x4cf2 <debug_buttons+0x31e>
	else if (__tmp > 65535)
    4c74:	6d 89       	ldd	r22, Y+21	; 0x15
    4c76:	7e 89       	ldd	r23, Y+22	; 0x16
    4c78:	8f 89       	ldd	r24, Y+23	; 0x17
    4c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	3f ef       	ldi	r19, 0xFF	; 255
    4c80:	4f e7       	ldi	r20, 0x7F	; 127
    4c82:	57 e4       	ldi	r21, 0x47	; 71
    4c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c88:	18 16       	cp	r1, r24
    4c8a:	4c f5       	brge	.+82     	; 0x4cde <debug_buttons+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    4c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	40 e2       	ldi	r20, 0x20	; 32
    4c9a:	51 e4       	ldi	r21, 0x41	; 65
    4c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	cd 01       	movw	r24, r26
    4ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	9c 8b       	std	Y+20, r25	; 0x14
    4cb2:	8b 8b       	std	Y+19, r24	; 0x13
    4cb4:	0f c0       	rjmp	.+30     	; 0x4cd4 <debug_buttons+0x300>
    4cb6:	88 ec       	ldi	r24, 0xC8	; 200
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	9a 8b       	std	Y+18, r25	; 0x12
    4cbc:	89 8b       	std	Y+17, r24	; 0x11
    4cbe:	89 89       	ldd	r24, Y+17	; 0x11
    4cc0:	9a 89       	ldd	r25, Y+18	; 0x12
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	f1 f7       	brne	.-4      	; 0x4cc2 <debug_buttons+0x2ee>
    4cc6:	9a 8b       	std	Y+18, r25	; 0x12
    4cc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cca:	8b 89       	ldd	r24, Y+19	; 0x13
    4ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	9c 8b       	std	Y+20, r25	; 0x14
    4cd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	69 f7       	brne	.-38     	; 0x4cb6 <debug_buttons+0x2e2>
    4cdc:	8d c0       	rjmp	.+282    	; 0x4df8 <debug_buttons+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cde:	6d 89       	ldd	r22, Y+21	; 0x15
    4ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	9c 8b       	std	Y+20, r25	; 0x14
    4cf0:	8b 8b       	std	Y+19, r24	; 0x13
    4cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    4cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    4cf6:	98 8b       	std	Y+16, r25	; 0x10
    4cf8:	8f 87       	std	Y+15, r24	; 0x0f
    4cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cfc:	98 89       	ldd	r25, Y+16	; 0x10
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	f1 f7       	brne	.-4      	; 0x4cfe <debug_buttons+0x32a>
    4d02:	98 8b       	std	Y+16, r25	; 0x10
    4d04:	8f 87       	std	Y+15, r24	; 0x0f
    4d06:	78 c0       	rjmp	.+240    	; 0x4df8 <debug_buttons+0x424>
            _delay_ms(1000);
            break;
        case BTN_STOP:
            lcd_clear();
    4d08:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
            lcd_print("STOP Pressed");
    4d0c:	8f e4       	ldi	r24, 0x4F	; 79
    4d0e:	91 e0       	ldi	r25, 0x01	; 1
    4d10:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4d14:	80 e0       	ldi	r24, 0x00	; 0
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	aa e7       	ldi	r26, 0x7A	; 122
    4d1a:	b4 e4       	ldi	r27, 0x44	; 68
    4d1c:	8b 87       	std	Y+11, r24	; 0x0b
    4d1e:	9c 87       	std	Y+12, r25	; 0x0c
    4d20:	ad 87       	std	Y+13, r26	; 0x0d
    4d22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	4a ef       	ldi	r20, 0xFA	; 250
    4d32:	54 e4       	ldi	r21, 0x44	; 68
    4d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d38:	dc 01       	movw	r26, r24
    4d3a:	cb 01       	movw	r24, r22
    4d3c:	8f 83       	std	Y+7, r24	; 0x07
    4d3e:	98 87       	std	Y+8, r25	; 0x08
    4d40:	a9 87       	std	Y+9, r26	; 0x09
    4d42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d44:	6f 81       	ldd	r22, Y+7	; 0x07
    4d46:	78 85       	ldd	r23, Y+8	; 0x08
    4d48:	89 85       	ldd	r24, Y+9	; 0x09
    4d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e8       	ldi	r20, 0x80	; 128
    4d52:	5f e3       	ldi	r21, 0x3F	; 63
    4d54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d58:	88 23       	and	r24, r24
    4d5a:	2c f4       	brge	.+10     	; 0x4d66 <debug_buttons+0x392>
		__ticks = 1;
    4d5c:	81 e0       	ldi	r24, 0x01	; 1
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	9e 83       	std	Y+6, r25	; 0x06
    4d62:	8d 83       	std	Y+5, r24	; 0x05
    4d64:	3f c0       	rjmp	.+126    	; 0x4de4 <debug_buttons+0x410>
	else if (__tmp > 65535)
    4d66:	6f 81       	ldd	r22, Y+7	; 0x07
    4d68:	78 85       	ldd	r23, Y+8	; 0x08
    4d6a:	89 85       	ldd	r24, Y+9	; 0x09
    4d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	3f ef       	ldi	r19, 0xFF	; 255
    4d72:	4f e7       	ldi	r20, 0x7F	; 127
    4d74:	57 e4       	ldi	r21, 0x47	; 71
    4d76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d7a:	18 16       	cp	r1, r24
    4d7c:	4c f5       	brge	.+82     	; 0x4dd0 <debug_buttons+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e2       	ldi	r20, 0x20	; 32
    4d8c:	51 e4       	ldi	r21, 0x41	; 65
    4d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	bc 01       	movw	r22, r24
    4d98:	cd 01       	movw	r24, r26
    4d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	9e 83       	std	Y+6, r25	; 0x06
    4da4:	8d 83       	std	Y+5, r24	; 0x05
    4da6:	0f c0       	rjmp	.+30     	; 0x4dc6 <debug_buttons+0x3f2>
    4da8:	88 ec       	ldi	r24, 0xC8	; 200
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	9c 83       	std	Y+4, r25	; 0x04
    4dae:	8b 83       	std	Y+3, r24	; 0x03
    4db0:	8b 81       	ldd	r24, Y+3	; 0x03
    4db2:	9c 81       	ldd	r25, Y+4	; 0x04
    4db4:	01 97       	sbiw	r24, 0x01	; 1
    4db6:	f1 f7       	brne	.-4      	; 0x4db4 <debug_buttons+0x3e0>
    4db8:	9c 83       	std	Y+4, r25	; 0x04
    4dba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc0:	01 97       	sbiw	r24, 0x01	; 1
    4dc2:	9e 83       	std	Y+6, r25	; 0x06
    4dc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dca:	00 97       	sbiw	r24, 0x00	; 0
    4dcc:	69 f7       	brne	.-38     	; 0x4da8 <debug_buttons+0x3d4>
    4dce:	14 c0       	rjmp	.+40     	; 0x4df8 <debug_buttons+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    4dd2:	78 85       	ldd	r23, Y+8	; 0x08
    4dd4:	89 85       	ldd	r24, Y+9	; 0x09
    4dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	cb 01       	movw	r24, r22
    4de0:	9e 83       	std	Y+6, r25	; 0x06
    4de2:	8d 83       	std	Y+5, r24	; 0x05
    4de4:	8d 81       	ldd	r24, Y+5	; 0x05
    4de6:	9e 81       	ldd	r25, Y+6	; 0x06
    4de8:	9a 83       	std	Y+2, r25	; 0x02
    4dea:	89 83       	std	Y+1, r24	; 0x01
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	9a 81       	ldd	r25, Y+2	; 0x02
    4df0:	01 97       	sbiw	r24, 0x01	; 1
    4df2:	f1 f7       	brne	.-4      	; 0x4df0 <debug_buttons+0x41c>
    4df4:	9a 83       	std	Y+2, r25	; 0x02
    4df6:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(1000);
            break;
    }
}
    4df8:	eb 96       	adiw	r28, 0x3b	; 59
    4dfa:	0f b6       	in	r0, 0x3f	; 63
    4dfc:	f8 94       	cli
    4dfe:	de bf       	out	0x3e, r29	; 62
    4e00:	0f be       	out	0x3f, r0	; 63
    4e02:	cd bf       	out	0x3d, r28	; 61
    4e04:	cf 91       	pop	r28
    4e06:	df 91       	pop	r29
    4e08:	08 95       	ret

00004e0a <debug_year_display>:

// Debug function to test year display
void debug_year_display(void)
{
    4e0a:	df 93       	push	r29
    4e0c:	cf 93       	push	r28
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
    4e12:	c8 54       	subi	r28, 0x48	; 72
    4e14:	d0 40       	sbci	r29, 0x00	; 0
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	f8 94       	cli
    4e1a:	de bf       	out	0x3e, r29	; 62
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	cd bf       	out	0x3d, r28	; 61
    date_t test_date = {15, 1, 2024};
    4e20:	8f e0       	ldi	r24, 0x0F	; 15
    4e22:	8d 8f       	std	Y+29, r24	; 0x1d
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	8e 8f       	std	Y+30, r24	; 0x1e
    4e28:	88 ee       	ldi	r24, 0xE8	; 232
    4e2a:	97 e0       	ldi	r25, 0x07	; 7
    4e2c:	98 a3       	std	Y+32, r25	; 0x20
    4e2e:	8f 8f       	std	Y+31, r24	; 0x1f
    char date_full[16];
    char date_short[16];
    
    format_date_to_string(&test_date, date_full);
    4e30:	ce 01       	movw	r24, r28
    4e32:	4d 96       	adiw	r24, 0x1d	; 29
    4e34:	9e 01       	movw	r18, r28
    4e36:	2f 5d       	subi	r18, 0xDF	; 223
    4e38:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3a:	b9 01       	movw	r22, r18
    4e3c:	0e 94 a5 34 	call	0x694a	; 0x694a <format_date_to_string>
    format_date_short(&test_date, date_short);
    4e40:	ce 01       	movw	r24, r28
    4e42:	4d 96       	adiw	r24, 0x1d	; 29
    4e44:	9e 01       	movw	r18, r28
    4e46:	2f 5c       	subi	r18, 0xCF	; 207
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	b9 01       	movw	r22, r18
    4e4c:	0e 94 e7 34 	call	0x69ce	; 0x69ce <format_date_short>
    
    lcd_clear();
    4e50:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
    lcd_goto(0, 0);
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	60 e0       	ldi	r22, 0x00	; 0
    4e58:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
    lcd_print("Full: ");
    4e5c:	8c e5       	ldi	r24, 0x5C	; 92
    4e5e:	91 e0       	ldi	r25, 0x01	; 1
    4e60:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    lcd_print(date_full);
    4e64:	ce 01       	movw	r24, r28
    4e66:	81 96       	adiw	r24, 0x21	; 33
    4e68:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    lcd_goto(1, 0);
    4e6c:	81 e0       	ldi	r24, 0x01	; 1
    4e6e:	60 e0       	ldi	r22, 0x00	; 0
    4e70:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
    lcd_print("Short: ");
    4e74:	83 e6       	ldi	r24, 0x63	; 99
    4e76:	91 e0       	ldi	r25, 0x01	; 1
    4e78:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    lcd_print(date_short);
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	c1 96       	adiw	r24, 0x31	; 49
    4e80:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e8       	ldi	r25, 0x80	; 128
    4e88:	ab e3       	ldi	r26, 0x3B	; 59
    4e8a:	b5 e4       	ldi	r27, 0x45	; 69
    4e8c:	89 8f       	std	Y+25, r24	; 0x19
    4e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e90:	ab 8f       	std	Y+27, r26	; 0x1b
    4e92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e94:	69 8d       	ldd	r22, Y+25	; 0x19
    4e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	4a ef       	ldi	r20, 0xFA	; 250
    4ea2:	54 e4       	ldi	r21, 0x44	; 68
    4ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	8d 8b       	std	Y+21, r24	; 0x15
    4eae:	9e 8b       	std	Y+22, r25	; 0x16
    4eb0:	af 8b       	std	Y+23, r26	; 0x17
    4eb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    4eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eba:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e8       	ldi	r20, 0x80	; 128
    4ec2:	5f e3       	ldi	r21, 0x3F	; 63
    4ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec8:	88 23       	and	r24, r24
    4eca:	2c f4       	brge	.+10     	; 0x4ed6 <debug_year_display+0xcc>
		__ticks = 1;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	9c 8b       	std	Y+20, r25	; 0x14
    4ed2:	8b 8b       	std	Y+19, r24	; 0x13
    4ed4:	3f c0       	rjmp	.+126    	; 0x4f54 <debug_year_display+0x14a>
	else if (__tmp > 65535)
    4ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    4eda:	8f 89       	ldd	r24, Y+23	; 0x17
    4edc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	3f ef       	ldi	r19, 0xFF	; 255
    4ee2:	4f e7       	ldi	r20, 0x7F	; 127
    4ee4:	57 e4       	ldi	r21, 0x47	; 71
    4ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eea:	18 16       	cp	r1, r24
    4eec:	4c f5       	brge	.+82     	; 0x4f40 <debug_year_display+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eee:	69 8d       	ldd	r22, Y+25	; 0x19
    4ef0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e2       	ldi	r20, 0x20	; 32
    4efc:	51 e4       	ldi	r21, 0x41	; 65
    4efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f02:	dc 01       	movw	r26, r24
    4f04:	cb 01       	movw	r24, r22
    4f06:	bc 01       	movw	r22, r24
    4f08:	cd 01       	movw	r24, r26
    4f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	9c 8b       	std	Y+20, r25	; 0x14
    4f14:	8b 8b       	std	Y+19, r24	; 0x13
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <debug_year_display+0x12c>
    4f18:	88 ec       	ldi	r24, 0xC8	; 200
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	9a 8b       	std	Y+18, r25	; 0x12
    4f1e:	89 8b       	std	Y+17, r24	; 0x11
    4f20:	89 89       	ldd	r24, Y+17	; 0x11
    4f22:	9a 89       	ldd	r25, Y+18	; 0x12
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <debug_year_display+0x11a>
    4f28:	9a 8b       	std	Y+18, r25	; 0x12
    4f2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	9c 8b       	std	Y+20, r25	; 0x14
    4f34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f36:	8b 89       	ldd	r24, Y+19	; 0x13
    4f38:	9c 89       	ldd	r25, Y+20	; 0x14
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	69 f7       	brne	.-38     	; 0x4f18 <debug_year_display+0x10e>
    4f3e:	14 c0       	rjmp	.+40     	; 0x4f68 <debug_year_display+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f40:	6d 89       	ldd	r22, Y+21	; 0x15
    4f42:	7e 89       	ldd	r23, Y+22	; 0x16
    4f44:	8f 89       	ldd	r24, Y+23	; 0x17
    4f46:	98 8d       	ldd	r25, Y+24	; 0x18
    4f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	9c 8b       	std	Y+20, r25	; 0x14
    4f52:	8b 8b       	std	Y+19, r24	; 0x13
    4f54:	8b 89       	ldd	r24, Y+19	; 0x13
    4f56:	9c 89       	ldd	r25, Y+20	; 0x14
    4f58:	98 8b       	std	Y+16, r25	; 0x10
    4f5a:	8f 87       	std	Y+15, r24	; 0x0f
    4f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f5e:	98 89       	ldd	r25, Y+16	; 0x10
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	f1 f7       	brne	.-4      	; 0x4f60 <debug_year_display+0x156>
    4f64:	98 8b       	std	Y+16, r25	; 0x10
    4f66:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(3000);
    
    // Also test current setup values
    lcd_clear();
    4f68:	0e 94 e5 13 	call	0x27ca	; 0x27ca <lcd_clear>
    lcd_goto(0, 0);
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	60 e0       	ldi	r22, 0x00	; 0
    4f70:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
    lcd_print("Setup Year: ");
    4f74:	8b e6       	ldi	r24, 0x6B	; 107
    4f76:	91 e0       	ldi	r25, 0x01	; 1
    4f78:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    char year_str[8];
    sprintf(year_str, "%d", setup_date.year);
    4f7c:	20 91 d2 02 	lds	r18, 0x02D2
    4f80:	30 91 d3 02 	lds	r19, 0x02D3
    4f84:	00 d0       	rcall	.+0      	; 0x4f86 <debug_year_display+0x17c>
    4f86:	00 d0       	rcall	.+0      	; 0x4f88 <debug_year_display+0x17e>
    4f88:	00 d0       	rcall	.+0      	; 0x4f8a <debug_year_display+0x180>
    4f8a:	ed b7       	in	r30, 0x3d	; 61
    4f8c:	fe b7       	in	r31, 0x3e	; 62
    4f8e:	31 96       	adiw	r30, 0x01	; 1
    4f90:	ce 01       	movw	r24, r28
    4f92:	8f 5b       	subi	r24, 0xBF	; 191
    4f94:	9f 4f       	sbci	r25, 0xFF	; 255
    4f96:	91 83       	std	Z+1, r25	; 0x01
    4f98:	80 83       	st	Z, r24
    4f9a:	88 e7       	ldi	r24, 0x78	; 120
    4f9c:	91 e0       	ldi	r25, 0x01	; 1
    4f9e:	93 83       	std	Z+3, r25	; 0x03
    4fa0:	82 83       	std	Z+2, r24	; 0x02
    4fa2:	35 83       	std	Z+5, r19	; 0x05
    4fa4:	24 83       	std	Z+4, r18	; 0x04
    4fa6:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    4faa:	8d b7       	in	r24, 0x3d	; 61
    4fac:	9e b7       	in	r25, 0x3e	; 62
    4fae:	06 96       	adiw	r24, 0x06	; 6
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	f8 94       	cli
    4fb4:	9e bf       	out	0x3e, r25	; 62
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	8d bf       	out	0x3d, r24	; 61
    lcd_print(year_str);
    4fba:	ce 01       	movw	r24, r28
    4fbc:	8f 5b       	subi	r24, 0xBF	; 191
    4fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc0:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    lcd_goto(1, 0);
    4fc4:	81 e0       	ldi	r24, 0x01	; 1
    4fc6:	60 e0       	ldi	r22, 0x00	; 0
    4fc8:	0e 94 6d 14 	call	0x28da	; 0x28da <lcd_goto>
    lcd_print("Short: ");
    4fcc:	83 e6       	ldi	r24, 0x63	; 99
    4fce:	91 e0       	ldi	r25, 0x01	; 1
    4fd0:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    format_date_short(&setup_date, date_short);
    4fd4:	80 ed       	ldi	r24, 0xD0	; 208
    4fd6:	92 e0       	ldi	r25, 0x02	; 2
    4fd8:	9e 01       	movw	r18, r28
    4fda:	2f 5c       	subi	r18, 0xCF	; 207
    4fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4fde:	b9 01       	movw	r22, r18
    4fe0:	0e 94 e7 34 	call	0x69ce	; 0x69ce <format_date_short>
    lcd_print(date_short);
    4fe4:	ce 01       	movw	r24, r28
    4fe6:	c1 96       	adiw	r24, 0x31	; 49
    4fe8:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
    4fec:	80 e0       	ldi	r24, 0x00	; 0
    4fee:	90 e8       	ldi	r25, 0x80	; 128
    4ff0:	ab e3       	ldi	r26, 0x3B	; 59
    4ff2:	b5 e4       	ldi	r27, 0x45	; 69
    4ff4:	8b 87       	std	Y+11, r24	; 0x0b
    4ff6:	9c 87       	std	Y+12, r25	; 0x0c
    4ff8:	ad 87       	std	Y+13, r26	; 0x0d
    4ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5000:	8d 85       	ldd	r24, Y+13	; 0x0d
    5002:	9e 85       	ldd	r25, Y+14	; 0x0e
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	4a ef       	ldi	r20, 0xFA	; 250
    500a:	54 e4       	ldi	r21, 0x44	; 68
    500c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	8f 83       	std	Y+7, r24	; 0x07
    5016:	98 87       	std	Y+8, r25	; 0x08
    5018:	a9 87       	std	Y+9, r26	; 0x09
    501a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    501c:	6f 81       	ldd	r22, Y+7	; 0x07
    501e:	78 85       	ldd	r23, Y+8	; 0x08
    5020:	89 85       	ldd	r24, Y+9	; 0x09
    5022:	9a 85       	ldd	r25, Y+10	; 0x0a
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	40 e8       	ldi	r20, 0x80	; 128
    502a:	5f e3       	ldi	r21, 0x3F	; 63
    502c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5030:	88 23       	and	r24, r24
    5032:	2c f4       	brge	.+10     	; 0x503e <debug_year_display+0x234>
		__ticks = 1;
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	9e 83       	std	Y+6, r25	; 0x06
    503a:	8d 83       	std	Y+5, r24	; 0x05
    503c:	3f c0       	rjmp	.+126    	; 0x50bc <debug_year_display+0x2b2>
	else if (__tmp > 65535)
    503e:	6f 81       	ldd	r22, Y+7	; 0x07
    5040:	78 85       	ldd	r23, Y+8	; 0x08
    5042:	89 85       	ldd	r24, Y+9	; 0x09
    5044:	9a 85       	ldd	r25, Y+10	; 0x0a
    5046:	20 e0       	ldi	r18, 0x00	; 0
    5048:	3f ef       	ldi	r19, 0xFF	; 255
    504a:	4f e7       	ldi	r20, 0x7F	; 127
    504c:	57 e4       	ldi	r21, 0x47	; 71
    504e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5052:	18 16       	cp	r1, r24
    5054:	4c f5       	brge	.+82     	; 0x50a8 <debug_year_display+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5056:	6b 85       	ldd	r22, Y+11	; 0x0b
    5058:	7c 85       	ldd	r23, Y+12	; 0x0c
    505a:	8d 85       	ldd	r24, Y+13	; 0x0d
    505c:	9e 85       	ldd	r25, Y+14	; 0x0e
    505e:	20 e0       	ldi	r18, 0x00	; 0
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	40 e2       	ldi	r20, 0x20	; 32
    5064:	51 e4       	ldi	r21, 0x41	; 65
    5066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    506a:	dc 01       	movw	r26, r24
    506c:	cb 01       	movw	r24, r22
    506e:	bc 01       	movw	r22, r24
    5070:	cd 01       	movw	r24, r26
    5072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5076:	dc 01       	movw	r26, r24
    5078:	cb 01       	movw	r24, r22
    507a:	9e 83       	std	Y+6, r25	; 0x06
    507c:	8d 83       	std	Y+5, r24	; 0x05
    507e:	0f c0       	rjmp	.+30     	; 0x509e <debug_year_display+0x294>
    5080:	88 ec       	ldi	r24, 0xC8	; 200
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	9c 83       	std	Y+4, r25	; 0x04
    5086:	8b 83       	std	Y+3, r24	; 0x03
    5088:	8b 81       	ldd	r24, Y+3	; 0x03
    508a:	9c 81       	ldd	r25, Y+4	; 0x04
    508c:	01 97       	sbiw	r24, 0x01	; 1
    508e:	f1 f7       	brne	.-4      	; 0x508c <debug_year_display+0x282>
    5090:	9c 83       	std	Y+4, r25	; 0x04
    5092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5094:	8d 81       	ldd	r24, Y+5	; 0x05
    5096:	9e 81       	ldd	r25, Y+6	; 0x06
    5098:	01 97       	sbiw	r24, 0x01	; 1
    509a:	9e 83       	std	Y+6, r25	; 0x06
    509c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    509e:	8d 81       	ldd	r24, Y+5	; 0x05
    50a0:	9e 81       	ldd	r25, Y+6	; 0x06
    50a2:	00 97       	sbiw	r24, 0x00	; 0
    50a4:	69 f7       	brne	.-38     	; 0x5080 <debug_year_display+0x276>
    50a6:	14 c0       	rjmp	.+40     	; 0x50d0 <debug_year_display+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50a8:	6f 81       	ldd	r22, Y+7	; 0x07
    50aa:	78 85       	ldd	r23, Y+8	; 0x08
    50ac:	89 85       	ldd	r24, Y+9	; 0x09
    50ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b4:	dc 01       	movw	r26, r24
    50b6:	cb 01       	movw	r24, r22
    50b8:	9e 83       	std	Y+6, r25	; 0x06
    50ba:	8d 83       	std	Y+5, r24	; 0x05
    50bc:	8d 81       	ldd	r24, Y+5	; 0x05
    50be:	9e 81       	ldd	r25, Y+6	; 0x06
    50c0:	9a 83       	std	Y+2, r25	; 0x02
    50c2:	89 83       	std	Y+1, r24	; 0x01
    50c4:	89 81       	ldd	r24, Y+1	; 0x01
    50c6:	9a 81       	ldd	r25, Y+2	; 0x02
    50c8:	01 97       	sbiw	r24, 0x01	; 1
    50ca:	f1 f7       	brne	.-4      	; 0x50c8 <debug_year_display+0x2be>
    50cc:	9a 83       	std	Y+2, r25	; 0x02
    50ce:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(3000);
} 
    50d0:	c8 5b       	subi	r28, 0xB8	; 184
    50d2:	df 4f       	sbci	r29, 0xFF	; 255
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	08 95       	ret

000050e4 <rtc_i2c_start>:
#define I2C_SDA_PIN        PC1
#define I2C_SCL_PIN        PC0

// I2C functions
void rtc_i2c_start(void)
{
    50e4:	df 93       	push	r29
    50e6:	cf 93       	push	r28
    50e8:	cd b7       	in	r28, 0x3d	; 61
    50ea:	de b7       	in	r29, 0x3e	; 62
    50ec:	68 97       	sbiw	r28, 0x18	; 24
    50ee:	0f b6       	in	r0, 0x3f	; 63
    50f0:	f8 94       	cli
    50f2:	de bf       	out	0x3e, r29	; 62
    50f4:	0f be       	out	0x3f, r0	; 63
    50f6:	cd bf       	out	0x3d, r28	; 61
    // Set SDA and SCL high
    PORTC |= (1 << I2C_SDA_PIN) | (1 << I2C_SCL_PIN);
    50f8:	a5 e3       	ldi	r26, 0x35	; 53
    50fa:	b0 e0       	ldi	r27, 0x00	; 0
    50fc:	e5 e3       	ldi	r30, 0x35	; 53
    50fe:	f0 e0       	ldi	r31, 0x00	; 0
    5100:	80 81       	ld	r24, Z
    5102:	83 60       	ori	r24, 0x03	; 3
    5104:	8c 93       	st	X, r24
    DDRC |= (1 << I2C_SDA_PIN) | (1 << I2C_SCL_PIN);
    5106:	a4 e3       	ldi	r26, 0x34	; 52
    5108:	b0 e0       	ldi	r27, 0x00	; 0
    510a:	e4 e3       	ldi	r30, 0x34	; 52
    510c:	f0 e0       	ldi	r31, 0x00	; 0
    510e:	80 81       	ld	r24, Z
    5110:	83 60       	ori	r24, 0x03	; 3
    5112:	8c 93       	st	X, r24
    
    // Start condition: SDA goes low while SCL is high
    PORTC &= ~(1 << I2C_SDA_PIN);
    5114:	a5 e3       	ldi	r26, 0x35	; 53
    5116:	b0 e0       	ldi	r27, 0x00	; 0
    5118:	e5 e3       	ldi	r30, 0x35	; 53
    511a:	f0 e0       	ldi	r31, 0x00	; 0
    511c:	80 81       	ld	r24, Z
    511e:	8d 7f       	andi	r24, 0xFD	; 253
    5120:	8c 93       	st	X, r24
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	a0 ea       	ldi	r26, 0xA0	; 160
    5128:	b0 e4       	ldi	r27, 0x40	; 64
    512a:	8d 8b       	std	Y+21, r24	; 0x15
    512c:	9e 8b       	std	Y+22, r25	; 0x16
    512e:	af 8b       	std	Y+23, r26	; 0x17
    5130:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5132:	6d 89       	ldd	r22, Y+21	; 0x15
    5134:	7e 89       	ldd	r23, Y+22	; 0x16
    5136:	8f 89       	ldd	r24, Y+23	; 0x17
    5138:	98 8d       	ldd	r25, Y+24	; 0x18
    513a:	2b ea       	ldi	r18, 0xAB	; 171
    513c:	3a ea       	ldi	r19, 0xAA	; 170
    513e:	4a e2       	ldi	r20, 0x2A	; 42
    5140:	50 e4       	ldi	r21, 0x40	; 64
    5142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	89 8b       	std	Y+17, r24	; 0x11
    514c:	9a 8b       	std	Y+18, r25	; 0x12
    514e:	ab 8b       	std	Y+19, r26	; 0x13
    5150:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5152:	69 89       	ldd	r22, Y+17	; 0x11
    5154:	7a 89       	ldd	r23, Y+18	; 0x12
    5156:	8b 89       	ldd	r24, Y+19	; 0x13
    5158:	9c 89       	ldd	r25, Y+20	; 0x14
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	40 e8       	ldi	r20, 0x80	; 128
    5160:	5f e3       	ldi	r21, 0x3F	; 63
    5162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5166:	88 23       	and	r24, r24
    5168:	1c f4       	brge	.+6      	; 0x5170 <rtc_i2c_start+0x8c>
		__ticks = 1;
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	88 8b       	std	Y+16, r24	; 0x10
    516e:	91 c0       	rjmp	.+290    	; 0x5292 <rtc_i2c_start+0x1ae>
	else if (__tmp > 255)
    5170:	69 89       	ldd	r22, Y+17	; 0x11
    5172:	7a 89       	ldd	r23, Y+18	; 0x12
    5174:	8b 89       	ldd	r24, Y+19	; 0x13
    5176:	9c 89       	ldd	r25, Y+20	; 0x14
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	4f e7       	ldi	r20, 0x7F	; 127
    517e:	53 e4       	ldi	r21, 0x43	; 67
    5180:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5184:	18 16       	cp	r1, r24
    5186:	0c f0       	brlt	.+2      	; 0x518a <rtc_i2c_start+0xa6>
    5188:	7b c0       	rjmp	.+246    	; 0x5280 <rtc_i2c_start+0x19c>
	{
		_delay_ms(__us / 1000.0);
    518a:	6d 89       	ldd	r22, Y+21	; 0x15
    518c:	7e 89       	ldd	r23, Y+22	; 0x16
    518e:	8f 89       	ldd	r24, Y+23	; 0x17
    5190:	98 8d       	ldd	r25, Y+24	; 0x18
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	4a e7       	ldi	r20, 0x7A	; 122
    5198:	54 e4       	ldi	r21, 0x44	; 68
    519a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    519e:	dc 01       	movw	r26, r24
    51a0:	cb 01       	movw	r24, r22
    51a2:	8c 87       	std	Y+12, r24	; 0x0c
    51a4:	9d 87       	std	Y+13, r25	; 0x0d
    51a6:	ae 87       	std	Y+14, r26	; 0x0e
    51a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    51ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    51ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    51b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	4a ef       	ldi	r20, 0xFA	; 250
    51b8:	54 e4       	ldi	r21, 0x44	; 68
    51ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	88 87       	std	Y+8, r24	; 0x08
    51c4:	99 87       	std	Y+9, r25	; 0x09
    51c6:	aa 87       	std	Y+10, r26	; 0x0a
    51c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    51ca:	68 85       	ldd	r22, Y+8	; 0x08
    51cc:	79 85       	ldd	r23, Y+9	; 0x09
    51ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    51d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    51d2:	20 e0       	ldi	r18, 0x00	; 0
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	40 e8       	ldi	r20, 0x80	; 128
    51d8:	5f e3       	ldi	r21, 0x3F	; 63
    51da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51de:	88 23       	and	r24, r24
    51e0:	2c f4       	brge	.+10     	; 0x51ec <rtc_i2c_start+0x108>
		__ticks = 1;
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	9f 83       	std	Y+7, r25	; 0x07
    51e8:	8e 83       	std	Y+6, r24	; 0x06
    51ea:	3f c0       	rjmp	.+126    	; 0x526a <rtc_i2c_start+0x186>
	else if (__tmp > 65535)
    51ec:	68 85       	ldd	r22, Y+8	; 0x08
    51ee:	79 85       	ldd	r23, Y+9	; 0x09
    51f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    51f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	3f ef       	ldi	r19, 0xFF	; 255
    51f8:	4f e7       	ldi	r20, 0x7F	; 127
    51fa:	57 e4       	ldi	r21, 0x47	; 71
    51fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5200:	18 16       	cp	r1, r24
    5202:	4c f5       	brge	.+82     	; 0x5256 <rtc_i2c_start+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5204:	6c 85       	ldd	r22, Y+12	; 0x0c
    5206:	7d 85       	ldd	r23, Y+13	; 0x0d
    5208:	8e 85       	ldd	r24, Y+14	; 0x0e
    520a:	9f 85       	ldd	r25, Y+15	; 0x0f
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	40 e2       	ldi	r20, 0x20	; 32
    5212:	51 e4       	ldi	r21, 0x41	; 65
    5214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	bc 01       	movw	r22, r24
    521e:	cd 01       	movw	r24, r26
    5220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5224:	dc 01       	movw	r26, r24
    5226:	cb 01       	movw	r24, r22
    5228:	9f 83       	std	Y+7, r25	; 0x07
    522a:	8e 83       	std	Y+6, r24	; 0x06
    522c:	0f c0       	rjmp	.+30     	; 0x524c <rtc_i2c_start+0x168>
    522e:	88 ec       	ldi	r24, 0xC8	; 200
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	9d 83       	std	Y+5, r25	; 0x05
    5234:	8c 83       	std	Y+4, r24	; 0x04
    5236:	8c 81       	ldd	r24, Y+4	; 0x04
    5238:	9d 81       	ldd	r25, Y+5	; 0x05
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	f1 f7       	brne	.-4      	; 0x523a <rtc_i2c_start+0x156>
    523e:	9d 83       	std	Y+5, r25	; 0x05
    5240:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5242:	8e 81       	ldd	r24, Y+6	; 0x06
    5244:	9f 81       	ldd	r25, Y+7	; 0x07
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	9f 83       	std	Y+7, r25	; 0x07
    524a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    524c:	8e 81       	ldd	r24, Y+6	; 0x06
    524e:	9f 81       	ldd	r25, Y+7	; 0x07
    5250:	00 97       	sbiw	r24, 0x00	; 0
    5252:	69 f7       	brne	.-38     	; 0x522e <rtc_i2c_start+0x14a>
    5254:	24 c0       	rjmp	.+72     	; 0x529e <rtc_i2c_start+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5256:	68 85       	ldd	r22, Y+8	; 0x08
    5258:	79 85       	ldd	r23, Y+9	; 0x09
    525a:	8a 85       	ldd	r24, Y+10	; 0x0a
    525c:	9b 85       	ldd	r25, Y+11	; 0x0b
    525e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5262:	dc 01       	movw	r26, r24
    5264:	cb 01       	movw	r24, r22
    5266:	9f 83       	std	Y+7, r25	; 0x07
    5268:	8e 83       	std	Y+6, r24	; 0x06
    526a:	8e 81       	ldd	r24, Y+6	; 0x06
    526c:	9f 81       	ldd	r25, Y+7	; 0x07
    526e:	9b 83       	std	Y+3, r25	; 0x03
    5270:	8a 83       	std	Y+2, r24	; 0x02
    5272:	8a 81       	ldd	r24, Y+2	; 0x02
    5274:	9b 81       	ldd	r25, Y+3	; 0x03
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	f1 f7       	brne	.-4      	; 0x5276 <rtc_i2c_start+0x192>
    527a:	9b 83       	std	Y+3, r25	; 0x03
    527c:	8a 83       	std	Y+2, r24	; 0x02
    527e:	0f c0       	rjmp	.+30     	; 0x529e <rtc_i2c_start+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5280:	69 89       	ldd	r22, Y+17	; 0x11
    5282:	7a 89       	ldd	r23, Y+18	; 0x12
    5284:	8b 89       	ldd	r24, Y+19	; 0x13
    5286:	9c 89       	ldd	r25, Y+20	; 0x14
    5288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	88 8b       	std	Y+16, r24	; 0x10
    5292:	88 89       	ldd	r24, Y+16	; 0x10
    5294:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5296:	89 81       	ldd	r24, Y+1	; 0x01
    5298:	8a 95       	dec	r24
    529a:	f1 f7       	brne	.-4      	; 0x5298 <rtc_i2c_start+0x1b4>
    529c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    PORTC &= ~(1 << I2C_SCL_PIN);
    529e:	a5 e3       	ldi	r26, 0x35	; 53
    52a0:	b0 e0       	ldi	r27, 0x00	; 0
    52a2:	e5 e3       	ldi	r30, 0x35	; 53
    52a4:	f0 e0       	ldi	r31, 0x00	; 0
    52a6:	80 81       	ld	r24, Z
    52a8:	8e 7f       	andi	r24, 0xFE	; 254
    52aa:	8c 93       	st	X, r24
}
    52ac:	68 96       	adiw	r28, 0x18	; 24
    52ae:	0f b6       	in	r0, 0x3f	; 63
    52b0:	f8 94       	cli
    52b2:	de bf       	out	0x3e, r29	; 62
    52b4:	0f be       	out	0x3f, r0	; 63
    52b6:	cd bf       	out	0x3d, r28	; 61
    52b8:	cf 91       	pop	r28
    52ba:	df 91       	pop	r29
    52bc:	08 95       	ret

000052be <rtc_i2c_stop>:

void rtc_i2c_stop(void)
{
    52be:	df 93       	push	r29
    52c0:	cf 93       	push	r28
    52c2:	cd b7       	in	r28, 0x3d	; 61
    52c4:	de b7       	in	r29, 0x3e	; 62
    52c6:	e0 97       	sbiw	r28, 0x30	; 48
    52c8:	0f b6       	in	r0, 0x3f	; 63
    52ca:	f8 94       	cli
    52cc:	de bf       	out	0x3e, r29	; 62
    52ce:	0f be       	out	0x3f, r0	; 63
    52d0:	cd bf       	out	0x3d, r28	; 61
    // Set SDA low
    PORTC &= ~(1 << I2C_SDA_PIN);
    52d2:	a5 e3       	ldi	r26, 0x35	; 53
    52d4:	b0 e0       	ldi	r27, 0x00	; 0
    52d6:	e5 e3       	ldi	r30, 0x35	; 53
    52d8:	f0 e0       	ldi	r31, 0x00	; 0
    52da:	80 81       	ld	r24, Z
    52dc:	8d 7f       	andi	r24, 0xFD	; 253
    52de:	8c 93       	st	X, r24
    DDRC |= (1 << I2C_SDA_PIN);
    52e0:	a4 e3       	ldi	r26, 0x34	; 52
    52e2:	b0 e0       	ldi	r27, 0x00	; 0
    52e4:	e4 e3       	ldi	r30, 0x34	; 52
    52e6:	f0 e0       	ldi	r31, 0x00	; 0
    52e8:	80 81       	ld	r24, Z
    52ea:	82 60       	ori	r24, 0x02	; 2
    52ec:	8c 93       	st	X, r24
    
    // Stop condition: SDA goes high while SCL is high
    PORTC |= (1 << I2C_SCL_PIN);
    52ee:	a5 e3       	ldi	r26, 0x35	; 53
    52f0:	b0 e0       	ldi	r27, 0x00	; 0
    52f2:	e5 e3       	ldi	r30, 0x35	; 53
    52f4:	f0 e0       	ldi	r31, 0x00	; 0
    52f6:	80 81       	ld	r24, Z
    52f8:	81 60       	ori	r24, 0x01	; 1
    52fa:	8c 93       	st	X, r24
    52fc:	80 e0       	ldi	r24, 0x00	; 0
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	a0 ea       	ldi	r26, 0xA0	; 160
    5302:	b0 e4       	ldi	r27, 0x40	; 64
    5304:	8d a7       	std	Y+45, r24	; 0x2d
    5306:	9e a7       	std	Y+46, r25	; 0x2e
    5308:	af a7       	std	Y+47, r26	; 0x2f
    530a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    530c:	6d a5       	ldd	r22, Y+45	; 0x2d
    530e:	7e a5       	ldd	r23, Y+46	; 0x2e
    5310:	8f a5       	ldd	r24, Y+47	; 0x2f
    5312:	98 a9       	ldd	r25, Y+48	; 0x30
    5314:	2b ea       	ldi	r18, 0xAB	; 171
    5316:	3a ea       	ldi	r19, 0xAA	; 170
    5318:	4a e2       	ldi	r20, 0x2A	; 42
    531a:	50 e4       	ldi	r21, 0x40	; 64
    531c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	89 a7       	std	Y+41, r24	; 0x29
    5326:	9a a7       	std	Y+42, r25	; 0x2a
    5328:	ab a7       	std	Y+43, r26	; 0x2b
    532a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    532c:	69 a5       	ldd	r22, Y+41	; 0x29
    532e:	7a a5       	ldd	r23, Y+42	; 0x2a
    5330:	8b a5       	ldd	r24, Y+43	; 0x2b
    5332:	9c a5       	ldd	r25, Y+44	; 0x2c
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	40 e8       	ldi	r20, 0x80	; 128
    533a:	5f e3       	ldi	r21, 0x3F	; 63
    533c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5340:	88 23       	and	r24, r24
    5342:	1c f4       	brge	.+6      	; 0x534a <rtc_i2c_stop+0x8c>
		__ticks = 1;
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	88 a7       	std	Y+40, r24	; 0x28
    5348:	91 c0       	rjmp	.+290    	; 0x546c <rtc_i2c_stop+0x1ae>
	else if (__tmp > 255)
    534a:	69 a5       	ldd	r22, Y+41	; 0x29
    534c:	7a a5       	ldd	r23, Y+42	; 0x2a
    534e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5350:	9c a5       	ldd	r25, Y+44	; 0x2c
    5352:	20 e0       	ldi	r18, 0x00	; 0
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	4f e7       	ldi	r20, 0x7F	; 127
    5358:	53 e4       	ldi	r21, 0x43	; 67
    535a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    535e:	18 16       	cp	r1, r24
    5360:	0c f0       	brlt	.+2      	; 0x5364 <rtc_i2c_stop+0xa6>
    5362:	7b c0       	rjmp	.+246    	; 0x545a <rtc_i2c_stop+0x19c>
	{
		_delay_ms(__us / 1000.0);
    5364:	6d a5       	ldd	r22, Y+45	; 0x2d
    5366:	7e a5       	ldd	r23, Y+46	; 0x2e
    5368:	8f a5       	ldd	r24, Y+47	; 0x2f
    536a:	98 a9       	ldd	r25, Y+48	; 0x30
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	4a e7       	ldi	r20, 0x7A	; 122
    5372:	54 e4       	ldi	r21, 0x44	; 68
    5374:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	8c a3       	std	Y+36, r24	; 0x24
    537e:	9d a3       	std	Y+37, r25	; 0x25
    5380:	ae a3       	std	Y+38, r26	; 0x26
    5382:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5384:	6c a1       	ldd	r22, Y+36	; 0x24
    5386:	7d a1       	ldd	r23, Y+37	; 0x25
    5388:	8e a1       	ldd	r24, Y+38	; 0x26
    538a:	9f a1       	ldd	r25, Y+39	; 0x27
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	4a ef       	ldi	r20, 0xFA	; 250
    5392:	54 e4       	ldi	r21, 0x44	; 68
    5394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5398:	dc 01       	movw	r26, r24
    539a:	cb 01       	movw	r24, r22
    539c:	88 a3       	std	Y+32, r24	; 0x20
    539e:	99 a3       	std	Y+33, r25	; 0x21
    53a0:	aa a3       	std	Y+34, r26	; 0x22
    53a2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    53a4:	68 a1       	ldd	r22, Y+32	; 0x20
    53a6:	79 a1       	ldd	r23, Y+33	; 0x21
    53a8:	8a a1       	ldd	r24, Y+34	; 0x22
    53aa:	9b a1       	ldd	r25, Y+35	; 0x23
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e8       	ldi	r20, 0x80	; 128
    53b2:	5f e3       	ldi	r21, 0x3F	; 63
    53b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53b8:	88 23       	and	r24, r24
    53ba:	2c f4       	brge	.+10     	; 0x53c6 <rtc_i2c_stop+0x108>
		__ticks = 1;
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	9f 8f       	std	Y+31, r25	; 0x1f
    53c2:	8e 8f       	std	Y+30, r24	; 0x1e
    53c4:	3f c0       	rjmp	.+126    	; 0x5444 <rtc_i2c_stop+0x186>
	else if (__tmp > 65535)
    53c6:	68 a1       	ldd	r22, Y+32	; 0x20
    53c8:	79 a1       	ldd	r23, Y+33	; 0x21
    53ca:	8a a1       	ldd	r24, Y+34	; 0x22
    53cc:	9b a1       	ldd	r25, Y+35	; 0x23
    53ce:	20 e0       	ldi	r18, 0x00	; 0
    53d0:	3f ef       	ldi	r19, 0xFF	; 255
    53d2:	4f e7       	ldi	r20, 0x7F	; 127
    53d4:	57 e4       	ldi	r21, 0x47	; 71
    53d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53da:	18 16       	cp	r1, r24
    53dc:	4c f5       	brge	.+82     	; 0x5430 <rtc_i2c_stop+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53de:	6c a1       	ldd	r22, Y+36	; 0x24
    53e0:	7d a1       	ldd	r23, Y+37	; 0x25
    53e2:	8e a1       	ldd	r24, Y+38	; 0x26
    53e4:	9f a1       	ldd	r25, Y+39	; 0x27
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e2       	ldi	r20, 0x20	; 32
    53ec:	51 e4       	ldi	r21, 0x41	; 65
    53ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	bc 01       	movw	r22, r24
    53f8:	cd 01       	movw	r24, r26
    53fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fe:	dc 01       	movw	r26, r24
    5400:	cb 01       	movw	r24, r22
    5402:	9f 8f       	std	Y+31, r25	; 0x1f
    5404:	8e 8f       	std	Y+30, r24	; 0x1e
    5406:	0f c0       	rjmp	.+30     	; 0x5426 <rtc_i2c_stop+0x168>
    5408:	88 ec       	ldi	r24, 0xC8	; 200
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	9d 8f       	std	Y+29, r25	; 0x1d
    540e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5410:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5412:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	f1 f7       	brne	.-4      	; 0x5414 <rtc_i2c_stop+0x156>
    5418:	9d 8f       	std	Y+29, r25	; 0x1d
    541a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    541c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    541e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	9f 8f       	std	Y+31, r25	; 0x1f
    5424:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5426:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5428:	9f 8d       	ldd	r25, Y+31	; 0x1f
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	69 f7       	brne	.-38     	; 0x5408 <rtc_i2c_stop+0x14a>
    542e:	24 c0       	rjmp	.+72     	; 0x5478 <rtc_i2c_stop+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5430:	68 a1       	ldd	r22, Y+32	; 0x20
    5432:	79 a1       	ldd	r23, Y+33	; 0x21
    5434:	8a a1       	ldd	r24, Y+34	; 0x22
    5436:	9b a1       	ldd	r25, Y+35	; 0x23
    5438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    543c:	dc 01       	movw	r26, r24
    543e:	cb 01       	movw	r24, r22
    5440:	9f 8f       	std	Y+31, r25	; 0x1f
    5442:	8e 8f       	std	Y+30, r24	; 0x1e
    5444:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5446:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5448:	9b 8f       	std	Y+27, r25	; 0x1b
    544a:	8a 8f       	std	Y+26, r24	; 0x1a
    544c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    544e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	f1 f7       	brne	.-4      	; 0x5450 <rtc_i2c_stop+0x192>
    5454:	9b 8f       	std	Y+27, r25	; 0x1b
    5456:	8a 8f       	std	Y+26, r24	; 0x1a
    5458:	0f c0       	rjmp	.+30     	; 0x5478 <rtc_i2c_stop+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    545a:	69 a5       	ldd	r22, Y+41	; 0x29
    545c:	7a a5       	ldd	r23, Y+42	; 0x2a
    545e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5460:	9c a5       	ldd	r25, Y+44	; 0x2c
    5462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5466:	dc 01       	movw	r26, r24
    5468:	cb 01       	movw	r24, r22
    546a:	88 a7       	std	Y+40, r24	; 0x28
    546c:	88 a5       	ldd	r24, Y+40	; 0x28
    546e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5470:	89 8d       	ldd	r24, Y+25	; 0x19
    5472:	8a 95       	dec	r24
    5474:	f1 f7       	brne	.-4      	; 0x5472 <rtc_i2c_stop+0x1b4>
    5476:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    PORTC |= (1 << I2C_SDA_PIN);
    5478:	a5 e3       	ldi	r26, 0x35	; 53
    547a:	b0 e0       	ldi	r27, 0x00	; 0
    547c:	e5 e3       	ldi	r30, 0x35	; 53
    547e:	f0 e0       	ldi	r31, 0x00	; 0
    5480:	80 81       	ld	r24, Z
    5482:	82 60       	ori	r24, 0x02	; 2
    5484:	8c 93       	st	X, r24
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	a0 ea       	ldi	r26, 0xA0	; 160
    548c:	b0 e4       	ldi	r27, 0x40	; 64
    548e:	8d 8b       	std	Y+21, r24	; 0x15
    5490:	9e 8b       	std	Y+22, r25	; 0x16
    5492:	af 8b       	std	Y+23, r26	; 0x17
    5494:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5496:	6d 89       	ldd	r22, Y+21	; 0x15
    5498:	7e 89       	ldd	r23, Y+22	; 0x16
    549a:	8f 89       	ldd	r24, Y+23	; 0x17
    549c:	98 8d       	ldd	r25, Y+24	; 0x18
    549e:	2b ea       	ldi	r18, 0xAB	; 171
    54a0:	3a ea       	ldi	r19, 0xAA	; 170
    54a2:	4a e2       	ldi	r20, 0x2A	; 42
    54a4:	50 e4       	ldi	r21, 0x40	; 64
    54a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54aa:	dc 01       	movw	r26, r24
    54ac:	cb 01       	movw	r24, r22
    54ae:	89 8b       	std	Y+17, r24	; 0x11
    54b0:	9a 8b       	std	Y+18, r25	; 0x12
    54b2:	ab 8b       	std	Y+19, r26	; 0x13
    54b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    54b6:	69 89       	ldd	r22, Y+17	; 0x11
    54b8:	7a 89       	ldd	r23, Y+18	; 0x12
    54ba:	8b 89       	ldd	r24, Y+19	; 0x13
    54bc:	9c 89       	ldd	r25, Y+20	; 0x14
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	40 e8       	ldi	r20, 0x80	; 128
    54c4:	5f e3       	ldi	r21, 0x3F	; 63
    54c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54ca:	88 23       	and	r24, r24
    54cc:	1c f4       	brge	.+6      	; 0x54d4 <rtc_i2c_stop+0x216>
		__ticks = 1;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	88 8b       	std	Y+16, r24	; 0x10
    54d2:	91 c0       	rjmp	.+290    	; 0x55f6 <rtc_i2c_stop+0x338>
	else if (__tmp > 255)
    54d4:	69 89       	ldd	r22, Y+17	; 0x11
    54d6:	7a 89       	ldd	r23, Y+18	; 0x12
    54d8:	8b 89       	ldd	r24, Y+19	; 0x13
    54da:	9c 89       	ldd	r25, Y+20	; 0x14
    54dc:	20 e0       	ldi	r18, 0x00	; 0
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	4f e7       	ldi	r20, 0x7F	; 127
    54e2:	53 e4       	ldi	r21, 0x43	; 67
    54e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54e8:	18 16       	cp	r1, r24
    54ea:	0c f0       	brlt	.+2      	; 0x54ee <rtc_i2c_stop+0x230>
    54ec:	7b c0       	rjmp	.+246    	; 0x55e4 <rtc_i2c_stop+0x326>
	{
		_delay_ms(__us / 1000.0);
    54ee:	6d 89       	ldd	r22, Y+21	; 0x15
    54f0:	7e 89       	ldd	r23, Y+22	; 0x16
    54f2:	8f 89       	ldd	r24, Y+23	; 0x17
    54f4:	98 8d       	ldd	r25, Y+24	; 0x18
    54f6:	20 e0       	ldi	r18, 0x00	; 0
    54f8:	30 e0       	ldi	r19, 0x00	; 0
    54fa:	4a e7       	ldi	r20, 0x7A	; 122
    54fc:	54 e4       	ldi	r21, 0x44	; 68
    54fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5502:	dc 01       	movw	r26, r24
    5504:	cb 01       	movw	r24, r22
    5506:	8c 87       	std	Y+12, r24	; 0x0c
    5508:	9d 87       	std	Y+13, r25	; 0x0d
    550a:	ae 87       	std	Y+14, r26	; 0x0e
    550c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    550e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5510:	7d 85       	ldd	r23, Y+13	; 0x0d
    5512:	8e 85       	ldd	r24, Y+14	; 0x0e
    5514:	9f 85       	ldd	r25, Y+15	; 0x0f
    5516:	20 e0       	ldi	r18, 0x00	; 0
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	4a ef       	ldi	r20, 0xFA	; 250
    551c:	54 e4       	ldi	r21, 0x44	; 68
    551e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5522:	dc 01       	movw	r26, r24
    5524:	cb 01       	movw	r24, r22
    5526:	88 87       	std	Y+8, r24	; 0x08
    5528:	99 87       	std	Y+9, r25	; 0x09
    552a:	aa 87       	std	Y+10, r26	; 0x0a
    552c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    552e:	68 85       	ldd	r22, Y+8	; 0x08
    5530:	79 85       	ldd	r23, Y+9	; 0x09
    5532:	8a 85       	ldd	r24, Y+10	; 0x0a
    5534:	9b 85       	ldd	r25, Y+11	; 0x0b
    5536:	20 e0       	ldi	r18, 0x00	; 0
    5538:	30 e0       	ldi	r19, 0x00	; 0
    553a:	40 e8       	ldi	r20, 0x80	; 128
    553c:	5f e3       	ldi	r21, 0x3F	; 63
    553e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5542:	88 23       	and	r24, r24
    5544:	2c f4       	brge	.+10     	; 0x5550 <rtc_i2c_stop+0x292>
		__ticks = 1;
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	9f 83       	std	Y+7, r25	; 0x07
    554c:	8e 83       	std	Y+6, r24	; 0x06
    554e:	3f c0       	rjmp	.+126    	; 0x55ce <rtc_i2c_stop+0x310>
	else if (__tmp > 65535)
    5550:	68 85       	ldd	r22, Y+8	; 0x08
    5552:	79 85       	ldd	r23, Y+9	; 0x09
    5554:	8a 85       	ldd	r24, Y+10	; 0x0a
    5556:	9b 85       	ldd	r25, Y+11	; 0x0b
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	3f ef       	ldi	r19, 0xFF	; 255
    555c:	4f e7       	ldi	r20, 0x7F	; 127
    555e:	57 e4       	ldi	r21, 0x47	; 71
    5560:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5564:	18 16       	cp	r1, r24
    5566:	4c f5       	brge	.+82     	; 0x55ba <rtc_i2c_stop+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5568:	6c 85       	ldd	r22, Y+12	; 0x0c
    556a:	7d 85       	ldd	r23, Y+13	; 0x0d
    556c:	8e 85       	ldd	r24, Y+14	; 0x0e
    556e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	40 e2       	ldi	r20, 0x20	; 32
    5576:	51 e4       	ldi	r21, 0x41	; 65
    5578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    557c:	dc 01       	movw	r26, r24
    557e:	cb 01       	movw	r24, r22
    5580:	bc 01       	movw	r22, r24
    5582:	cd 01       	movw	r24, r26
    5584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5588:	dc 01       	movw	r26, r24
    558a:	cb 01       	movw	r24, r22
    558c:	9f 83       	std	Y+7, r25	; 0x07
    558e:	8e 83       	std	Y+6, r24	; 0x06
    5590:	0f c0       	rjmp	.+30     	; 0x55b0 <rtc_i2c_stop+0x2f2>
    5592:	88 ec       	ldi	r24, 0xC8	; 200
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	9d 83       	std	Y+5, r25	; 0x05
    5598:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    559a:	8c 81       	ldd	r24, Y+4	; 0x04
    559c:	9d 81       	ldd	r25, Y+5	; 0x05
    559e:	01 97       	sbiw	r24, 0x01	; 1
    55a0:	f1 f7       	brne	.-4      	; 0x559e <rtc_i2c_stop+0x2e0>
    55a2:	9d 83       	std	Y+5, r25	; 0x05
    55a4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55a6:	8e 81       	ldd	r24, Y+6	; 0x06
    55a8:	9f 81       	ldd	r25, Y+7	; 0x07
    55aa:	01 97       	sbiw	r24, 0x01	; 1
    55ac:	9f 83       	std	Y+7, r25	; 0x07
    55ae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55b0:	8e 81       	ldd	r24, Y+6	; 0x06
    55b2:	9f 81       	ldd	r25, Y+7	; 0x07
    55b4:	00 97       	sbiw	r24, 0x00	; 0
    55b6:	69 f7       	brne	.-38     	; 0x5592 <rtc_i2c_stop+0x2d4>
    55b8:	24 c0       	rjmp	.+72     	; 0x5602 <rtc_i2c_stop+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ba:	68 85       	ldd	r22, Y+8	; 0x08
    55bc:	79 85       	ldd	r23, Y+9	; 0x09
    55be:	8a 85       	ldd	r24, Y+10	; 0x0a
    55c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    55c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55c6:	dc 01       	movw	r26, r24
    55c8:	cb 01       	movw	r24, r22
    55ca:	9f 83       	std	Y+7, r25	; 0x07
    55cc:	8e 83       	std	Y+6, r24	; 0x06
    55ce:	8e 81       	ldd	r24, Y+6	; 0x06
    55d0:	9f 81       	ldd	r25, Y+7	; 0x07
    55d2:	9b 83       	std	Y+3, r25	; 0x03
    55d4:	8a 83       	std	Y+2, r24	; 0x02
    55d6:	8a 81       	ldd	r24, Y+2	; 0x02
    55d8:	9b 81       	ldd	r25, Y+3	; 0x03
    55da:	01 97       	sbiw	r24, 0x01	; 1
    55dc:	f1 f7       	brne	.-4      	; 0x55da <rtc_i2c_stop+0x31c>
    55de:	9b 83       	std	Y+3, r25	; 0x03
    55e0:	8a 83       	std	Y+2, r24	; 0x02
    55e2:	0f c0       	rjmp	.+30     	; 0x5602 <rtc_i2c_stop+0x344>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    55e4:	69 89       	ldd	r22, Y+17	; 0x11
    55e6:	7a 89       	ldd	r23, Y+18	; 0x12
    55e8:	8b 89       	ldd	r24, Y+19	; 0x13
    55ea:	9c 89       	ldd	r25, Y+20	; 0x14
    55ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f0:	dc 01       	movw	r26, r24
    55f2:	cb 01       	movw	r24, r22
    55f4:	88 8b       	std	Y+16, r24	; 0x10
    55f6:	88 89       	ldd	r24, Y+16	; 0x10
    55f8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	8a 95       	dec	r24
    55fe:	f1 f7       	brne	.-4      	; 0x55fc <rtc_i2c_stop+0x33e>
    5600:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    5602:	e0 96       	adiw	r28, 0x30	; 48
    5604:	0f b6       	in	r0, 0x3f	; 63
    5606:	f8 94       	cli
    5608:	de bf       	out	0x3e, r29	; 62
    560a:	0f be       	out	0x3f, r0	; 63
    560c:	cd bf       	out	0x3d, r28	; 61
    560e:	cf 91       	pop	r28
    5610:	df 91       	pop	r29
    5612:	08 95       	ret

00005614 <rtc_i2c_write>:

void rtc_i2c_write(uint8_t data)
{
    5614:	df 93       	push	r29
    5616:	cf 93       	push	r28
    5618:	cd b7       	in	r28, 0x3d	; 61
    561a:	de b7       	in	r29, 0x3e	; 62
    561c:	e2 97       	sbiw	r28, 0x32	; 50
    561e:	0f b6       	in	r0, 0x3f	; 63
    5620:	f8 94       	cli
    5622:	de bf       	out	0x3e, r29	; 62
    5624:	0f be       	out	0x3f, r0	; 63
    5626:	cd bf       	out	0x3d, r28	; 61
    5628:	8a ab       	std	Y+50, r24	; 0x32
    uint8_t i;
    
    for (i = 0; i < 8; i++) {
    562a:	19 aa       	std	Y+49, r1	; 0x31
    562c:	eb c0       	rjmp	.+470    	; 0x5804 <rtc_i2c_write+0x1f0>
        // Set SCL low
        PORTC &= ~(1 << I2C_SCL_PIN);
    562e:	a5 e3       	ldi	r26, 0x35	; 53
    5630:	b0 e0       	ldi	r27, 0x00	; 0
    5632:	e5 e3       	ldi	r30, 0x35	; 53
    5634:	f0 e0       	ldi	r31, 0x00	; 0
    5636:	80 81       	ld	r24, Z
    5638:	8e 7f       	andi	r24, 0xFE	; 254
    563a:	8c 93       	st	X, r24
        
        // Set SDA according to bit
        if (data & 0x80) {
    563c:	8a a9       	ldd	r24, Y+50	; 0x32
    563e:	88 23       	and	r24, r24
    5640:	44 f4       	brge	.+16     	; 0x5652 <rtc_i2c_write+0x3e>
            PORTC |= (1 << I2C_SDA_PIN);
    5642:	a5 e3       	ldi	r26, 0x35	; 53
    5644:	b0 e0       	ldi	r27, 0x00	; 0
    5646:	e5 e3       	ldi	r30, 0x35	; 53
    5648:	f0 e0       	ldi	r31, 0x00	; 0
    564a:	80 81       	ld	r24, Z
    564c:	82 60       	ori	r24, 0x02	; 2
    564e:	8c 93       	st	X, r24
    5650:	07 c0       	rjmp	.+14     	; 0x5660 <rtc_i2c_write+0x4c>
        } else {
            PORTC &= ~(1 << I2C_SDA_PIN);
    5652:	a5 e3       	ldi	r26, 0x35	; 53
    5654:	b0 e0       	ldi	r27, 0x00	; 0
    5656:	e5 e3       	ldi	r30, 0x35	; 53
    5658:	f0 e0       	ldi	r31, 0x00	; 0
    565a:	80 81       	ld	r24, Z
    565c:	8d 7f       	andi	r24, 0xFD	; 253
    565e:	8c 93       	st	X, r24
        }
        
        // Set SCL high
        PORTC |= (1 << I2C_SCL_PIN);
    5660:	a5 e3       	ldi	r26, 0x35	; 53
    5662:	b0 e0       	ldi	r27, 0x00	; 0
    5664:	e5 e3       	ldi	r30, 0x35	; 53
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	80 81       	ld	r24, Z
    566a:	81 60       	ori	r24, 0x01	; 1
    566c:	8c 93       	st	X, r24
    566e:	80 e0       	ldi	r24, 0x00	; 0
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	a0 ea       	ldi	r26, 0xA0	; 160
    5674:	b0 e4       	ldi	r27, 0x40	; 64
    5676:	8d a7       	std	Y+45, r24	; 0x2d
    5678:	9e a7       	std	Y+46, r25	; 0x2e
    567a:	af a7       	std	Y+47, r26	; 0x2f
    567c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    567e:	6d a5       	ldd	r22, Y+45	; 0x2d
    5680:	7e a5       	ldd	r23, Y+46	; 0x2e
    5682:	8f a5       	ldd	r24, Y+47	; 0x2f
    5684:	98 a9       	ldd	r25, Y+48	; 0x30
    5686:	2b ea       	ldi	r18, 0xAB	; 171
    5688:	3a ea       	ldi	r19, 0xAA	; 170
    568a:	4a e2       	ldi	r20, 0x2A	; 42
    568c:	50 e4       	ldi	r21, 0x40	; 64
    568e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	89 a7       	std	Y+41, r24	; 0x29
    5698:	9a a7       	std	Y+42, r25	; 0x2a
    569a:	ab a7       	std	Y+43, r26	; 0x2b
    569c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    569e:	69 a5       	ldd	r22, Y+41	; 0x29
    56a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    56a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    56a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	40 e8       	ldi	r20, 0x80	; 128
    56ac:	5f e3       	ldi	r21, 0x3F	; 63
    56ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56b2:	88 23       	and	r24, r24
    56b4:	1c f4       	brge	.+6      	; 0x56bc <rtc_i2c_write+0xa8>
		__ticks = 1;
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	88 a7       	std	Y+40, r24	; 0x28
    56ba:	91 c0       	rjmp	.+290    	; 0x57de <rtc_i2c_write+0x1ca>
	else if (__tmp > 255)
    56bc:	69 a5       	ldd	r22, Y+41	; 0x29
    56be:	7a a5       	ldd	r23, Y+42	; 0x2a
    56c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    56c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    56c4:	20 e0       	ldi	r18, 0x00	; 0
    56c6:	30 e0       	ldi	r19, 0x00	; 0
    56c8:	4f e7       	ldi	r20, 0x7F	; 127
    56ca:	53 e4       	ldi	r21, 0x43	; 67
    56cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56d0:	18 16       	cp	r1, r24
    56d2:	0c f0       	brlt	.+2      	; 0x56d6 <rtc_i2c_write+0xc2>
    56d4:	7b c0       	rjmp	.+246    	; 0x57cc <rtc_i2c_write+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    56d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    56d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    56da:	8f a5       	ldd	r24, Y+47	; 0x2f
    56dc:	98 a9       	ldd	r25, Y+48	; 0x30
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	4a e7       	ldi	r20, 0x7A	; 122
    56e4:	54 e4       	ldi	r21, 0x44	; 68
    56e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	8c a3       	std	Y+36, r24	; 0x24
    56f0:	9d a3       	std	Y+37, r25	; 0x25
    56f2:	ae a3       	std	Y+38, r26	; 0x26
    56f4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56f6:	6c a1       	ldd	r22, Y+36	; 0x24
    56f8:	7d a1       	ldd	r23, Y+37	; 0x25
    56fa:	8e a1       	ldd	r24, Y+38	; 0x26
    56fc:	9f a1       	ldd	r25, Y+39	; 0x27
    56fe:	20 e0       	ldi	r18, 0x00	; 0
    5700:	30 e0       	ldi	r19, 0x00	; 0
    5702:	4a ef       	ldi	r20, 0xFA	; 250
    5704:	54 e4       	ldi	r21, 0x44	; 68
    5706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    570a:	dc 01       	movw	r26, r24
    570c:	cb 01       	movw	r24, r22
    570e:	88 a3       	std	Y+32, r24	; 0x20
    5710:	99 a3       	std	Y+33, r25	; 0x21
    5712:	aa a3       	std	Y+34, r26	; 0x22
    5714:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5716:	68 a1       	ldd	r22, Y+32	; 0x20
    5718:	79 a1       	ldd	r23, Y+33	; 0x21
    571a:	8a a1       	ldd	r24, Y+34	; 0x22
    571c:	9b a1       	ldd	r25, Y+35	; 0x23
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	40 e8       	ldi	r20, 0x80	; 128
    5724:	5f e3       	ldi	r21, 0x3F	; 63
    5726:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    572a:	88 23       	and	r24, r24
    572c:	2c f4       	brge	.+10     	; 0x5738 <rtc_i2c_write+0x124>
		__ticks = 1;
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	9f 8f       	std	Y+31, r25	; 0x1f
    5734:	8e 8f       	std	Y+30, r24	; 0x1e
    5736:	3f c0       	rjmp	.+126    	; 0x57b6 <rtc_i2c_write+0x1a2>
	else if (__tmp > 65535)
    5738:	68 a1       	ldd	r22, Y+32	; 0x20
    573a:	79 a1       	ldd	r23, Y+33	; 0x21
    573c:	8a a1       	ldd	r24, Y+34	; 0x22
    573e:	9b a1       	ldd	r25, Y+35	; 0x23
    5740:	20 e0       	ldi	r18, 0x00	; 0
    5742:	3f ef       	ldi	r19, 0xFF	; 255
    5744:	4f e7       	ldi	r20, 0x7F	; 127
    5746:	57 e4       	ldi	r21, 0x47	; 71
    5748:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    574c:	18 16       	cp	r1, r24
    574e:	4c f5       	brge	.+82     	; 0x57a2 <rtc_i2c_write+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5750:	6c a1       	ldd	r22, Y+36	; 0x24
    5752:	7d a1       	ldd	r23, Y+37	; 0x25
    5754:	8e a1       	ldd	r24, Y+38	; 0x26
    5756:	9f a1       	ldd	r25, Y+39	; 0x27
    5758:	20 e0       	ldi	r18, 0x00	; 0
    575a:	30 e0       	ldi	r19, 0x00	; 0
    575c:	40 e2       	ldi	r20, 0x20	; 32
    575e:	51 e4       	ldi	r21, 0x41	; 65
    5760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5764:	dc 01       	movw	r26, r24
    5766:	cb 01       	movw	r24, r22
    5768:	bc 01       	movw	r22, r24
    576a:	cd 01       	movw	r24, r26
    576c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5770:	dc 01       	movw	r26, r24
    5772:	cb 01       	movw	r24, r22
    5774:	9f 8f       	std	Y+31, r25	; 0x1f
    5776:	8e 8f       	std	Y+30, r24	; 0x1e
    5778:	0f c0       	rjmp	.+30     	; 0x5798 <rtc_i2c_write+0x184>
    577a:	88 ec       	ldi	r24, 0xC8	; 200
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	9d 8f       	std	Y+29, r25	; 0x1d
    5780:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5782:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5784:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5786:	01 97       	sbiw	r24, 0x01	; 1
    5788:	f1 f7       	brne	.-4      	; 0x5786 <rtc_i2c_write+0x172>
    578a:	9d 8f       	std	Y+29, r25	; 0x1d
    578c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    578e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5790:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5792:	01 97       	sbiw	r24, 0x01	; 1
    5794:	9f 8f       	std	Y+31, r25	; 0x1f
    5796:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    579a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    579c:	00 97       	sbiw	r24, 0x00	; 0
    579e:	69 f7       	brne	.-38     	; 0x577a <rtc_i2c_write+0x166>
    57a0:	24 c0       	rjmp	.+72     	; 0x57ea <rtc_i2c_write+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57a2:	68 a1       	ldd	r22, Y+32	; 0x20
    57a4:	79 a1       	ldd	r23, Y+33	; 0x21
    57a6:	8a a1       	ldd	r24, Y+34	; 0x22
    57a8:	9b a1       	ldd	r25, Y+35	; 0x23
    57aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	9f 8f       	std	Y+31, r25	; 0x1f
    57b4:	8e 8f       	std	Y+30, r24	; 0x1e
    57b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    57b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    57ba:	9b 8f       	std	Y+27, r25	; 0x1b
    57bc:	8a 8f       	std	Y+26, r24	; 0x1a
    57be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    57c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    57c2:	01 97       	sbiw	r24, 0x01	; 1
    57c4:	f1 f7       	brne	.-4      	; 0x57c2 <rtc_i2c_write+0x1ae>
    57c6:	9b 8f       	std	Y+27, r25	; 0x1b
    57c8:	8a 8f       	std	Y+26, r24	; 0x1a
    57ca:	0f c0       	rjmp	.+30     	; 0x57ea <rtc_i2c_write+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    57cc:	69 a5       	ldd	r22, Y+41	; 0x29
    57ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    57d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    57d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    57d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d8:	dc 01       	movw	r26, r24
    57da:	cb 01       	movw	r24, r22
    57dc:	88 a7       	std	Y+40, r24	; 0x28
    57de:	88 a5       	ldd	r24, Y+40	; 0x28
    57e0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    57e2:	89 8d       	ldd	r24, Y+25	; 0x19
    57e4:	8a 95       	dec	r24
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <rtc_i2c_write+0x1d0>
    57e8:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(5);
        
        // Set SCL low
        PORTC &= ~(1 << I2C_SCL_PIN);
    57ea:	a5 e3       	ldi	r26, 0x35	; 53
    57ec:	b0 e0       	ldi	r27, 0x00	; 0
    57ee:	e5 e3       	ldi	r30, 0x35	; 53
    57f0:	f0 e0       	ldi	r31, 0x00	; 0
    57f2:	80 81       	ld	r24, Z
    57f4:	8e 7f       	andi	r24, 0xFE	; 254
    57f6:	8c 93       	st	X, r24
        
        data <<= 1;
    57f8:	8a a9       	ldd	r24, Y+50	; 0x32
    57fa:	88 0f       	add	r24, r24
    57fc:	8a ab       	std	Y+50, r24	; 0x32

void rtc_i2c_write(uint8_t data)
{
    uint8_t i;
    
    for (i = 0; i < 8; i++) {
    57fe:	89 a9       	ldd	r24, Y+49	; 0x31
    5800:	8f 5f       	subi	r24, 0xFF	; 255
    5802:	89 ab       	std	Y+49, r24	; 0x31
    5804:	89 a9       	ldd	r24, Y+49	; 0x31
    5806:	88 30       	cpi	r24, 0x08	; 8
    5808:	08 f4       	brcc	.+2      	; 0x580c <rtc_i2c_write+0x1f8>
    580a:	11 cf       	rjmp	.-478    	; 0x562e <rtc_i2c_write+0x1a>
        
        data <<= 1;
    }
    
    // Read ACK
    PORTC &= ~(1 << I2C_SCL_PIN);
    580c:	a5 e3       	ldi	r26, 0x35	; 53
    580e:	b0 e0       	ldi	r27, 0x00	; 0
    5810:	e5 e3       	ldi	r30, 0x35	; 53
    5812:	f0 e0       	ldi	r31, 0x00	; 0
    5814:	80 81       	ld	r24, Z
    5816:	8e 7f       	andi	r24, 0xFE	; 254
    5818:	8c 93       	st	X, r24
    DDRC &= ~(1 << I2C_SDA_PIN); // Set SDA as input
    581a:	a4 e3       	ldi	r26, 0x34	; 52
    581c:	b0 e0       	ldi	r27, 0x00	; 0
    581e:	e4 e3       	ldi	r30, 0x34	; 52
    5820:	f0 e0       	ldi	r31, 0x00	; 0
    5822:	80 81       	ld	r24, Z
    5824:	8d 7f       	andi	r24, 0xFD	; 253
    5826:	8c 93       	st	X, r24
    PORTC |= (1 << I2C_SCL_PIN);
    5828:	a5 e3       	ldi	r26, 0x35	; 53
    582a:	b0 e0       	ldi	r27, 0x00	; 0
    582c:	e5 e3       	ldi	r30, 0x35	; 53
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	80 81       	ld	r24, Z
    5832:	81 60       	ori	r24, 0x01	; 1
    5834:	8c 93       	st	X, r24
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	a0 ea       	ldi	r26, 0xA0	; 160
    583c:	b0 e4       	ldi	r27, 0x40	; 64
    583e:	8d 8b       	std	Y+21, r24	; 0x15
    5840:	9e 8b       	std	Y+22, r25	; 0x16
    5842:	af 8b       	std	Y+23, r26	; 0x17
    5844:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5846:	6d 89       	ldd	r22, Y+21	; 0x15
    5848:	7e 89       	ldd	r23, Y+22	; 0x16
    584a:	8f 89       	ldd	r24, Y+23	; 0x17
    584c:	98 8d       	ldd	r25, Y+24	; 0x18
    584e:	2b ea       	ldi	r18, 0xAB	; 171
    5850:	3a ea       	ldi	r19, 0xAA	; 170
    5852:	4a e2       	ldi	r20, 0x2A	; 42
    5854:	50 e4       	ldi	r21, 0x40	; 64
    5856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    585a:	dc 01       	movw	r26, r24
    585c:	cb 01       	movw	r24, r22
    585e:	89 8b       	std	Y+17, r24	; 0x11
    5860:	9a 8b       	std	Y+18, r25	; 0x12
    5862:	ab 8b       	std	Y+19, r26	; 0x13
    5864:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5866:	69 89       	ldd	r22, Y+17	; 0x11
    5868:	7a 89       	ldd	r23, Y+18	; 0x12
    586a:	8b 89       	ldd	r24, Y+19	; 0x13
    586c:	9c 89       	ldd	r25, Y+20	; 0x14
    586e:	20 e0       	ldi	r18, 0x00	; 0
    5870:	30 e0       	ldi	r19, 0x00	; 0
    5872:	40 e8       	ldi	r20, 0x80	; 128
    5874:	5f e3       	ldi	r21, 0x3F	; 63
    5876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    587a:	88 23       	and	r24, r24
    587c:	1c f4       	brge	.+6      	; 0x5884 <rtc_i2c_write+0x270>
		__ticks = 1;
    587e:	81 e0       	ldi	r24, 0x01	; 1
    5880:	88 8b       	std	Y+16, r24	; 0x10
    5882:	91 c0       	rjmp	.+290    	; 0x59a6 <rtc_i2c_write+0x392>
	else if (__tmp > 255)
    5884:	69 89       	ldd	r22, Y+17	; 0x11
    5886:	7a 89       	ldd	r23, Y+18	; 0x12
    5888:	8b 89       	ldd	r24, Y+19	; 0x13
    588a:	9c 89       	ldd	r25, Y+20	; 0x14
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	4f e7       	ldi	r20, 0x7F	; 127
    5892:	53 e4       	ldi	r21, 0x43	; 67
    5894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5898:	18 16       	cp	r1, r24
    589a:	0c f0       	brlt	.+2      	; 0x589e <rtc_i2c_write+0x28a>
    589c:	7b c0       	rjmp	.+246    	; 0x5994 <rtc_i2c_write+0x380>
	{
		_delay_ms(__us / 1000.0);
    589e:	6d 89       	ldd	r22, Y+21	; 0x15
    58a0:	7e 89       	ldd	r23, Y+22	; 0x16
    58a2:	8f 89       	ldd	r24, Y+23	; 0x17
    58a4:	98 8d       	ldd	r25, Y+24	; 0x18
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	4a e7       	ldi	r20, 0x7A	; 122
    58ac:	54 e4       	ldi	r21, 0x44	; 68
    58ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	8c 87       	std	Y+12, r24	; 0x0c
    58b8:	9d 87       	std	Y+13, r25	; 0x0d
    58ba:	ae 87       	std	Y+14, r26	; 0x0e
    58bc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58be:	6c 85       	ldd	r22, Y+12	; 0x0c
    58c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    58c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    58c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    58c6:	20 e0       	ldi	r18, 0x00	; 0
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	4a ef       	ldi	r20, 0xFA	; 250
    58cc:	54 e4       	ldi	r21, 0x44	; 68
    58ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d2:	dc 01       	movw	r26, r24
    58d4:	cb 01       	movw	r24, r22
    58d6:	88 87       	std	Y+8, r24	; 0x08
    58d8:	99 87       	std	Y+9, r25	; 0x09
    58da:	aa 87       	std	Y+10, r26	; 0x0a
    58dc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    58de:	68 85       	ldd	r22, Y+8	; 0x08
    58e0:	79 85       	ldd	r23, Y+9	; 0x09
    58e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    58e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	40 e8       	ldi	r20, 0x80	; 128
    58ec:	5f e3       	ldi	r21, 0x3F	; 63
    58ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58f2:	88 23       	and	r24, r24
    58f4:	2c f4       	brge	.+10     	; 0x5900 <rtc_i2c_write+0x2ec>
		__ticks = 1;
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	9f 83       	std	Y+7, r25	; 0x07
    58fc:	8e 83       	std	Y+6, r24	; 0x06
    58fe:	3f c0       	rjmp	.+126    	; 0x597e <rtc_i2c_write+0x36a>
	else if (__tmp > 65535)
    5900:	68 85       	ldd	r22, Y+8	; 0x08
    5902:	79 85       	ldd	r23, Y+9	; 0x09
    5904:	8a 85       	ldd	r24, Y+10	; 0x0a
    5906:	9b 85       	ldd	r25, Y+11	; 0x0b
    5908:	20 e0       	ldi	r18, 0x00	; 0
    590a:	3f ef       	ldi	r19, 0xFF	; 255
    590c:	4f e7       	ldi	r20, 0x7F	; 127
    590e:	57 e4       	ldi	r21, 0x47	; 71
    5910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5914:	18 16       	cp	r1, r24
    5916:	4c f5       	brge	.+82     	; 0x596a <rtc_i2c_write+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5918:	6c 85       	ldd	r22, Y+12	; 0x0c
    591a:	7d 85       	ldd	r23, Y+13	; 0x0d
    591c:	8e 85       	ldd	r24, Y+14	; 0x0e
    591e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5920:	20 e0       	ldi	r18, 0x00	; 0
    5922:	30 e0       	ldi	r19, 0x00	; 0
    5924:	40 e2       	ldi	r20, 0x20	; 32
    5926:	51 e4       	ldi	r21, 0x41	; 65
    5928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    592c:	dc 01       	movw	r26, r24
    592e:	cb 01       	movw	r24, r22
    5930:	bc 01       	movw	r22, r24
    5932:	cd 01       	movw	r24, r26
    5934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5938:	dc 01       	movw	r26, r24
    593a:	cb 01       	movw	r24, r22
    593c:	9f 83       	std	Y+7, r25	; 0x07
    593e:	8e 83       	std	Y+6, r24	; 0x06
    5940:	0f c0       	rjmp	.+30     	; 0x5960 <rtc_i2c_write+0x34c>
    5942:	88 ec       	ldi	r24, 0xC8	; 200
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	9d 83       	std	Y+5, r25	; 0x05
    5948:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    594a:	8c 81       	ldd	r24, Y+4	; 0x04
    594c:	9d 81       	ldd	r25, Y+5	; 0x05
    594e:	01 97       	sbiw	r24, 0x01	; 1
    5950:	f1 f7       	brne	.-4      	; 0x594e <rtc_i2c_write+0x33a>
    5952:	9d 83       	std	Y+5, r25	; 0x05
    5954:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5956:	8e 81       	ldd	r24, Y+6	; 0x06
    5958:	9f 81       	ldd	r25, Y+7	; 0x07
    595a:	01 97       	sbiw	r24, 0x01	; 1
    595c:	9f 83       	std	Y+7, r25	; 0x07
    595e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5960:	8e 81       	ldd	r24, Y+6	; 0x06
    5962:	9f 81       	ldd	r25, Y+7	; 0x07
    5964:	00 97       	sbiw	r24, 0x00	; 0
    5966:	69 f7       	brne	.-38     	; 0x5942 <rtc_i2c_write+0x32e>
    5968:	24 c0       	rjmp	.+72     	; 0x59b2 <rtc_i2c_write+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    596a:	68 85       	ldd	r22, Y+8	; 0x08
    596c:	79 85       	ldd	r23, Y+9	; 0x09
    596e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5970:	9b 85       	ldd	r25, Y+11	; 0x0b
    5972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5976:	dc 01       	movw	r26, r24
    5978:	cb 01       	movw	r24, r22
    597a:	9f 83       	std	Y+7, r25	; 0x07
    597c:	8e 83       	std	Y+6, r24	; 0x06
    597e:	8e 81       	ldd	r24, Y+6	; 0x06
    5980:	9f 81       	ldd	r25, Y+7	; 0x07
    5982:	9b 83       	std	Y+3, r25	; 0x03
    5984:	8a 83       	std	Y+2, r24	; 0x02
    5986:	8a 81       	ldd	r24, Y+2	; 0x02
    5988:	9b 81       	ldd	r25, Y+3	; 0x03
    598a:	01 97       	sbiw	r24, 0x01	; 1
    598c:	f1 f7       	brne	.-4      	; 0x598a <rtc_i2c_write+0x376>
    598e:	9b 83       	std	Y+3, r25	; 0x03
    5990:	8a 83       	std	Y+2, r24	; 0x02
    5992:	0f c0       	rjmp	.+30     	; 0x59b2 <rtc_i2c_write+0x39e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5994:	69 89       	ldd	r22, Y+17	; 0x11
    5996:	7a 89       	ldd	r23, Y+18	; 0x12
    5998:	8b 89       	ldd	r24, Y+19	; 0x13
    599a:	9c 89       	ldd	r25, Y+20	; 0x14
    599c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59a0:	dc 01       	movw	r26, r24
    59a2:	cb 01       	movw	r24, r22
    59a4:	88 8b       	std	Y+16, r24	; 0x10
    59a6:	88 89       	ldd	r24, Y+16	; 0x10
    59a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    59aa:	89 81       	ldd	r24, Y+1	; 0x01
    59ac:	8a 95       	dec	r24
    59ae:	f1 f7       	brne	.-4      	; 0x59ac <rtc_i2c_write+0x398>
    59b0:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    PORTC &= ~(1 << I2C_SCL_PIN);
    59b2:	a5 e3       	ldi	r26, 0x35	; 53
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	e5 e3       	ldi	r30, 0x35	; 53
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	80 81       	ld	r24, Z
    59bc:	8e 7f       	andi	r24, 0xFE	; 254
    59be:	8c 93       	st	X, r24
    DDRC |= (1 << I2C_SDA_PIN); // Set SDA as output
    59c0:	a4 e3       	ldi	r26, 0x34	; 52
    59c2:	b0 e0       	ldi	r27, 0x00	; 0
    59c4:	e4 e3       	ldi	r30, 0x34	; 52
    59c6:	f0 e0       	ldi	r31, 0x00	; 0
    59c8:	80 81       	ld	r24, Z
    59ca:	82 60       	ori	r24, 0x02	; 2
    59cc:	8c 93       	st	X, r24
}
    59ce:	e2 96       	adiw	r28, 0x32	; 50
    59d0:	0f b6       	in	r0, 0x3f	; 63
    59d2:	f8 94       	cli
    59d4:	de bf       	out	0x3e, r29	; 62
    59d6:	0f be       	out	0x3f, r0	; 63
    59d8:	cd bf       	out	0x3d, r28	; 61
    59da:	cf 91       	pop	r28
    59dc:	df 91       	pop	r29
    59de:	08 95       	ret

000059e0 <rtc_i2c_read>:

uint8_t rtc_i2c_read(bool ack)
{
    59e0:	0f 93       	push	r16
    59e2:	1f 93       	push	r17
    59e4:	df 93       	push	r29
    59e6:	cf 93       	push	r28
    59e8:	cd b7       	in	r28, 0x3d	; 61
    59ea:	de b7       	in	r29, 0x3e	; 62
    59ec:	cb 54       	subi	r28, 0x4B	; 75
    59ee:	d0 40       	sbci	r29, 0x00	; 0
    59f0:	0f b6       	in	r0, 0x3f	; 63
    59f2:	f8 94       	cli
    59f4:	de bf       	out	0x3e, r29	; 62
    59f6:	0f be       	out	0x3f, r0	; 63
    59f8:	cd bf       	out	0x3d, r28	; 61
    59fa:	fe 01       	movw	r30, r28
    59fc:	e5 5b       	subi	r30, 0xB5	; 181
    59fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5a00:	80 83       	st	Z, r24
    uint8_t data = 0;
    5a02:	fe 01       	movw	r30, r28
    5a04:	e6 5b       	subi	r30, 0xB6	; 182
    5a06:	ff 4f       	sbci	r31, 0xFF	; 255
    5a08:	10 82       	st	Z, r1
    uint8_t i;
    
    DDRC &= ~(1 << I2C_SDA_PIN); // Set SDA as input
    5a0a:	a4 e3       	ldi	r26, 0x34	; 52
    5a0c:	b0 e0       	ldi	r27, 0x00	; 0
    5a0e:	e4 e3       	ldi	r30, 0x34	; 52
    5a10:	f0 e0       	ldi	r31, 0x00	; 0
    5a12:	80 81       	ld	r24, Z
    5a14:	8d 7f       	andi	r24, 0xFD	; 253
    5a16:	8c 93       	st	X, r24
    
    for (i = 0; i < 8; i++) {
    5a18:	fe 01       	movw	r30, r28
    5a1a:	e7 5b       	subi	r30, 0xB7	; 183
    5a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1e:	10 82       	st	Z, r1
    5a20:	d4 c1       	rjmp	.+936    	; 0x5dca <rtc_i2c_read+0x3ea>
        // Set SCL low
        PORTC &= ~(1 << I2C_SCL_PIN);
    5a22:	a5 e3       	ldi	r26, 0x35	; 53
    5a24:	b0 e0       	ldi	r27, 0x00	; 0
    5a26:	e5 e3       	ldi	r30, 0x35	; 53
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	80 81       	ld	r24, Z
    5a2c:	8e 7f       	andi	r24, 0xFE	; 254
    5a2e:	8c 93       	st	X, r24
    5a30:	fe 01       	movw	r30, r28
    5a32:	eb 5b       	subi	r30, 0xBB	; 187
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	a0 ea       	ldi	r26, 0xA0	; 160
    5a3c:	b0 e4       	ldi	r27, 0x40	; 64
    5a3e:	80 83       	st	Z, r24
    5a40:	91 83       	std	Z+1, r25	; 0x01
    5a42:	a2 83       	std	Z+2, r26	; 0x02
    5a44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5a46:	8e 01       	movw	r16, r28
    5a48:	0f 5b       	subi	r16, 0xBF	; 191
    5a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a4c:	fe 01       	movw	r30, r28
    5a4e:	eb 5b       	subi	r30, 0xBB	; 187
    5a50:	ff 4f       	sbci	r31, 0xFF	; 255
    5a52:	60 81       	ld	r22, Z
    5a54:	71 81       	ldd	r23, Z+1	; 0x01
    5a56:	82 81       	ldd	r24, Z+2	; 0x02
    5a58:	93 81       	ldd	r25, Z+3	; 0x03
    5a5a:	2b ea       	ldi	r18, 0xAB	; 171
    5a5c:	3a ea       	ldi	r19, 0xAA	; 170
    5a5e:	4a e2       	ldi	r20, 0x2A	; 42
    5a60:	50 e4       	ldi	r21, 0x40	; 64
    5a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	80 83       	st	Z, r24
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	a2 83       	std	Z+2, r26	; 0x02
    5a72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a74:	fe 01       	movw	r30, r28
    5a76:	ef 5b       	subi	r30, 0xBF	; 191
    5a78:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7a:	60 81       	ld	r22, Z
    5a7c:	71 81       	ldd	r23, Z+1	; 0x01
    5a7e:	82 81       	ldd	r24, Z+2	; 0x02
    5a80:	93 81       	ldd	r25, Z+3	; 0x03
    5a82:	20 e0       	ldi	r18, 0x00	; 0
    5a84:	30 e0       	ldi	r19, 0x00	; 0
    5a86:	40 e8       	ldi	r20, 0x80	; 128
    5a88:	5f e3       	ldi	r21, 0x3F	; 63
    5a8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a8e:	88 23       	and	r24, r24
    5a90:	34 f4       	brge	.+12     	; 0x5a9e <rtc_i2c_read+0xbe>
		__ticks = 1;
    5a92:	81 e0       	ldi	r24, 0x01	; 1
    5a94:	fe 01       	movw	r30, r28
    5a96:	e0 5c       	subi	r30, 0xC0	; 192
    5a98:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9a:	80 83       	st	Z, r24
    5a9c:	9d c0       	rjmp	.+314    	; 0x5bd8 <rtc_i2c_read+0x1f8>
	else if (__tmp > 255)
    5a9e:	fe 01       	movw	r30, r28
    5aa0:	ef 5b       	subi	r30, 0xBF	; 191
    5aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa4:	60 81       	ld	r22, Z
    5aa6:	71 81       	ldd	r23, Z+1	; 0x01
    5aa8:	82 81       	ldd	r24, Z+2	; 0x02
    5aaa:	93 81       	ldd	r25, Z+3	; 0x03
    5aac:	20 e0       	ldi	r18, 0x00	; 0
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	4f e7       	ldi	r20, 0x7F	; 127
    5ab2:	53 e4       	ldi	r21, 0x43	; 67
    5ab4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ab8:	18 16       	cp	r1, r24
    5aba:	0c f0       	brlt	.+2      	; 0x5abe <rtc_i2c_read+0xde>
    5abc:	7e c0       	rjmp	.+252    	; 0x5bba <rtc_i2c_read+0x1da>
	{
		_delay_ms(__us / 1000.0);
    5abe:	fe 01       	movw	r30, r28
    5ac0:	eb 5b       	subi	r30, 0xBB	; 187
    5ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac4:	60 81       	ld	r22, Z
    5ac6:	71 81       	ldd	r23, Z+1	; 0x01
    5ac8:	82 81       	ldd	r24, Z+2	; 0x02
    5aca:	93 81       	ldd	r25, Z+3	; 0x03
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	4a e7       	ldi	r20, 0x7A	; 122
    5ad2:	54 e4       	ldi	r21, 0x44	; 68
    5ad4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	8c af       	std	Y+60, r24	; 0x3c
    5ade:	9d af       	std	Y+61, r25	; 0x3d
    5ae0:	ae af       	std	Y+62, r26	; 0x3e
    5ae2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae4:	6c ad       	ldd	r22, Y+60	; 0x3c
    5ae6:	7d ad       	ldd	r23, Y+61	; 0x3d
    5ae8:	8e ad       	ldd	r24, Y+62	; 0x3e
    5aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    5aec:	20 e0       	ldi	r18, 0x00	; 0
    5aee:	30 e0       	ldi	r19, 0x00	; 0
    5af0:	4a ef       	ldi	r20, 0xFA	; 250
    5af2:	54 e4       	ldi	r21, 0x44	; 68
    5af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af8:	dc 01       	movw	r26, r24
    5afa:	cb 01       	movw	r24, r22
    5afc:	88 af       	std	Y+56, r24	; 0x38
    5afe:	99 af       	std	Y+57, r25	; 0x39
    5b00:	aa af       	std	Y+58, r26	; 0x3a
    5b02:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    5b04:	68 ad       	ldd	r22, Y+56	; 0x38
    5b06:	79 ad       	ldd	r23, Y+57	; 0x39
    5b08:	8a ad       	ldd	r24, Y+58	; 0x3a
    5b0a:	9b ad       	ldd	r25, Y+59	; 0x3b
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	40 e8       	ldi	r20, 0x80	; 128
    5b12:	5f e3       	ldi	r21, 0x3F	; 63
    5b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b18:	88 23       	and	r24, r24
    5b1a:	2c f4       	brge	.+10     	; 0x5b26 <rtc_i2c_read+0x146>
		__ticks = 1;
    5b1c:	81 e0       	ldi	r24, 0x01	; 1
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	9f ab       	std	Y+55, r25	; 0x37
    5b22:	8e ab       	std	Y+54, r24	; 0x36
    5b24:	3f c0       	rjmp	.+126    	; 0x5ba4 <rtc_i2c_read+0x1c4>
	else if (__tmp > 65535)
    5b26:	68 ad       	ldd	r22, Y+56	; 0x38
    5b28:	79 ad       	ldd	r23, Y+57	; 0x39
    5b2a:	8a ad       	ldd	r24, Y+58	; 0x3a
    5b2c:	9b ad       	ldd	r25, Y+59	; 0x3b
    5b2e:	20 e0       	ldi	r18, 0x00	; 0
    5b30:	3f ef       	ldi	r19, 0xFF	; 255
    5b32:	4f e7       	ldi	r20, 0x7F	; 127
    5b34:	57 e4       	ldi	r21, 0x47	; 71
    5b36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b3a:	18 16       	cp	r1, r24
    5b3c:	4c f5       	brge	.+82     	; 0x5b90 <rtc_i2c_read+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b40:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b42:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b46:	20 e0       	ldi	r18, 0x00	; 0
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	40 e2       	ldi	r20, 0x20	; 32
    5b4c:	51 e4       	ldi	r21, 0x41	; 65
    5b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	bc 01       	movw	r22, r24
    5b58:	cd 01       	movw	r24, r26
    5b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b5e:	dc 01       	movw	r26, r24
    5b60:	cb 01       	movw	r24, r22
    5b62:	9f ab       	std	Y+55, r25	; 0x37
    5b64:	8e ab       	std	Y+54, r24	; 0x36
    5b66:	0f c0       	rjmp	.+30     	; 0x5b86 <rtc_i2c_read+0x1a6>
    5b68:	88 ec       	ldi	r24, 0xC8	; 200
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	9d ab       	std	Y+53, r25	; 0x35
    5b6e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b70:	8c a9       	ldd	r24, Y+52	; 0x34
    5b72:	9d a9       	ldd	r25, Y+53	; 0x35
    5b74:	01 97       	sbiw	r24, 0x01	; 1
    5b76:	f1 f7       	brne	.-4      	; 0x5b74 <rtc_i2c_read+0x194>
    5b78:	9d ab       	std	Y+53, r25	; 0x35
    5b7a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b7c:	8e a9       	ldd	r24, Y+54	; 0x36
    5b7e:	9f a9       	ldd	r25, Y+55	; 0x37
    5b80:	01 97       	sbiw	r24, 0x01	; 1
    5b82:	9f ab       	std	Y+55, r25	; 0x37
    5b84:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b86:	8e a9       	ldd	r24, Y+54	; 0x36
    5b88:	9f a9       	ldd	r25, Y+55	; 0x37
    5b8a:	00 97       	sbiw	r24, 0x00	; 0
    5b8c:	69 f7       	brne	.-38     	; 0x5b68 <rtc_i2c_read+0x188>
    5b8e:	2d c0       	rjmp	.+90     	; 0x5bea <rtc_i2c_read+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b90:	68 ad       	ldd	r22, Y+56	; 0x38
    5b92:	79 ad       	ldd	r23, Y+57	; 0x39
    5b94:	8a ad       	ldd	r24, Y+58	; 0x3a
    5b96:	9b ad       	ldd	r25, Y+59	; 0x3b
    5b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b9c:	dc 01       	movw	r26, r24
    5b9e:	cb 01       	movw	r24, r22
    5ba0:	9f ab       	std	Y+55, r25	; 0x37
    5ba2:	8e ab       	std	Y+54, r24	; 0x36
    5ba4:	8e a9       	ldd	r24, Y+54	; 0x36
    5ba6:	9f a9       	ldd	r25, Y+55	; 0x37
    5ba8:	9b ab       	std	Y+51, r25	; 0x33
    5baa:	8a ab       	std	Y+50, r24	; 0x32
    5bac:	8a a9       	ldd	r24, Y+50	; 0x32
    5bae:	9b a9       	ldd	r25, Y+51	; 0x33
    5bb0:	01 97       	sbiw	r24, 0x01	; 1
    5bb2:	f1 f7       	brne	.-4      	; 0x5bb0 <rtc_i2c_read+0x1d0>
    5bb4:	9b ab       	std	Y+51, r25	; 0x33
    5bb6:	8a ab       	std	Y+50, r24	; 0x32
    5bb8:	18 c0       	rjmp	.+48     	; 0x5bea <rtc_i2c_read+0x20a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5bba:	fe 01       	movw	r30, r28
    5bbc:	ef 5b       	subi	r30, 0xBF	; 191
    5bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc0:	60 81       	ld	r22, Z
    5bc2:	71 81       	ldd	r23, Z+1	; 0x01
    5bc4:	82 81       	ldd	r24, Z+2	; 0x02
    5bc6:	93 81       	ldd	r25, Z+3	; 0x03
    5bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bcc:	dc 01       	movw	r26, r24
    5bce:	cb 01       	movw	r24, r22
    5bd0:	fe 01       	movw	r30, r28
    5bd2:	e0 5c       	subi	r30, 0xC0	; 192
    5bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd6:	80 83       	st	Z, r24
    5bd8:	fe 01       	movw	r30, r28
    5bda:	e0 5c       	subi	r30, 0xC0	; 192
    5bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bde:	80 81       	ld	r24, Z
    5be0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5be2:	89 a9       	ldd	r24, Y+49	; 0x31
    5be4:	8a 95       	dec	r24
    5be6:	f1 f7       	brne	.-4      	; 0x5be4 <rtc_i2c_read+0x204>
    5be8:	89 ab       	std	Y+49, r24	; 0x31
        _delay_us(5);
        
        // Set SCL high
        PORTC |= (1 << I2C_SCL_PIN);
    5bea:	a5 e3       	ldi	r26, 0x35	; 53
    5bec:	b0 e0       	ldi	r27, 0x00	; 0
    5bee:	e5 e3       	ldi	r30, 0x35	; 53
    5bf0:	f0 e0       	ldi	r31, 0x00	; 0
    5bf2:	80 81       	ld	r24, Z
    5bf4:	81 60       	ori	r24, 0x01	; 1
    5bf6:	8c 93       	st	X, r24
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	a0 ea       	ldi	r26, 0xA0	; 160
    5bfe:	b0 e4       	ldi	r27, 0x40	; 64
    5c00:	8d a7       	std	Y+45, r24	; 0x2d
    5c02:	9e a7       	std	Y+46, r25	; 0x2e
    5c04:	af a7       	std	Y+47, r26	; 0x2f
    5c06:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5c08:	6d a5       	ldd	r22, Y+45	; 0x2d
    5c0a:	7e a5       	ldd	r23, Y+46	; 0x2e
    5c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    5c10:	2b ea       	ldi	r18, 0xAB	; 171
    5c12:	3a ea       	ldi	r19, 0xAA	; 170
    5c14:	4a e2       	ldi	r20, 0x2A	; 42
    5c16:	50 e4       	ldi	r21, 0x40	; 64
    5c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	cb 01       	movw	r24, r22
    5c20:	89 a7       	std	Y+41, r24	; 0x29
    5c22:	9a a7       	std	Y+42, r25	; 0x2a
    5c24:	ab a7       	std	Y+43, r26	; 0x2b
    5c26:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5c28:	69 a5       	ldd	r22, Y+41	; 0x29
    5c2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    5c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c30:	20 e0       	ldi	r18, 0x00	; 0
    5c32:	30 e0       	ldi	r19, 0x00	; 0
    5c34:	40 e8       	ldi	r20, 0x80	; 128
    5c36:	5f e3       	ldi	r21, 0x3F	; 63
    5c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c3c:	88 23       	and	r24, r24
    5c3e:	1c f4       	brge	.+6      	; 0x5c46 <rtc_i2c_read+0x266>
		__ticks = 1;
    5c40:	81 e0       	ldi	r24, 0x01	; 1
    5c42:	88 a7       	std	Y+40, r24	; 0x28
    5c44:	91 c0       	rjmp	.+290    	; 0x5d68 <rtc_i2c_read+0x388>
	else if (__tmp > 255)
    5c46:	69 a5       	ldd	r22, Y+41	; 0x29
    5c48:	7a a5       	ldd	r23, Y+42	; 0x2a
    5c4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c4e:	20 e0       	ldi	r18, 0x00	; 0
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	4f e7       	ldi	r20, 0x7F	; 127
    5c54:	53 e4       	ldi	r21, 0x43	; 67
    5c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c5a:	18 16       	cp	r1, r24
    5c5c:	0c f0       	brlt	.+2      	; 0x5c60 <rtc_i2c_read+0x280>
    5c5e:	7b c0       	rjmp	.+246    	; 0x5d56 <rtc_i2c_read+0x376>
	{
		_delay_ms(__us / 1000.0);
    5c60:	6d a5       	ldd	r22, Y+45	; 0x2d
    5c62:	7e a5       	ldd	r23, Y+46	; 0x2e
    5c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c66:	98 a9       	ldd	r25, Y+48	; 0x30
    5c68:	20 e0       	ldi	r18, 0x00	; 0
    5c6a:	30 e0       	ldi	r19, 0x00	; 0
    5c6c:	4a e7       	ldi	r20, 0x7A	; 122
    5c6e:	54 e4       	ldi	r21, 0x44	; 68
    5c70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	8c a3       	std	Y+36, r24	; 0x24
    5c7a:	9d a3       	std	Y+37, r25	; 0x25
    5c7c:	ae a3       	std	Y+38, r26	; 0x26
    5c7e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c80:	6c a1       	ldd	r22, Y+36	; 0x24
    5c82:	7d a1       	ldd	r23, Y+37	; 0x25
    5c84:	8e a1       	ldd	r24, Y+38	; 0x26
    5c86:	9f a1       	ldd	r25, Y+39	; 0x27
    5c88:	20 e0       	ldi	r18, 0x00	; 0
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	4a ef       	ldi	r20, 0xFA	; 250
    5c8e:	54 e4       	ldi	r21, 0x44	; 68
    5c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	88 a3       	std	Y+32, r24	; 0x20
    5c9a:	99 a3       	std	Y+33, r25	; 0x21
    5c9c:	aa a3       	std	Y+34, r26	; 0x22
    5c9e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5ca0:	68 a1       	ldd	r22, Y+32	; 0x20
    5ca2:	79 a1       	ldd	r23, Y+33	; 0x21
    5ca4:	8a a1       	ldd	r24, Y+34	; 0x22
    5ca6:	9b a1       	ldd	r25, Y+35	; 0x23
    5ca8:	20 e0       	ldi	r18, 0x00	; 0
    5caa:	30 e0       	ldi	r19, 0x00	; 0
    5cac:	40 e8       	ldi	r20, 0x80	; 128
    5cae:	5f e3       	ldi	r21, 0x3F	; 63
    5cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cb4:	88 23       	and	r24, r24
    5cb6:	2c f4       	brge	.+10     	; 0x5cc2 <rtc_i2c_read+0x2e2>
		__ticks = 1;
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	9f 8f       	std	Y+31, r25	; 0x1f
    5cbe:	8e 8f       	std	Y+30, r24	; 0x1e
    5cc0:	3f c0       	rjmp	.+126    	; 0x5d40 <rtc_i2c_read+0x360>
	else if (__tmp > 65535)
    5cc2:	68 a1       	ldd	r22, Y+32	; 0x20
    5cc4:	79 a1       	ldd	r23, Y+33	; 0x21
    5cc6:	8a a1       	ldd	r24, Y+34	; 0x22
    5cc8:	9b a1       	ldd	r25, Y+35	; 0x23
    5cca:	20 e0       	ldi	r18, 0x00	; 0
    5ccc:	3f ef       	ldi	r19, 0xFF	; 255
    5cce:	4f e7       	ldi	r20, 0x7F	; 127
    5cd0:	57 e4       	ldi	r21, 0x47	; 71
    5cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cd6:	18 16       	cp	r1, r24
    5cd8:	4c f5       	brge	.+82     	; 0x5d2c <rtc_i2c_read+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cda:	6c a1       	ldd	r22, Y+36	; 0x24
    5cdc:	7d a1       	ldd	r23, Y+37	; 0x25
    5cde:	8e a1       	ldd	r24, Y+38	; 0x26
    5ce0:	9f a1       	ldd	r25, Y+39	; 0x27
    5ce2:	20 e0       	ldi	r18, 0x00	; 0
    5ce4:	30 e0       	ldi	r19, 0x00	; 0
    5ce6:	40 e2       	ldi	r20, 0x20	; 32
    5ce8:	51 e4       	ldi	r21, 0x41	; 65
    5cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cee:	dc 01       	movw	r26, r24
    5cf0:	cb 01       	movw	r24, r22
    5cf2:	bc 01       	movw	r22, r24
    5cf4:	cd 01       	movw	r24, r26
    5cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cfa:	dc 01       	movw	r26, r24
    5cfc:	cb 01       	movw	r24, r22
    5cfe:	9f 8f       	std	Y+31, r25	; 0x1f
    5d00:	8e 8f       	std	Y+30, r24	; 0x1e
    5d02:	0f c0       	rjmp	.+30     	; 0x5d22 <rtc_i2c_read+0x342>
    5d04:	88 ec       	ldi	r24, 0xC8	; 200
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	9d 8f       	std	Y+29, r25	; 0x1d
    5d0a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5d0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5d0e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5d10:	01 97       	sbiw	r24, 0x01	; 1
    5d12:	f1 f7       	brne	.-4      	; 0x5d10 <rtc_i2c_read+0x330>
    5d14:	9d 8f       	std	Y+29, r25	; 0x1d
    5d16:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d1c:	01 97       	sbiw	r24, 0x01	; 1
    5d1e:	9f 8f       	std	Y+31, r25	; 0x1f
    5d20:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d26:	00 97       	sbiw	r24, 0x00	; 0
    5d28:	69 f7       	brne	.-38     	; 0x5d04 <rtc_i2c_read+0x324>
    5d2a:	24 c0       	rjmp	.+72     	; 0x5d74 <rtc_i2c_read+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d2c:	68 a1       	ldd	r22, Y+32	; 0x20
    5d2e:	79 a1       	ldd	r23, Y+33	; 0x21
    5d30:	8a a1       	ldd	r24, Y+34	; 0x22
    5d32:	9b a1       	ldd	r25, Y+35	; 0x23
    5d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d38:	dc 01       	movw	r26, r24
    5d3a:	cb 01       	movw	r24, r22
    5d3c:	9f 8f       	std	Y+31, r25	; 0x1f
    5d3e:	8e 8f       	std	Y+30, r24	; 0x1e
    5d40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5d44:	9b 8f       	std	Y+27, r25	; 0x1b
    5d46:	8a 8f       	std	Y+26, r24	; 0x1a
    5d48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5d4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5d4c:	01 97       	sbiw	r24, 0x01	; 1
    5d4e:	f1 f7       	brne	.-4      	; 0x5d4c <rtc_i2c_read+0x36c>
    5d50:	9b 8f       	std	Y+27, r25	; 0x1b
    5d52:	8a 8f       	std	Y+26, r24	; 0x1a
    5d54:	0f c0       	rjmp	.+30     	; 0x5d74 <rtc_i2c_read+0x394>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d56:	69 a5       	ldd	r22, Y+41	; 0x29
    5d58:	7a a5       	ldd	r23, Y+42	; 0x2a
    5d5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d62:	dc 01       	movw	r26, r24
    5d64:	cb 01       	movw	r24, r22
    5d66:	88 a7       	std	Y+40, r24	; 0x28
    5d68:	88 a5       	ldd	r24, Y+40	; 0x28
    5d6a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d6c:	89 8d       	ldd	r24, Y+25	; 0x19
    5d6e:	8a 95       	dec	r24
    5d70:	f1 f7       	brne	.-4      	; 0x5d6e <rtc_i2c_read+0x38e>
    5d72:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(5);
        
        // Read bit
        data <<= 1;
    5d74:	de 01       	movw	r26, r28
    5d76:	a6 5b       	subi	r26, 0xB6	; 182
    5d78:	bf 4f       	sbci	r27, 0xFF	; 255
    5d7a:	fe 01       	movw	r30, r28
    5d7c:	e6 5b       	subi	r30, 0xB6	; 182
    5d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d80:	80 81       	ld	r24, Z
    5d82:	88 0f       	add	r24, r24
    5d84:	8c 93       	st	X, r24
        if (PINC & (1 << I2C_SDA_PIN)) {
    5d86:	e3 e3       	ldi	r30, 0x33	; 51
    5d88:	f0 e0       	ldi	r31, 0x00	; 0
    5d8a:	80 81       	ld	r24, Z
    5d8c:	88 2f       	mov	r24, r24
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	82 70       	andi	r24, 0x02	; 2
    5d92:	90 70       	andi	r25, 0x00	; 0
    5d94:	00 97       	sbiw	r24, 0x00	; 0
    5d96:	49 f0       	breq	.+18     	; 0x5daa <rtc_i2c_read+0x3ca>
            data |= 1;
    5d98:	de 01       	movw	r26, r28
    5d9a:	a6 5b       	subi	r26, 0xB6	; 182
    5d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    5d9e:	fe 01       	movw	r30, r28
    5da0:	e6 5b       	subi	r30, 0xB6	; 182
    5da2:	ff 4f       	sbci	r31, 0xFF	; 255
    5da4:	80 81       	ld	r24, Z
    5da6:	81 60       	ori	r24, 0x01	; 1
    5da8:	8c 93       	st	X, r24
        }
        
        // Set SCL low
        PORTC &= ~(1 << I2C_SCL_PIN);
    5daa:	a5 e3       	ldi	r26, 0x35	; 53
    5dac:	b0 e0       	ldi	r27, 0x00	; 0
    5dae:	e5 e3       	ldi	r30, 0x35	; 53
    5db0:	f0 e0       	ldi	r31, 0x00	; 0
    5db2:	80 81       	ld	r24, Z
    5db4:	8e 7f       	andi	r24, 0xFE	; 254
    5db6:	8c 93       	st	X, r24
    uint8_t data = 0;
    uint8_t i;
    
    DDRC &= ~(1 << I2C_SDA_PIN); // Set SDA as input
    
    for (i = 0; i < 8; i++) {
    5db8:	de 01       	movw	r26, r28
    5dba:	a7 5b       	subi	r26, 0xB7	; 183
    5dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	e7 5b       	subi	r30, 0xB7	; 183
    5dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc4:	80 81       	ld	r24, Z
    5dc6:	8f 5f       	subi	r24, 0xFF	; 255
    5dc8:	8c 93       	st	X, r24
    5dca:	fe 01       	movw	r30, r28
    5dcc:	e7 5b       	subi	r30, 0xB7	; 183
    5dce:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd0:	80 81       	ld	r24, Z
    5dd2:	88 30       	cpi	r24, 0x08	; 8
    5dd4:	08 f4       	brcc	.+2      	; 0x5dd8 <rtc_i2c_read+0x3f8>
    5dd6:	25 ce       	rjmp	.-950    	; 0x5a22 <rtc_i2c_read+0x42>
        // Set SCL low
        PORTC &= ~(1 << I2C_SCL_PIN);
    }
    
    // Send ACK/NACK
    DDRC |= (1 << I2C_SDA_PIN); // Set SDA as output
    5dd8:	a4 e3       	ldi	r26, 0x34	; 52
    5dda:	b0 e0       	ldi	r27, 0x00	; 0
    5ddc:	e4 e3       	ldi	r30, 0x34	; 52
    5dde:	f0 e0       	ldi	r31, 0x00	; 0
    5de0:	80 81       	ld	r24, Z
    5de2:	82 60       	ori	r24, 0x02	; 2
    5de4:	8c 93       	st	X, r24
    if (ack) {
    5de6:	fe 01       	movw	r30, r28
    5de8:	e5 5b       	subi	r30, 0xB5	; 181
    5dea:	ff 4f       	sbci	r31, 0xFF	; 255
    5dec:	80 81       	ld	r24, Z
    5dee:	88 23       	and	r24, r24
    5df0:	41 f0       	breq	.+16     	; 0x5e02 <rtc_i2c_read+0x422>
        PORTC &= ~(1 << I2C_SDA_PIN); // ACK
    5df2:	a5 e3       	ldi	r26, 0x35	; 53
    5df4:	b0 e0       	ldi	r27, 0x00	; 0
    5df6:	e5 e3       	ldi	r30, 0x35	; 53
    5df8:	f0 e0       	ldi	r31, 0x00	; 0
    5dfa:	80 81       	ld	r24, Z
    5dfc:	8d 7f       	andi	r24, 0xFD	; 253
    5dfe:	8c 93       	st	X, r24
    5e00:	07 c0       	rjmp	.+14     	; 0x5e10 <rtc_i2c_read+0x430>
    } else {
        PORTC |= (1 << I2C_SDA_PIN); // NACK
    5e02:	a5 e3       	ldi	r26, 0x35	; 53
    5e04:	b0 e0       	ldi	r27, 0x00	; 0
    5e06:	e5 e3       	ldi	r30, 0x35	; 53
    5e08:	f0 e0       	ldi	r31, 0x00	; 0
    5e0a:	80 81       	ld	r24, Z
    5e0c:	82 60       	ori	r24, 0x02	; 2
    5e0e:	8c 93       	st	X, r24
    }
    
    PORTC |= (1 << I2C_SCL_PIN);
    5e10:	a5 e3       	ldi	r26, 0x35	; 53
    5e12:	b0 e0       	ldi	r27, 0x00	; 0
    5e14:	e5 e3       	ldi	r30, 0x35	; 53
    5e16:	f0 e0       	ldi	r31, 0x00	; 0
    5e18:	80 81       	ld	r24, Z
    5e1a:	81 60       	ori	r24, 0x01	; 1
    5e1c:	8c 93       	st	X, r24
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	a0 ea       	ldi	r26, 0xA0	; 160
    5e24:	b0 e4       	ldi	r27, 0x40	; 64
    5e26:	8d 8b       	std	Y+21, r24	; 0x15
    5e28:	9e 8b       	std	Y+22, r25	; 0x16
    5e2a:	af 8b       	std	Y+23, r26	; 0x17
    5e2c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    5e30:	7e 89       	ldd	r23, Y+22	; 0x16
    5e32:	8f 89       	ldd	r24, Y+23	; 0x17
    5e34:	98 8d       	ldd	r25, Y+24	; 0x18
    5e36:	2b ea       	ldi	r18, 0xAB	; 171
    5e38:	3a ea       	ldi	r19, 0xAA	; 170
    5e3a:	4a e2       	ldi	r20, 0x2A	; 42
    5e3c:	50 e4       	ldi	r21, 0x40	; 64
    5e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e42:	dc 01       	movw	r26, r24
    5e44:	cb 01       	movw	r24, r22
    5e46:	89 8b       	std	Y+17, r24	; 0x11
    5e48:	9a 8b       	std	Y+18, r25	; 0x12
    5e4a:	ab 8b       	std	Y+19, r26	; 0x13
    5e4c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5e4e:	69 89       	ldd	r22, Y+17	; 0x11
    5e50:	7a 89       	ldd	r23, Y+18	; 0x12
    5e52:	8b 89       	ldd	r24, Y+19	; 0x13
    5e54:	9c 89       	ldd	r25, Y+20	; 0x14
    5e56:	20 e0       	ldi	r18, 0x00	; 0
    5e58:	30 e0       	ldi	r19, 0x00	; 0
    5e5a:	40 e8       	ldi	r20, 0x80	; 128
    5e5c:	5f e3       	ldi	r21, 0x3F	; 63
    5e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e62:	88 23       	and	r24, r24
    5e64:	1c f4       	brge	.+6      	; 0x5e6c <rtc_i2c_read+0x48c>
		__ticks = 1;
    5e66:	81 e0       	ldi	r24, 0x01	; 1
    5e68:	88 8b       	std	Y+16, r24	; 0x10
    5e6a:	91 c0       	rjmp	.+290    	; 0x5f8e <rtc_i2c_read+0x5ae>
	else if (__tmp > 255)
    5e6c:	69 89       	ldd	r22, Y+17	; 0x11
    5e6e:	7a 89       	ldd	r23, Y+18	; 0x12
    5e70:	8b 89       	ldd	r24, Y+19	; 0x13
    5e72:	9c 89       	ldd	r25, Y+20	; 0x14
    5e74:	20 e0       	ldi	r18, 0x00	; 0
    5e76:	30 e0       	ldi	r19, 0x00	; 0
    5e78:	4f e7       	ldi	r20, 0x7F	; 127
    5e7a:	53 e4       	ldi	r21, 0x43	; 67
    5e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e80:	18 16       	cp	r1, r24
    5e82:	0c f0       	brlt	.+2      	; 0x5e86 <rtc_i2c_read+0x4a6>
    5e84:	7b c0       	rjmp	.+246    	; 0x5f7c <rtc_i2c_read+0x59c>
	{
		_delay_ms(__us / 1000.0);
    5e86:	6d 89       	ldd	r22, Y+21	; 0x15
    5e88:	7e 89       	ldd	r23, Y+22	; 0x16
    5e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    5e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	4a e7       	ldi	r20, 0x7A	; 122
    5e94:	54 e4       	ldi	r21, 0x44	; 68
    5e96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	cb 01       	movw	r24, r22
    5e9e:	8c 87       	std	Y+12, r24	; 0x0c
    5ea0:	9d 87       	std	Y+13, r25	; 0x0d
    5ea2:	ae 87       	std	Y+14, r26	; 0x0e
    5ea4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ea6:	6c 85       	ldd	r22, Y+12	; 0x0c
    5ea8:	7d 85       	ldd	r23, Y+13	; 0x0d
    5eaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    5eac:	9f 85       	ldd	r25, Y+15	; 0x0f
    5eae:	20 e0       	ldi	r18, 0x00	; 0
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	4a ef       	ldi	r20, 0xFA	; 250
    5eb4:	54 e4       	ldi	r21, 0x44	; 68
    5eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eba:	dc 01       	movw	r26, r24
    5ebc:	cb 01       	movw	r24, r22
    5ebe:	88 87       	std	Y+8, r24	; 0x08
    5ec0:	99 87       	std	Y+9, r25	; 0x09
    5ec2:	aa 87       	std	Y+10, r26	; 0x0a
    5ec4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5ec6:	68 85       	ldd	r22, Y+8	; 0x08
    5ec8:	79 85       	ldd	r23, Y+9	; 0x09
    5eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ecc:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ece:	20 e0       	ldi	r18, 0x00	; 0
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	40 e8       	ldi	r20, 0x80	; 128
    5ed4:	5f e3       	ldi	r21, 0x3F	; 63
    5ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5eda:	88 23       	and	r24, r24
    5edc:	2c f4       	brge	.+10     	; 0x5ee8 <rtc_i2c_read+0x508>
		__ticks = 1;
    5ede:	81 e0       	ldi	r24, 0x01	; 1
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	9f 83       	std	Y+7, r25	; 0x07
    5ee4:	8e 83       	std	Y+6, r24	; 0x06
    5ee6:	3f c0       	rjmp	.+126    	; 0x5f66 <rtc_i2c_read+0x586>
	else if (__tmp > 65535)
    5ee8:	68 85       	ldd	r22, Y+8	; 0x08
    5eea:	79 85       	ldd	r23, Y+9	; 0x09
    5eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    5eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ef0:	20 e0       	ldi	r18, 0x00	; 0
    5ef2:	3f ef       	ldi	r19, 0xFF	; 255
    5ef4:	4f e7       	ldi	r20, 0x7F	; 127
    5ef6:	57 e4       	ldi	r21, 0x47	; 71
    5ef8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5efc:	18 16       	cp	r1, r24
    5efe:	4c f5       	brge	.+82     	; 0x5f52 <rtc_i2c_read+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f00:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f02:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f04:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f06:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f08:	20 e0       	ldi	r18, 0x00	; 0
    5f0a:	30 e0       	ldi	r19, 0x00	; 0
    5f0c:	40 e2       	ldi	r20, 0x20	; 32
    5f0e:	51 e4       	ldi	r21, 0x41	; 65
    5f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f14:	dc 01       	movw	r26, r24
    5f16:	cb 01       	movw	r24, r22
    5f18:	bc 01       	movw	r22, r24
    5f1a:	cd 01       	movw	r24, r26
    5f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f20:	dc 01       	movw	r26, r24
    5f22:	cb 01       	movw	r24, r22
    5f24:	9f 83       	std	Y+7, r25	; 0x07
    5f26:	8e 83       	std	Y+6, r24	; 0x06
    5f28:	0f c0       	rjmp	.+30     	; 0x5f48 <rtc_i2c_read+0x568>
    5f2a:	88 ec       	ldi	r24, 0xC8	; 200
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	9d 83       	std	Y+5, r25	; 0x05
    5f30:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5f32:	8c 81       	ldd	r24, Y+4	; 0x04
    5f34:	9d 81       	ldd	r25, Y+5	; 0x05
    5f36:	01 97       	sbiw	r24, 0x01	; 1
    5f38:	f1 f7       	brne	.-4      	; 0x5f36 <rtc_i2c_read+0x556>
    5f3a:	9d 83       	std	Y+5, r25	; 0x05
    5f3c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    5f40:	9f 81       	ldd	r25, Y+7	; 0x07
    5f42:	01 97       	sbiw	r24, 0x01	; 1
    5f44:	9f 83       	std	Y+7, r25	; 0x07
    5f46:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f48:	8e 81       	ldd	r24, Y+6	; 0x06
    5f4a:	9f 81       	ldd	r25, Y+7	; 0x07
    5f4c:	00 97       	sbiw	r24, 0x00	; 0
    5f4e:	69 f7       	brne	.-38     	; 0x5f2a <rtc_i2c_read+0x54a>
    5f50:	24 c0       	rjmp	.+72     	; 0x5f9a <rtc_i2c_read+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f52:	68 85       	ldd	r22, Y+8	; 0x08
    5f54:	79 85       	ldd	r23, Y+9	; 0x09
    5f56:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f58:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f5e:	dc 01       	movw	r26, r24
    5f60:	cb 01       	movw	r24, r22
    5f62:	9f 83       	std	Y+7, r25	; 0x07
    5f64:	8e 83       	std	Y+6, r24	; 0x06
    5f66:	8e 81       	ldd	r24, Y+6	; 0x06
    5f68:	9f 81       	ldd	r25, Y+7	; 0x07
    5f6a:	9b 83       	std	Y+3, r25	; 0x03
    5f6c:	8a 83       	std	Y+2, r24	; 0x02
    5f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f70:	9b 81       	ldd	r25, Y+3	; 0x03
    5f72:	01 97       	sbiw	r24, 0x01	; 1
    5f74:	f1 f7       	brne	.-4      	; 0x5f72 <rtc_i2c_read+0x592>
    5f76:	9b 83       	std	Y+3, r25	; 0x03
    5f78:	8a 83       	std	Y+2, r24	; 0x02
    5f7a:	0f c0       	rjmp	.+30     	; 0x5f9a <rtc_i2c_read+0x5ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5f7c:	69 89       	ldd	r22, Y+17	; 0x11
    5f7e:	7a 89       	ldd	r23, Y+18	; 0x12
    5f80:	8b 89       	ldd	r24, Y+19	; 0x13
    5f82:	9c 89       	ldd	r25, Y+20	; 0x14
    5f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f88:	dc 01       	movw	r26, r24
    5f8a:	cb 01       	movw	r24, r22
    5f8c:	88 8b       	std	Y+16, r24	; 0x10
    5f8e:	88 89       	ldd	r24, Y+16	; 0x10
    5f90:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	8a 95       	dec	r24
    5f96:	f1 f7       	brne	.-4      	; 0x5f94 <rtc_i2c_read+0x5b4>
    5f98:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    PORTC &= ~(1 << I2C_SCL_PIN);
    5f9a:	a5 e3       	ldi	r26, 0x35	; 53
    5f9c:	b0 e0       	ldi	r27, 0x00	; 0
    5f9e:	e5 e3       	ldi	r30, 0x35	; 53
    5fa0:	f0 e0       	ldi	r31, 0x00	; 0
    5fa2:	80 81       	ld	r24, Z
    5fa4:	8e 7f       	andi	r24, 0xFE	; 254
    5fa6:	8c 93       	st	X, r24
    
    return data;
    5fa8:	fe 01       	movw	r30, r28
    5faa:	e6 5b       	subi	r30, 0xB6	; 182
    5fac:	ff 4f       	sbci	r31, 0xFF	; 255
    5fae:	80 81       	ld	r24, Z
}
    5fb0:	c5 5b       	subi	r28, 0xB5	; 181
    5fb2:	df 4f       	sbci	r29, 0xFF	; 255
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	f8 94       	cli
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	0f be       	out	0x3f, r0	; 63
    5fbc:	cd bf       	out	0x3d, r28	; 61
    5fbe:	cf 91       	pop	r28
    5fc0:	df 91       	pop	r29
    5fc2:	1f 91       	pop	r17
    5fc4:	0f 91       	pop	r16
    5fc6:	08 95       	ret

00005fc8 <rtc_init>:

// RTC initialization
void rtc_init(void)
{
    5fc8:	df 93       	push	r29
    5fca:	cf 93       	push	r28
    5fcc:	cd b7       	in	r28, 0x3d	; 61
    5fce:	de b7       	in	r29, 0x3e	; 62
    5fd0:	2e 97       	sbiw	r28, 0x0e	; 14
    5fd2:	0f b6       	in	r0, 0x3f	; 63
    5fd4:	f8 94       	cli
    5fd6:	de bf       	out	0x3e, r29	; 62
    5fd8:	0f be       	out	0x3f, r0	; 63
    5fda:	cd bf       	out	0x3d, r28	; 61
    // Configure I2C pins
    DDRC |= (1 << I2C_SDA_PIN) | (1 << I2C_SCL_PIN);
    5fdc:	a4 e3       	ldi	r26, 0x34	; 52
    5fde:	b0 e0       	ldi	r27, 0x00	; 0
    5fe0:	e4 e3       	ldi	r30, 0x34	; 52
    5fe2:	f0 e0       	ldi	r31, 0x00	; 0
    5fe4:	80 81       	ld	r24, Z
    5fe6:	83 60       	ori	r24, 0x03	; 3
    5fe8:	8c 93       	st	X, r24
    PORTC |= (1 << I2C_SDA_PIN) | (1 << I2C_SCL_PIN);
    5fea:	a5 e3       	ldi	r26, 0x35	; 53
    5fec:	b0 e0       	ldi	r27, 0x00	; 0
    5fee:	e5 e3       	ldi	r30, 0x35	; 53
    5ff0:	f0 e0       	ldi	r31, 0x00	; 0
    5ff2:	80 81       	ld	r24, Z
    5ff4:	83 60       	ori	r24, 0x03	; 3
    5ff6:	8c 93       	st	X, r24
    5ff8:	80 e0       	ldi	r24, 0x00	; 0
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	a8 ec       	ldi	r26, 0xC8	; 200
    5ffe:	b2 e4       	ldi	r27, 0x42	; 66
    6000:	8b 87       	std	Y+11, r24	; 0x0b
    6002:	9c 87       	std	Y+12, r25	; 0x0c
    6004:	ad 87       	std	Y+13, r26	; 0x0d
    6006:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6008:	6b 85       	ldd	r22, Y+11	; 0x0b
    600a:	7c 85       	ldd	r23, Y+12	; 0x0c
    600c:	8d 85       	ldd	r24, Y+13	; 0x0d
    600e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	4a ef       	ldi	r20, 0xFA	; 250
    6016:	54 e4       	ldi	r21, 0x44	; 68
    6018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    601c:	dc 01       	movw	r26, r24
    601e:	cb 01       	movw	r24, r22
    6020:	8f 83       	std	Y+7, r24	; 0x07
    6022:	98 87       	std	Y+8, r25	; 0x08
    6024:	a9 87       	std	Y+9, r26	; 0x09
    6026:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6028:	6f 81       	ldd	r22, Y+7	; 0x07
    602a:	78 85       	ldd	r23, Y+8	; 0x08
    602c:	89 85       	ldd	r24, Y+9	; 0x09
    602e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6030:	20 e0       	ldi	r18, 0x00	; 0
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	40 e8       	ldi	r20, 0x80	; 128
    6036:	5f e3       	ldi	r21, 0x3F	; 63
    6038:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    603c:	88 23       	and	r24, r24
    603e:	2c f4       	brge	.+10     	; 0x604a <rtc_init+0x82>
		__ticks = 1;
    6040:	81 e0       	ldi	r24, 0x01	; 1
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	9e 83       	std	Y+6, r25	; 0x06
    6046:	8d 83       	std	Y+5, r24	; 0x05
    6048:	3f c0       	rjmp	.+126    	; 0x60c8 <rtc_init+0x100>
	else if (__tmp > 65535)
    604a:	6f 81       	ldd	r22, Y+7	; 0x07
    604c:	78 85       	ldd	r23, Y+8	; 0x08
    604e:	89 85       	ldd	r24, Y+9	; 0x09
    6050:	9a 85       	ldd	r25, Y+10	; 0x0a
    6052:	20 e0       	ldi	r18, 0x00	; 0
    6054:	3f ef       	ldi	r19, 0xFF	; 255
    6056:	4f e7       	ldi	r20, 0x7F	; 127
    6058:	57 e4       	ldi	r21, 0x47	; 71
    605a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    605e:	18 16       	cp	r1, r24
    6060:	4c f5       	brge	.+82     	; 0x60b4 <rtc_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6062:	6b 85       	ldd	r22, Y+11	; 0x0b
    6064:	7c 85       	ldd	r23, Y+12	; 0x0c
    6066:	8d 85       	ldd	r24, Y+13	; 0x0d
    6068:	9e 85       	ldd	r25, Y+14	; 0x0e
    606a:	20 e0       	ldi	r18, 0x00	; 0
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	40 e2       	ldi	r20, 0x20	; 32
    6070:	51 e4       	ldi	r21, 0x41	; 65
    6072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	bc 01       	movw	r22, r24
    607c:	cd 01       	movw	r24, r26
    607e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6082:	dc 01       	movw	r26, r24
    6084:	cb 01       	movw	r24, r22
    6086:	9e 83       	std	Y+6, r25	; 0x06
    6088:	8d 83       	std	Y+5, r24	; 0x05
    608a:	0f c0       	rjmp	.+30     	; 0x60aa <rtc_init+0xe2>
    608c:	88 ec       	ldi	r24, 0xC8	; 200
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	9c 83       	std	Y+4, r25	; 0x04
    6092:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6094:	8b 81       	ldd	r24, Y+3	; 0x03
    6096:	9c 81       	ldd	r25, Y+4	; 0x04
    6098:	01 97       	sbiw	r24, 0x01	; 1
    609a:	f1 f7       	brne	.-4      	; 0x6098 <rtc_init+0xd0>
    609c:	9c 83       	std	Y+4, r25	; 0x04
    609e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60a0:	8d 81       	ldd	r24, Y+5	; 0x05
    60a2:	9e 81       	ldd	r25, Y+6	; 0x06
    60a4:	01 97       	sbiw	r24, 0x01	; 1
    60a6:	9e 83       	std	Y+6, r25	; 0x06
    60a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60aa:	8d 81       	ldd	r24, Y+5	; 0x05
    60ac:	9e 81       	ldd	r25, Y+6	; 0x06
    60ae:	00 97       	sbiw	r24, 0x00	; 0
    60b0:	69 f7       	brne	.-38     	; 0x608c <rtc_init+0xc4>
    60b2:	14 c0       	rjmp	.+40     	; 0x60dc <rtc_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60b4:	6f 81       	ldd	r22, Y+7	; 0x07
    60b6:	78 85       	ldd	r23, Y+8	; 0x08
    60b8:	89 85       	ldd	r24, Y+9	; 0x09
    60ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    60bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60c0:	dc 01       	movw	r26, r24
    60c2:	cb 01       	movw	r24, r22
    60c4:	9e 83       	std	Y+6, r25	; 0x06
    60c6:	8d 83       	std	Y+5, r24	; 0x05
    60c8:	8d 81       	ldd	r24, Y+5	; 0x05
    60ca:	9e 81       	ldd	r25, Y+6	; 0x06
    60cc:	9a 83       	std	Y+2, r25	; 0x02
    60ce:	89 83       	std	Y+1, r24	; 0x01
    60d0:	89 81       	ldd	r24, Y+1	; 0x01
    60d2:	9a 81       	ldd	r25, Y+2	; 0x02
    60d4:	01 97       	sbiw	r24, 0x01	; 1
    60d6:	f1 f7       	brne	.-4      	; 0x60d4 <rtc_init+0x10c>
    60d8:	9a 83       	std	Y+2, r25	; 0x02
    60da:	89 83       	std	Y+1, r24	; 0x01
    
    _delay_ms(100); // Wait for RTC to stabilize
}
    60dc:	2e 96       	adiw	r28, 0x0e	; 14
    60de:	0f b6       	in	r0, 0x3f	; 63
    60e0:	f8 94       	cli
    60e2:	de bf       	out	0x3e, r29	; 62
    60e4:	0f be       	out	0x3f, r0	; 63
    60e6:	cd bf       	out	0x3d, r28	; 61
    60e8:	cf 91       	pop	r28
    60ea:	df 91       	pop	r29
    60ec:	08 95       	ret

000060ee <rtc_write_register>:

// Write to RTC register
void rtc_write_register(uint8_t reg, uint8_t data)
{
    60ee:	df 93       	push	r29
    60f0:	cf 93       	push	r28
    60f2:	00 d0       	rcall	.+0      	; 0x60f4 <rtc_write_register+0x6>
    60f4:	cd b7       	in	r28, 0x3d	; 61
    60f6:	de b7       	in	r29, 0x3e	; 62
    60f8:	89 83       	std	Y+1, r24	; 0x01
    60fa:	6a 83       	std	Y+2, r22	; 0x02
    rtc_i2c_start();
    60fc:	0e 94 72 28 	call	0x50e4	; 0x50e4 <rtc_i2c_start>
    rtc_i2c_write(RTC_I2C_ADDRESS << 1); // Write address
    6100:	80 ed       	ldi	r24, 0xD0	; 208
    6102:	0e 94 0a 2b 	call	0x5614	; 0x5614 <rtc_i2c_write>
    rtc_i2c_write(reg); // Register address
    6106:	89 81       	ldd	r24, Y+1	; 0x01
    6108:	0e 94 0a 2b 	call	0x5614	; 0x5614 <rtc_i2c_write>
    rtc_i2c_write(data); // Data
    610c:	8a 81       	ldd	r24, Y+2	; 0x02
    610e:	0e 94 0a 2b 	call	0x5614	; 0x5614 <rtc_i2c_write>
    rtc_i2c_stop();
    6112:	0e 94 5f 29 	call	0x52be	; 0x52be <rtc_i2c_stop>
}
    6116:	0f 90       	pop	r0
    6118:	0f 90       	pop	r0
    611a:	cf 91       	pop	r28
    611c:	df 91       	pop	r29
    611e:	08 95       	ret

00006120 <rtc_read_register>:

// Read from RTC register
uint8_t rtc_read_register(uint8_t reg)
{
    6120:	df 93       	push	r29
    6122:	cf 93       	push	r28
    6124:	00 d0       	rcall	.+0      	; 0x6126 <rtc_read_register+0x6>
    6126:	cd b7       	in	r28, 0x3d	; 61
    6128:	de b7       	in	r29, 0x3e	; 62
    612a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    rtc_i2c_start();
    612c:	0e 94 72 28 	call	0x50e4	; 0x50e4 <rtc_i2c_start>
    rtc_i2c_write(RTC_I2C_ADDRESS << 1); // Write address
    6130:	80 ed       	ldi	r24, 0xD0	; 208
    6132:	0e 94 0a 2b 	call	0x5614	; 0x5614 <rtc_i2c_write>
    rtc_i2c_write(reg); // Register address
    6136:	8a 81       	ldd	r24, Y+2	; 0x02
    6138:	0e 94 0a 2b 	call	0x5614	; 0x5614 <rtc_i2c_write>
    rtc_i2c_start();
    613c:	0e 94 72 28 	call	0x50e4	; 0x50e4 <rtc_i2c_start>
    rtc_i2c_write((RTC_I2C_ADDRESS << 1) | 1); // Read address
    6140:	81 ed       	ldi	r24, 0xD1	; 209
    6142:	0e 94 0a 2b 	call	0x5614	; 0x5614 <rtc_i2c_write>
    data = rtc_i2c_read(false); // Read data, no ACK
    6146:	80 e0       	ldi	r24, 0x00	; 0
    6148:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <rtc_i2c_read>
    614c:	89 83       	std	Y+1, r24	; 0x01
    rtc_i2c_stop();
    614e:	0e 94 5f 29 	call	0x52be	; 0x52be <rtc_i2c_stop>
    
    return data;
    6152:	89 81       	ldd	r24, Y+1	; 0x01
}
    6154:	0f 90       	pop	r0
    6156:	0f 90       	pop	r0
    6158:	cf 91       	pop	r28
    615a:	df 91       	pop	r29
    615c:	08 95       	ret

0000615e <rtc_get_time>:

// Get current time from RTC
void rtc_get_time(time_t* time)
{
    615e:	df 93       	push	r29
    6160:	cf 93       	push	r28
    6162:	00 d0       	rcall	.+0      	; 0x6164 <rtc_get_time+0x6>
    6164:	cd b7       	in	r28, 0x3d	; 61
    6166:	de b7       	in	r29, 0x3e	; 62
    6168:	9a 83       	std	Y+2, r25	; 0x02
    616a:	89 83       	std	Y+1, r24	; 0x01
    time->second = bcd_to_bin(rtc_read_register(RTC_SECONDS) & 0x7F);
    616c:	80 e0       	ldi	r24, 0x00	; 0
    616e:	0e 94 90 30 	call	0x6120	; 0x6120 <rtc_read_register>
    6172:	8f 77       	andi	r24, 0x7F	; 127
    6174:	0e 94 b8 31 	call	0x6370	; 0x6370 <bcd_to_bin>
    6178:	e9 81       	ldd	r30, Y+1	; 0x01
    617a:	fa 81       	ldd	r31, Y+2	; 0x02
    617c:	80 83       	st	Z, r24
    time->minute = bcd_to_bin(rtc_read_register(RTC_MINUTES) & 0x7F);
    617e:	81 e0       	ldi	r24, 0x01	; 1
    6180:	0e 94 90 30 	call	0x6120	; 0x6120 <rtc_read_register>
    6184:	8f 77       	andi	r24, 0x7F	; 127
    6186:	0e 94 b8 31 	call	0x6370	; 0x6370 <bcd_to_bin>
    618a:	e9 81       	ldd	r30, Y+1	; 0x01
    618c:	fa 81       	ldd	r31, Y+2	; 0x02
    618e:	81 83       	std	Z+1, r24	; 0x01
    time->hour = bcd_to_bin(rtc_read_register(RTC_HOURS) & 0x3F);
    6190:	82 e0       	ldi	r24, 0x02	; 2
    6192:	0e 94 90 30 	call	0x6120	; 0x6120 <rtc_read_register>
    6196:	8f 73       	andi	r24, 0x3F	; 63
    6198:	0e 94 b8 31 	call	0x6370	; 0x6370 <bcd_to_bin>
    619c:	e9 81       	ldd	r30, Y+1	; 0x01
    619e:	fa 81       	ldd	r31, Y+2	; 0x02
    61a0:	82 83       	std	Z+2, r24	; 0x02
}
    61a2:	0f 90       	pop	r0
    61a4:	0f 90       	pop	r0
    61a6:	cf 91       	pop	r28
    61a8:	df 91       	pop	r29
    61aa:	08 95       	ret

000061ac <rtc_set_time>:

// Set time in RTC
void rtc_set_time(time_t* time)
{
    61ac:	df 93       	push	r29
    61ae:	cf 93       	push	r28
    61b0:	00 d0       	rcall	.+0      	; 0x61b2 <rtc_set_time+0x6>
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	9a 83       	std	Y+2, r25	; 0x02
    61b8:	89 83       	std	Y+1, r24	; 0x01
    rtc_write_register(RTC_SECONDS, bin_to_bcd(time->second));
    61ba:	e9 81       	ldd	r30, Y+1	; 0x01
    61bc:	fa 81       	ldd	r31, Y+2	; 0x02
    61be:	80 81       	ld	r24, Z
    61c0:	0e 94 d5 31 	call	0x63aa	; 0x63aa <bin_to_bcd>
    61c4:	98 2f       	mov	r25, r24
    61c6:	80 e0       	ldi	r24, 0x00	; 0
    61c8:	69 2f       	mov	r22, r25
    61ca:	0e 94 77 30 	call	0x60ee	; 0x60ee <rtc_write_register>
    rtc_write_register(RTC_MINUTES, bin_to_bcd(time->minute));
    61ce:	e9 81       	ldd	r30, Y+1	; 0x01
    61d0:	fa 81       	ldd	r31, Y+2	; 0x02
    61d2:	81 81       	ldd	r24, Z+1	; 0x01
    61d4:	0e 94 d5 31 	call	0x63aa	; 0x63aa <bin_to_bcd>
    61d8:	98 2f       	mov	r25, r24
    61da:	81 e0       	ldi	r24, 0x01	; 1
    61dc:	69 2f       	mov	r22, r25
    61de:	0e 94 77 30 	call	0x60ee	; 0x60ee <rtc_write_register>
    rtc_write_register(RTC_HOURS, bin_to_bcd(time->hour));
    61e2:	e9 81       	ldd	r30, Y+1	; 0x01
    61e4:	fa 81       	ldd	r31, Y+2	; 0x02
    61e6:	82 81       	ldd	r24, Z+2	; 0x02
    61e8:	0e 94 d5 31 	call	0x63aa	; 0x63aa <bin_to_bcd>
    61ec:	98 2f       	mov	r25, r24
    61ee:	82 e0       	ldi	r24, 0x02	; 2
    61f0:	69 2f       	mov	r22, r25
    61f2:	0e 94 77 30 	call	0x60ee	; 0x60ee <rtc_write_register>
}
    61f6:	0f 90       	pop	r0
    61f8:	0f 90       	pop	r0
    61fa:	cf 91       	pop	r28
    61fc:	df 91       	pop	r29
    61fe:	08 95       	ret

00006200 <rtc_get_date>:

// Get current date from RTC
void rtc_get_date(date_t* date)
{
    6200:	df 93       	push	r29
    6202:	cf 93       	push	r28
    6204:	00 d0       	rcall	.+0      	; 0x6206 <rtc_get_date+0x6>
    6206:	cd b7       	in	r28, 0x3d	; 61
    6208:	de b7       	in	r29, 0x3e	; 62
    620a:	9a 83       	std	Y+2, r25	; 0x02
    620c:	89 83       	std	Y+1, r24	; 0x01
    date->day = bcd_to_bin(rtc_read_register(RTC_DATE) & 0x3F);
    620e:	84 e0       	ldi	r24, 0x04	; 4
    6210:	0e 94 90 30 	call	0x6120	; 0x6120 <rtc_read_register>
    6214:	8f 73       	andi	r24, 0x3F	; 63
    6216:	0e 94 b8 31 	call	0x6370	; 0x6370 <bcd_to_bin>
    621a:	e9 81       	ldd	r30, Y+1	; 0x01
    621c:	fa 81       	ldd	r31, Y+2	; 0x02
    621e:	80 83       	st	Z, r24
    date->month = bcd_to_bin(rtc_read_register(RTC_MONTH) & 0x1F);
    6220:	85 e0       	ldi	r24, 0x05	; 5
    6222:	0e 94 90 30 	call	0x6120	; 0x6120 <rtc_read_register>
    6226:	8f 71       	andi	r24, 0x1F	; 31
    6228:	0e 94 b8 31 	call	0x6370	; 0x6370 <bcd_to_bin>
    622c:	e9 81       	ldd	r30, Y+1	; 0x01
    622e:	fa 81       	ldd	r31, Y+2	; 0x02
    6230:	81 83       	std	Z+1, r24	; 0x01
    date->year = 2000 + bcd_to_bin(rtc_read_register(RTC_YEAR));
    6232:	86 e0       	ldi	r24, 0x06	; 6
    6234:	0e 94 90 30 	call	0x6120	; 0x6120 <rtc_read_register>
    6238:	0e 94 b8 31 	call	0x6370	; 0x6370 <bcd_to_bin>
    623c:	88 2f       	mov	r24, r24
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	80 53       	subi	r24, 0x30	; 48
    6242:	98 4f       	sbci	r25, 0xF8	; 248
    6244:	e9 81       	ldd	r30, Y+1	; 0x01
    6246:	fa 81       	ldd	r31, Y+2	; 0x02
    6248:	93 83       	std	Z+3, r25	; 0x03
    624a:	82 83       	std	Z+2, r24	; 0x02
}
    624c:	0f 90       	pop	r0
    624e:	0f 90       	pop	r0
    6250:	cf 91       	pop	r28
    6252:	df 91       	pop	r29
    6254:	08 95       	ret

00006256 <rtc_set_date>:

// Set date in RTC
void rtc_set_date(date_t* date)
{
    6256:	df 93       	push	r29
    6258:	cf 93       	push	r28
    625a:	00 d0       	rcall	.+0      	; 0x625c <rtc_set_date+0x6>
    625c:	cd b7       	in	r28, 0x3d	; 61
    625e:	de b7       	in	r29, 0x3e	; 62
    6260:	9a 83       	std	Y+2, r25	; 0x02
    6262:	89 83       	std	Y+1, r24	; 0x01
    rtc_write_register(RTC_DATE, bin_to_bcd(date->day));
    6264:	e9 81       	ldd	r30, Y+1	; 0x01
    6266:	fa 81       	ldd	r31, Y+2	; 0x02
    6268:	80 81       	ld	r24, Z
    626a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <bin_to_bcd>
    626e:	98 2f       	mov	r25, r24
    6270:	84 e0       	ldi	r24, 0x04	; 4
    6272:	69 2f       	mov	r22, r25
    6274:	0e 94 77 30 	call	0x60ee	; 0x60ee <rtc_write_register>
    rtc_write_register(RTC_MONTH, bin_to_bcd(date->month));
    6278:	e9 81       	ldd	r30, Y+1	; 0x01
    627a:	fa 81       	ldd	r31, Y+2	; 0x02
    627c:	81 81       	ldd	r24, Z+1	; 0x01
    627e:	0e 94 d5 31 	call	0x63aa	; 0x63aa <bin_to_bcd>
    6282:	98 2f       	mov	r25, r24
    6284:	85 e0       	ldi	r24, 0x05	; 5
    6286:	69 2f       	mov	r22, r25
    6288:	0e 94 77 30 	call	0x60ee	; 0x60ee <rtc_write_register>
    rtc_write_register(RTC_YEAR, bin_to_bcd(date->year - 2000));
    628c:	e9 81       	ldd	r30, Y+1	; 0x01
    628e:	fa 81       	ldd	r31, Y+2	; 0x02
    6290:	82 81       	ldd	r24, Z+2	; 0x02
    6292:	93 81       	ldd	r25, Z+3	; 0x03
    6294:	80 5d       	subi	r24, 0xD0	; 208
    6296:	0e 94 d5 31 	call	0x63aa	; 0x63aa <bin_to_bcd>
    629a:	98 2f       	mov	r25, r24
    629c:	86 e0       	ldi	r24, 0x06	; 6
    629e:	69 2f       	mov	r22, r25
    62a0:	0e 94 77 30 	call	0x60ee	; 0x60ee <rtc_write_register>
}
    62a4:	0f 90       	pop	r0
    62a6:	0f 90       	pop	r0
    62a8:	cf 91       	pop	r28
    62aa:	df 91       	pop	r29
    62ac:	08 95       	ret

000062ae <rtc_is_valid_time>:

// Validate time
bool rtc_is_valid_time(time_t* time)
{
    62ae:	df 93       	push	r29
    62b0:	cf 93       	push	r28
    62b2:	00 d0       	rcall	.+0      	; 0x62b4 <rtc_is_valid_time+0x6>
    62b4:	00 d0       	rcall	.+0      	; 0x62b6 <rtc_is_valid_time+0x8>
    62b6:	cd b7       	in	r28, 0x3d	; 61
    62b8:	de b7       	in	r29, 0x3e	; 62
    62ba:	9a 83       	std	Y+2, r25	; 0x02
    62bc:	89 83       	std	Y+1, r24	; 0x01
    return (time->hour < 24 && time->minute < 60 && time->second < 60);
    62be:	e9 81       	ldd	r30, Y+1	; 0x01
    62c0:	fa 81       	ldd	r31, Y+2	; 0x02
    62c2:	82 81       	ldd	r24, Z+2	; 0x02
    62c4:	88 31       	cpi	r24, 0x18	; 24
    62c6:	78 f4       	brcc	.+30     	; 0x62e6 <rtc_is_valid_time+0x38>
    62c8:	e9 81       	ldd	r30, Y+1	; 0x01
    62ca:	fa 81       	ldd	r31, Y+2	; 0x02
    62cc:	81 81       	ldd	r24, Z+1	; 0x01
    62ce:	8c 33       	cpi	r24, 0x3C	; 60
    62d0:	50 f4       	brcc	.+20     	; 0x62e6 <rtc_is_valid_time+0x38>
    62d2:	e9 81       	ldd	r30, Y+1	; 0x01
    62d4:	fa 81       	ldd	r31, Y+2	; 0x02
    62d6:	80 81       	ld	r24, Z
    62d8:	8c 33       	cpi	r24, 0x3C	; 60
    62da:	28 f4       	brcc	.+10     	; 0x62e6 <rtc_is_valid_time+0x38>
    62dc:	81 e0       	ldi	r24, 0x01	; 1
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	9c 83       	std	Y+4, r25	; 0x04
    62e2:	8b 83       	std	Y+3, r24	; 0x03
    62e4:	02 c0       	rjmp	.+4      	; 0x62ea <rtc_is_valid_time+0x3c>
    62e6:	1c 82       	std	Y+4, r1	; 0x04
    62e8:	1b 82       	std	Y+3, r1	; 0x03
    62ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    62ec:	0f 90       	pop	r0
    62ee:	0f 90       	pop	r0
    62f0:	0f 90       	pop	r0
    62f2:	0f 90       	pop	r0
    62f4:	cf 91       	pop	r28
    62f6:	df 91       	pop	r29
    62f8:	08 95       	ret

000062fa <rtc_is_valid_date>:

// Validate date
bool rtc_is_valid_date(date_t* date)
{
    62fa:	df 93       	push	r29
    62fc:	cf 93       	push	r28
    62fe:	00 d0       	rcall	.+0      	; 0x6300 <rtc_is_valid_date+0x6>
    6300:	00 d0       	rcall	.+0      	; 0x6302 <rtc_is_valid_date+0x8>
    6302:	cd b7       	in	r28, 0x3d	; 61
    6304:	de b7       	in	r29, 0x3e	; 62
    6306:	9a 83       	std	Y+2, r25	; 0x02
    6308:	89 83       	std	Y+1, r24	; 0x01
    return (date->day >= 1 && date->day <= 31 &&
    630a:	e9 81       	ldd	r30, Y+1	; 0x01
    630c:	fa 81       	ldd	r31, Y+2	; 0x02
    630e:	80 81       	ld	r24, Z
    6310:	88 23       	and	r24, r24
    6312:	21 f1       	breq	.+72     	; 0x635c <rtc_is_valid_date+0x62>
    6314:	e9 81       	ldd	r30, Y+1	; 0x01
    6316:	fa 81       	ldd	r31, Y+2	; 0x02
    6318:	80 81       	ld	r24, Z
    631a:	80 32       	cpi	r24, 0x20	; 32
    631c:	f8 f4       	brcc	.+62     	; 0x635c <rtc_is_valid_date+0x62>
    631e:	e9 81       	ldd	r30, Y+1	; 0x01
    6320:	fa 81       	ldd	r31, Y+2	; 0x02
    6322:	81 81       	ldd	r24, Z+1	; 0x01
    6324:	88 23       	and	r24, r24
    6326:	d1 f0       	breq	.+52     	; 0x635c <rtc_is_valid_date+0x62>
    6328:	e9 81       	ldd	r30, Y+1	; 0x01
    632a:	fa 81       	ldd	r31, Y+2	; 0x02
    632c:	81 81       	ldd	r24, Z+1	; 0x01
    632e:	8d 30       	cpi	r24, 0x0D	; 13
    6330:	a8 f4       	brcc	.+42     	; 0x635c <rtc_is_valid_date+0x62>
    6332:	e9 81       	ldd	r30, Y+1	; 0x01
    6334:	fa 81       	ldd	r31, Y+2	; 0x02
    6336:	82 81       	ldd	r24, Z+2	; 0x02
    6338:	93 81       	ldd	r25, Z+3	; 0x03
    633a:	27 e0       	ldi	r18, 0x07	; 7
    633c:	80 3d       	cpi	r24, 0xD0	; 208
    633e:	92 07       	cpc	r25, r18
    6340:	68 f0       	brcs	.+26     	; 0x635c <rtc_is_valid_date+0x62>
    6342:	e9 81       	ldd	r30, Y+1	; 0x01
    6344:	fa 81       	ldd	r31, Y+2	; 0x02
    6346:	82 81       	ldd	r24, Z+2	; 0x02
    6348:	93 81       	ldd	r25, Z+3	; 0x03
    634a:	28 e0       	ldi	r18, 0x08	; 8
    634c:	84 33       	cpi	r24, 0x34	; 52
    634e:	92 07       	cpc	r25, r18
    6350:	28 f4       	brcc	.+10     	; 0x635c <rtc_is_valid_date+0x62>
    6352:	81 e0       	ldi	r24, 0x01	; 1
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	9c 83       	std	Y+4, r25	; 0x04
    6358:	8b 83       	std	Y+3, r24	; 0x03
    635a:	02 c0       	rjmp	.+4      	; 0x6360 <rtc_is_valid_date+0x66>
    635c:	1c 82       	std	Y+4, r1	; 0x04
    635e:	1b 82       	std	Y+3, r1	; 0x03
    6360:	8b 81       	ldd	r24, Y+3	; 0x03
            date->month >= 1 && date->month <= 12 &&
            date->year >= 2000 && date->year <= 2099);
}
    6362:	0f 90       	pop	r0
    6364:	0f 90       	pop	r0
    6366:	0f 90       	pop	r0
    6368:	0f 90       	pop	r0
    636a:	cf 91       	pop	r28
    636c:	df 91       	pop	r29
    636e:	08 95       	ret

00006370 <bcd_to_bin>:

// BCD to binary conversion
uint8_t bcd_to_bin(uint8_t bcd)
{
    6370:	df 93       	push	r29
    6372:	cf 93       	push	r28
    6374:	0f 92       	push	r0
    6376:	cd b7       	in	r28, 0x3d	; 61
    6378:	de b7       	in	r29, 0x3e	; 62
    637a:	89 83       	std	Y+1, r24	; 0x01
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
    637c:	89 81       	ldd	r24, Y+1	; 0x01
    637e:	82 95       	swap	r24
    6380:	8f 70       	andi	r24, 0x0F	; 15
    6382:	88 2f       	mov	r24, r24
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	9c 01       	movw	r18, r24
    6388:	22 0f       	add	r18, r18
    638a:	33 1f       	adc	r19, r19
    638c:	c9 01       	movw	r24, r18
    638e:	88 0f       	add	r24, r24
    6390:	99 1f       	adc	r25, r25
    6392:	88 0f       	add	r24, r24
    6394:	99 1f       	adc	r25, r25
    6396:	82 0f       	add	r24, r18
    6398:	93 1f       	adc	r25, r19
    639a:	98 2f       	mov	r25, r24
    639c:	89 81       	ldd	r24, Y+1	; 0x01
    639e:	8f 70       	andi	r24, 0x0F	; 15
    63a0:	89 0f       	add	r24, r25
}
    63a2:	0f 90       	pop	r0
    63a4:	cf 91       	pop	r28
    63a6:	df 91       	pop	r29
    63a8:	08 95       	ret

000063aa <bin_to_bcd>:

// Binary to BCD conversion
uint8_t bin_to_bcd(uint8_t bin)
{
    63aa:	df 93       	push	r29
    63ac:	cf 93       	push	r28
    63ae:	0f 92       	push	r0
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	89 83       	std	Y+1, r24	; 0x01
    return ((bin / 10) << 4) | (bin % 10);
    63b6:	89 81       	ldd	r24, Y+1	; 0x01
    63b8:	9a e0       	ldi	r25, 0x0A	; 10
    63ba:	69 2f       	mov	r22, r25
    63bc:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__udivmodqi4>
    63c0:	88 2f       	mov	r24, r24
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	82 95       	swap	r24
    63c6:	92 95       	swap	r25
    63c8:	90 7f       	andi	r25, 0xF0	; 240
    63ca:	98 27       	eor	r25, r24
    63cc:	80 7f       	andi	r24, 0xF0	; 240
    63ce:	98 27       	eor	r25, r24
    63d0:	28 2f       	mov	r18, r24
    63d2:	89 81       	ldd	r24, Y+1	; 0x01
    63d4:	9a e0       	ldi	r25, 0x0A	; 10
    63d6:	69 2f       	mov	r22, r25
    63d8:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__udivmodqi4>
    63dc:	89 2f       	mov	r24, r25
    63de:	82 2b       	or	r24, r18
    63e0:	0f 90       	pop	r0
    63e2:	cf 91       	pop	r28
    63e4:	df 91       	pop	r29
    63e6:	08 95       	ret

000063e8 <stopwatch_init>:
static stopwatch_time_t stopwatch_time = {0, 0, 0};
static stopwatch_state_t stopwatch_state = STOPWATCH_STOPPED;

// Initialize stopwatch
void stopwatch_init(void)
{
    63e8:	df 93       	push	r29
    63ea:	cf 93       	push	r28
    63ec:	cd b7       	in	r28, 0x3d	; 61
    63ee:	de b7       	in	r29, 0x3e	; 62
    stopwatch_time.hours = 0;
    63f0:	10 92 09 03 	sts	0x0309, r1
    stopwatch_time.minutes = 0;
    63f4:	10 92 0a 03 	sts	0x030A, r1
    stopwatch_time.seconds = 0;
    63f8:	10 92 0b 03 	sts	0x030B, r1
    stopwatch_state = STOPWATCH_STOPPED;
    63fc:	10 92 0c 03 	sts	0x030C, r1
}
    6400:	cf 91       	pop	r28
    6402:	df 91       	pop	r29
    6404:	08 95       	ret

00006406 <stopwatch_start>:

// Start stopwatch
void stopwatch_start(void)
{
    6406:	df 93       	push	r29
    6408:	cf 93       	push	r28
    640a:	cd b7       	in	r28, 0x3d	; 61
    640c:	de b7       	in	r29, 0x3e	; 62
    if (stopwatch_state == STOPWATCH_STOPPED) {
    640e:	80 91 0c 03 	lds	r24, 0x030C
    6412:	88 23       	and	r24, r24
    6414:	19 f4       	brne	.+6      	; 0x641c <stopwatch_start+0x16>
        stopwatch_state = STOPWATCH_RUNNING;
    6416:	81 e0       	ldi	r24, 0x01	; 1
    6418:	80 93 0c 03 	sts	0x030C, r24
    }
}
    641c:	cf 91       	pop	r28
    641e:	df 91       	pop	r29
    6420:	08 95       	ret

00006422 <stopwatch_stop>:

// Stop stopwatch
void stopwatch_stop(void)
{
    6422:	df 93       	push	r29
    6424:	cf 93       	push	r28
    6426:	cd b7       	in	r28, 0x3d	; 61
    6428:	de b7       	in	r29, 0x3e	; 62
    if (stopwatch_state == STOPWATCH_RUNNING) {
    642a:	80 91 0c 03 	lds	r24, 0x030C
    642e:	81 30       	cpi	r24, 0x01	; 1
    6430:	11 f4       	brne	.+4      	; 0x6436 <stopwatch_stop+0x14>
        stopwatch_state = STOPWATCH_STOPPED;
    6432:	10 92 0c 03 	sts	0x030C, r1
    }
}
    6436:	cf 91       	pop	r28
    6438:	df 91       	pop	r29
    643a:	08 95       	ret

0000643c <stopwatch_reset>:

// Reset stopwatch
void stopwatch_reset(void)
{
    643c:	df 93       	push	r29
    643e:	cf 93       	push	r28
    6440:	cd b7       	in	r28, 0x3d	; 61
    6442:	de b7       	in	r29, 0x3e	; 62
    stopwatch_time.hours = 0;
    6444:	10 92 09 03 	sts	0x0309, r1
    stopwatch_time.minutes = 0;
    6448:	10 92 0a 03 	sts	0x030A, r1
    stopwatch_time.seconds = 0;
    644c:	10 92 0b 03 	sts	0x030B, r1
    stopwatch_state = STOPWATCH_STOPPED;
    6450:	10 92 0c 03 	sts	0x030C, r1
}
    6454:	cf 91       	pop	r28
    6456:	df 91       	pop	r29
    6458:	08 95       	ret

0000645a <stopwatch_update>:

// Update stopwatch (called every second)
void stopwatch_update(void)
{
    645a:	df 93       	push	r29
    645c:	cf 93       	push	r28
    645e:	cd b7       	in	r28, 0x3d	; 61
    6460:	de b7       	in	r29, 0x3e	; 62
    if (stopwatch_state == STOPWATCH_RUNNING) {
    6462:	80 91 0c 03 	lds	r24, 0x030C
    6466:	81 30       	cpi	r24, 0x01	; 1
    6468:	11 f4       	brne	.+4      	; 0x646e <stopwatch_update+0x14>
        stopwatch_increment();
    646a:	0e 94 de 32 	call	0x65bc	; 0x65bc <stopwatch_increment>
    }
}
    646e:	cf 91       	pop	r28
    6470:	df 91       	pop	r29
    6472:	08 95       	ret

00006474 <stopwatch_is_running>:

// Check if stopwatch is running
bool stopwatch_is_running(void)
{
    6474:	df 93       	push	r29
    6476:	cf 93       	push	r28
    6478:	0f 92       	push	r0
    647a:	cd b7       	in	r28, 0x3d	; 61
    647c:	de b7       	in	r29, 0x3e	; 62
    return (stopwatch_state == STOPWATCH_RUNNING);
    647e:	80 91 0c 03 	lds	r24, 0x030C
    6482:	19 82       	std	Y+1, r1	; 0x01
    6484:	81 30       	cpi	r24, 0x01	; 1
    6486:	11 f4       	brne	.+4      	; 0x648c <stopwatch_is_running+0x18>
    6488:	81 e0       	ldi	r24, 0x01	; 1
    648a:	89 83       	std	Y+1, r24	; 0x01
    648c:	89 81       	ldd	r24, Y+1	; 0x01
}
    648e:	0f 90       	pop	r0
    6490:	cf 91       	pop	r28
    6492:	df 91       	pop	r29
    6494:	08 95       	ret

00006496 <stopwatch_get_time>:

// Get current stopwatch time
stopwatch_time_t stopwatch_get_time(void)
{
    6496:	df 93       	push	r29
    6498:	cf 93       	push	r28
    649a:	cd b7       	in	r28, 0x3d	; 61
    649c:	de b7       	in	r29, 0x3e	; 62
    649e:	2c 97       	sbiw	r28, 0x0c	; 12
    64a0:	0f b6       	in	r0, 0x3f	; 63
    64a2:	f8 94       	cli
    64a4:	de bf       	out	0x3e, r29	; 62
    64a6:	0f be       	out	0x3f, r0	; 63
    64a8:	cd bf       	out	0x3d, r28	; 61
    return stopwatch_time;
    64aa:	ce 01       	movw	r24, r28
    64ac:	01 96       	adiw	r24, 0x01	; 1
    64ae:	9d 83       	std	Y+5, r25	; 0x05
    64b0:	8c 83       	std	Y+4, r24	; 0x04
    64b2:	e9 e0       	ldi	r30, 0x09	; 9
    64b4:	f3 e0       	ldi	r31, 0x03	; 3
    64b6:	ff 83       	std	Y+7, r31	; 0x07
    64b8:	ee 83       	std	Y+6, r30	; 0x06
    64ba:	f3 e0       	ldi	r31, 0x03	; 3
    64bc:	f8 87       	std	Y+8, r31	; 0x08
    64be:	ee 81       	ldd	r30, Y+6	; 0x06
    64c0:	ff 81       	ldd	r31, Y+7	; 0x07
    64c2:	00 80       	ld	r0, Z
    64c4:	8e 81       	ldd	r24, Y+6	; 0x06
    64c6:	9f 81       	ldd	r25, Y+7	; 0x07
    64c8:	01 96       	adiw	r24, 0x01	; 1
    64ca:	9f 83       	std	Y+7, r25	; 0x07
    64cc:	8e 83       	std	Y+6, r24	; 0x06
    64ce:	ec 81       	ldd	r30, Y+4	; 0x04
    64d0:	fd 81       	ldd	r31, Y+5	; 0x05
    64d2:	00 82       	st	Z, r0
    64d4:	8c 81       	ldd	r24, Y+4	; 0x04
    64d6:	9d 81       	ldd	r25, Y+5	; 0x05
    64d8:	01 96       	adiw	r24, 0x01	; 1
    64da:	9d 83       	std	Y+5, r25	; 0x05
    64dc:	8c 83       	std	Y+4, r24	; 0x04
    64de:	98 85       	ldd	r25, Y+8	; 0x08
    64e0:	91 50       	subi	r25, 0x01	; 1
    64e2:	98 87       	std	Y+8, r25	; 0x08
    64e4:	e8 85       	ldd	r30, Y+8	; 0x08
    64e6:	ee 23       	and	r30, r30
    64e8:	51 f7       	brne	.-44     	; 0x64be <stopwatch_get_time+0x28>
    64ea:	20 e0       	ldi	r18, 0x00	; 0
    64ec:	29 81       	ldd	r18, Y+1	; 0x01
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	8a 81       	ldd	r24, Y+2	; 0x02
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	9b 81       	ldd	r25, Y+3	; 0x03
    64f6:	29 87       	std	Y+9, r18	; 0x09
    64f8:	8a 87       	std	Y+10, r24	; 0x0a
    64fa:	9b 87       	std	Y+11, r25	; 0x0b
    64fc:	89 85       	ldd	r24, Y+9	; 0x09
    64fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6500:	ab 85       	ldd	r26, Y+11	; 0x0b
    6502:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    6504:	bc 01       	movw	r22, r24
    6506:	cd 01       	movw	r24, r26
    6508:	2c 96       	adiw	r28, 0x0c	; 12
    650a:	0f b6       	in	r0, 0x3f	; 63
    650c:	f8 94       	cli
    650e:	de bf       	out	0x3e, r29	; 62
    6510:	0f be       	out	0x3f, r0	; 63
    6512:	cd bf       	out	0x3d, r28	; 61
    6514:	cf 91       	pop	r28
    6516:	df 91       	pop	r29
    6518:	08 95       	ret

0000651a <stopwatch_display>:

// Display stopwatch time on LCD
void stopwatch_display(void)
{
    651a:	df 93       	push	r29
    651c:	cf 93       	push	r28
    651e:	cd b7       	in	r28, 0x3d	; 61
    6520:	de b7       	in	r29, 0x3e	; 62
    6522:	60 97       	sbiw	r28, 0x10	; 16
    6524:	0f b6       	in	r0, 0x3f	; 63
    6526:	f8 94       	cli
    6528:	de bf       	out	0x3e, r29	; 62
    652a:	0f be       	out	0x3f, r0	; 63
    652c:	cd bf       	out	0x3d, r28	; 61
    char time_str[16];
    stopwatch_format_time(time_str);
    652e:	ce 01       	movw	r24, r28
    6530:	01 96       	adiw	r24, 0x01	; 1
    6532:	0e 94 0f 33 	call	0x661e	; 0x661e <stopwatch_format_time>
    lcd_print(time_str);
    6536:	ce 01       	movw	r24, r28
    6538:	01 96       	adiw	r24, 0x01	; 1
    653a:	0e 94 88 14 	call	0x2910	; 0x2910 <lcd_print>
}
    653e:	60 96       	adiw	r28, 0x10	; 16
    6540:	0f b6       	in	r0, 0x3f	; 63
    6542:	f8 94       	cli
    6544:	de bf       	out	0x3e, r29	; 62
    6546:	0f be       	out	0x3f, r0	; 63
    6548:	cd bf       	out	0x3d, r28	; 61
    654a:	cf 91       	pop	r28
    654c:	df 91       	pop	r29
    654e:	08 95       	ret

00006550 <stopwatch_set_time>:

// Set stopwatch time
void stopwatch_set_time(stopwatch_time_t time)
{
    6550:	df 93       	push	r29
    6552:	cf 93       	push	r28
    6554:	cd b7       	in	r28, 0x3d	; 61
    6556:	de b7       	in	r29, 0x3e	; 62
    6558:	28 97       	sbiw	r28, 0x08	; 8
    655a:	0f b6       	in	r0, 0x3f	; 63
    655c:	f8 94       	cli
    655e:	de bf       	out	0x3e, r29	; 62
    6560:	0f be       	out	0x3f, r0	; 63
    6562:	cd bf       	out	0x3d, r28	; 61
    6564:	69 83       	std	Y+1, r22	; 0x01
    6566:	7a 83       	std	Y+2, r23	; 0x02
    6568:	8b 83       	std	Y+3, r24	; 0x03
    stopwatch_time = time;
    656a:	89 e0       	ldi	r24, 0x09	; 9
    656c:	93 e0       	ldi	r25, 0x03	; 3
    656e:	9d 83       	std	Y+5, r25	; 0x05
    6570:	8c 83       	std	Y+4, r24	; 0x04
    6572:	fe 01       	movw	r30, r28
    6574:	31 96       	adiw	r30, 0x01	; 1
    6576:	ff 83       	std	Y+7, r31	; 0x07
    6578:	ee 83       	std	Y+6, r30	; 0x06
    657a:	f3 e0       	ldi	r31, 0x03	; 3
    657c:	f8 87       	std	Y+8, r31	; 0x08
    657e:	ee 81       	ldd	r30, Y+6	; 0x06
    6580:	ff 81       	ldd	r31, Y+7	; 0x07
    6582:	00 80       	ld	r0, Z
    6584:	8e 81       	ldd	r24, Y+6	; 0x06
    6586:	9f 81       	ldd	r25, Y+7	; 0x07
    6588:	01 96       	adiw	r24, 0x01	; 1
    658a:	9f 83       	std	Y+7, r25	; 0x07
    658c:	8e 83       	std	Y+6, r24	; 0x06
    658e:	ec 81       	ldd	r30, Y+4	; 0x04
    6590:	fd 81       	ldd	r31, Y+5	; 0x05
    6592:	00 82       	st	Z, r0
    6594:	8c 81       	ldd	r24, Y+4	; 0x04
    6596:	9d 81       	ldd	r25, Y+5	; 0x05
    6598:	01 96       	adiw	r24, 0x01	; 1
    659a:	9d 83       	std	Y+5, r25	; 0x05
    659c:	8c 83       	std	Y+4, r24	; 0x04
    659e:	98 85       	ldd	r25, Y+8	; 0x08
    65a0:	91 50       	subi	r25, 0x01	; 1
    65a2:	98 87       	std	Y+8, r25	; 0x08
    65a4:	e8 85       	ldd	r30, Y+8	; 0x08
    65a6:	ee 23       	and	r30, r30
    65a8:	51 f7       	brne	.-44     	; 0x657e <stopwatch_set_time+0x2e>
}
    65aa:	28 96       	adiw	r28, 0x08	; 8
    65ac:	0f b6       	in	r0, 0x3f	; 63
    65ae:	f8 94       	cli
    65b0:	de bf       	out	0x3e, r29	; 62
    65b2:	0f be       	out	0x3f, r0	; 63
    65b4:	cd bf       	out	0x3d, r28	; 61
    65b6:	cf 91       	pop	r28
    65b8:	df 91       	pop	r29
    65ba:	08 95       	ret

000065bc <stopwatch_increment>:

// Increment stopwatch time
void stopwatch_increment(void)
{
    65bc:	df 93       	push	r29
    65be:	cf 93       	push	r28
    65c0:	cd b7       	in	r28, 0x3d	; 61
    65c2:	de b7       	in	r29, 0x3e	; 62
    stopwatch_time.seconds++;
    65c4:	80 91 0b 03 	lds	r24, 0x030B
    65c8:	8f 5f       	subi	r24, 0xFF	; 255
    65ca:	80 93 0b 03 	sts	0x030B, r24
    
    if (stopwatch_time.seconds >= 60) {
    65ce:	80 91 0b 03 	lds	r24, 0x030B
    65d2:	8c 33       	cpi	r24, 0x3C	; 60
    65d4:	08 f1       	brcs	.+66     	; 0x6618 <stopwatch_increment+0x5c>
        stopwatch_time.seconds = 0;
    65d6:	10 92 0b 03 	sts	0x030B, r1
        stopwatch_time.minutes++;
    65da:	80 91 0a 03 	lds	r24, 0x030A
    65de:	8f 5f       	subi	r24, 0xFF	; 255
    65e0:	80 93 0a 03 	sts	0x030A, r24
        
        if (stopwatch_time.minutes >= 60) {
    65e4:	80 91 0a 03 	lds	r24, 0x030A
    65e8:	8c 33       	cpi	r24, 0x3C	; 60
    65ea:	b0 f0       	brcs	.+44     	; 0x6618 <stopwatch_increment+0x5c>
            stopwatch_time.minutes = 0;
    65ec:	10 92 0a 03 	sts	0x030A, r1
            stopwatch_time.hours++;
    65f0:	80 91 09 03 	lds	r24, 0x0309
    65f4:	8f 5f       	subi	r24, 0xFF	; 255
    65f6:	80 93 09 03 	sts	0x0309, r24
            
            // Limit to 99:59:59
            if (stopwatch_time.hours >= 100) {
    65fa:	80 91 09 03 	lds	r24, 0x0309
    65fe:	84 36       	cpi	r24, 0x64	; 100
    6600:	58 f0       	brcs	.+22     	; 0x6618 <stopwatch_increment+0x5c>
                stopwatch_time.hours = 99;
    6602:	83 e6       	ldi	r24, 0x63	; 99
    6604:	80 93 09 03 	sts	0x0309, r24
                stopwatch_time.minutes = 59;
    6608:	8b e3       	ldi	r24, 0x3B	; 59
    660a:	80 93 0a 03 	sts	0x030A, r24
                stopwatch_time.seconds = 59;
    660e:	8b e3       	ldi	r24, 0x3B	; 59
    6610:	80 93 0b 03 	sts	0x030B, r24
                stopwatch_state = STOPWATCH_STOPPED;
    6614:	10 92 0c 03 	sts	0x030C, r1
            }
        }
    }
}
    6618:	cf 91       	pop	r28
    661a:	df 91       	pop	r29
    661c:	08 95       	ret

0000661e <stopwatch_format_time>:

// Format stopwatch time to string
void stopwatch_format_time(char* buffer)
{
    661e:	df 93       	push	r29
    6620:	cf 93       	push	r28
    6622:	00 d0       	rcall	.+0      	; 0x6624 <stopwatch_format_time+0x6>
    6624:	cd b7       	in	r28, 0x3d	; 61
    6626:	de b7       	in	r29, 0x3e	; 62
    6628:	9a 83       	std	Y+2, r25	; 0x02
    662a:	89 83       	std	Y+1, r24	; 0x01
    sprintf(buffer, "%02d:%02d:%02d", 
    662c:	80 91 09 03 	lds	r24, 0x0309
    6630:	68 2f       	mov	r22, r24
    6632:	70 e0       	ldi	r23, 0x00	; 0
    6634:	80 91 0a 03 	lds	r24, 0x030A
    6638:	28 2f       	mov	r18, r24
    663a:	30 e0       	ldi	r19, 0x00	; 0
    663c:	80 91 0b 03 	lds	r24, 0x030B
    6640:	48 2f       	mov	r20, r24
    6642:	50 e0       	ldi	r21, 0x00	; 0
    6644:	8d b7       	in	r24, 0x3d	; 61
    6646:	9e b7       	in	r25, 0x3e	; 62
    6648:	0a 97       	sbiw	r24, 0x0a	; 10
    664a:	0f b6       	in	r0, 0x3f	; 63
    664c:	f8 94       	cli
    664e:	9e bf       	out	0x3e, r25	; 62
    6650:	0f be       	out	0x3f, r0	; 63
    6652:	8d bf       	out	0x3d, r24	; 61
    6654:	ed b7       	in	r30, 0x3d	; 61
    6656:	fe b7       	in	r31, 0x3e	; 62
    6658:	31 96       	adiw	r30, 0x01	; 1
    665a:	89 81       	ldd	r24, Y+1	; 0x01
    665c:	9a 81       	ldd	r25, Y+2	; 0x02
    665e:	91 83       	std	Z+1, r25	; 0x01
    6660:	80 83       	st	Z, r24
    6662:	8b e7       	ldi	r24, 0x7B	; 123
    6664:	91 e0       	ldi	r25, 0x01	; 1
    6666:	93 83       	std	Z+3, r25	; 0x03
    6668:	82 83       	std	Z+2, r24	; 0x02
    666a:	75 83       	std	Z+5, r23	; 0x05
    666c:	64 83       	std	Z+4, r22	; 0x04
    666e:	37 83       	std	Z+7, r19	; 0x07
    6670:	26 83       	std	Z+6, r18	; 0x06
    6672:	51 87       	std	Z+9, r21	; 0x09
    6674:	40 87       	std	Z+8, r20	; 0x08
    6676:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    667a:	8d b7       	in	r24, 0x3d	; 61
    667c:	9e b7       	in	r25, 0x3e	; 62
    667e:	0a 96       	adiw	r24, 0x0a	; 10
    6680:	0f b6       	in	r0, 0x3f	; 63
    6682:	f8 94       	cli
    6684:	9e bf       	out	0x3e, r25	; 62
    6686:	0f be       	out	0x3f, r0	; 63
    6688:	8d bf       	out	0x3d, r24	; 61
            stopwatch_time.hours, 
            stopwatch_time.minutes, 
            stopwatch_time.seconds);
    668a:	0f 90       	pop	r0
    668c:	0f 90       	pop	r0
    668e:	cf 91       	pop	r28
    6690:	df 91       	pop	r29
    6692:	08 95       	ret

00006694 <increment_hour>:
#include "time_utils.h"
#include "rtc.h"

// Time increment functions
uint8_t increment_hour(uint8_t hour)
{
    6694:	df 93       	push	r29
    6696:	cf 93       	push	r28
    6698:	0f 92       	push	r0
    669a:	cd b7       	in	r28, 0x3d	; 61
    669c:	de b7       	in	r29, 0x3e	; 62
    669e:	89 83       	std	Y+1, r24	; 0x01
    hour++;
    66a0:	89 81       	ldd	r24, Y+1	; 0x01
    66a2:	8f 5f       	subi	r24, 0xFF	; 255
    66a4:	89 83       	std	Y+1, r24	; 0x01
    if (hour >= 24) hour = 0;
    66a6:	89 81       	ldd	r24, Y+1	; 0x01
    66a8:	88 31       	cpi	r24, 0x18	; 24
    66aa:	08 f0       	brcs	.+2      	; 0x66ae <increment_hour+0x1a>
    66ac:	19 82       	std	Y+1, r1	; 0x01
    return hour;
    66ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    66b0:	0f 90       	pop	r0
    66b2:	cf 91       	pop	r28
    66b4:	df 91       	pop	r29
    66b6:	08 95       	ret

000066b8 <decrement_hour>:

uint8_t decrement_hour(uint8_t hour)
{
    66b8:	df 93       	push	r29
    66ba:	cf 93       	push	r28
    66bc:	0f 92       	push	r0
    66be:	cd b7       	in	r28, 0x3d	; 61
    66c0:	de b7       	in	r29, 0x3e	; 62
    66c2:	89 83       	std	Y+1, r24	; 0x01
    if (hour == 0) hour = 23;
    66c4:	89 81       	ldd	r24, Y+1	; 0x01
    66c6:	88 23       	and	r24, r24
    66c8:	19 f4       	brne	.+6      	; 0x66d0 <decrement_hour+0x18>
    66ca:	87 e1       	ldi	r24, 0x17	; 23
    66cc:	89 83       	std	Y+1, r24	; 0x01
    66ce:	03 c0       	rjmp	.+6      	; 0x66d6 <decrement_hour+0x1e>
    else hour--;
    66d0:	89 81       	ldd	r24, Y+1	; 0x01
    66d2:	81 50       	subi	r24, 0x01	; 1
    66d4:	89 83       	std	Y+1, r24	; 0x01
    return hour;
    66d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    66d8:	0f 90       	pop	r0
    66da:	cf 91       	pop	r28
    66dc:	df 91       	pop	r29
    66de:	08 95       	ret

000066e0 <increment_minute>:

uint8_t increment_minute(uint8_t minute)
{
    66e0:	df 93       	push	r29
    66e2:	cf 93       	push	r28
    66e4:	0f 92       	push	r0
    66e6:	cd b7       	in	r28, 0x3d	; 61
    66e8:	de b7       	in	r29, 0x3e	; 62
    66ea:	89 83       	std	Y+1, r24	; 0x01
    minute++;
    66ec:	89 81       	ldd	r24, Y+1	; 0x01
    66ee:	8f 5f       	subi	r24, 0xFF	; 255
    66f0:	89 83       	std	Y+1, r24	; 0x01
    if (minute >= 60) minute = 0;
    66f2:	89 81       	ldd	r24, Y+1	; 0x01
    66f4:	8c 33       	cpi	r24, 0x3C	; 60
    66f6:	08 f0       	brcs	.+2      	; 0x66fa <increment_minute+0x1a>
    66f8:	19 82       	std	Y+1, r1	; 0x01
    return minute;
    66fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    66fc:	0f 90       	pop	r0
    66fe:	cf 91       	pop	r28
    6700:	df 91       	pop	r29
    6702:	08 95       	ret

00006704 <decrement_minute>:

uint8_t decrement_minute(uint8_t minute)
{
    6704:	df 93       	push	r29
    6706:	cf 93       	push	r28
    6708:	0f 92       	push	r0
    670a:	cd b7       	in	r28, 0x3d	; 61
    670c:	de b7       	in	r29, 0x3e	; 62
    670e:	89 83       	std	Y+1, r24	; 0x01
    if (minute == 0) minute = 59;
    6710:	89 81       	ldd	r24, Y+1	; 0x01
    6712:	88 23       	and	r24, r24
    6714:	19 f4       	brne	.+6      	; 0x671c <decrement_minute+0x18>
    6716:	8b e3       	ldi	r24, 0x3B	; 59
    6718:	89 83       	std	Y+1, r24	; 0x01
    671a:	03 c0       	rjmp	.+6      	; 0x6722 <decrement_minute+0x1e>
    else minute--;
    671c:	89 81       	ldd	r24, Y+1	; 0x01
    671e:	81 50       	subi	r24, 0x01	; 1
    6720:	89 83       	std	Y+1, r24	; 0x01
    return minute;
    6722:	89 81       	ldd	r24, Y+1	; 0x01
}
    6724:	0f 90       	pop	r0
    6726:	cf 91       	pop	r28
    6728:	df 91       	pop	r29
    672a:	08 95       	ret

0000672c <increment_second>:

uint8_t increment_second(uint8_t second)
{
    672c:	df 93       	push	r29
    672e:	cf 93       	push	r28
    6730:	0f 92       	push	r0
    6732:	cd b7       	in	r28, 0x3d	; 61
    6734:	de b7       	in	r29, 0x3e	; 62
    6736:	89 83       	std	Y+1, r24	; 0x01
    second++;
    6738:	89 81       	ldd	r24, Y+1	; 0x01
    673a:	8f 5f       	subi	r24, 0xFF	; 255
    673c:	89 83       	std	Y+1, r24	; 0x01
    if (second >= 60) second = 0;
    673e:	89 81       	ldd	r24, Y+1	; 0x01
    6740:	8c 33       	cpi	r24, 0x3C	; 60
    6742:	08 f0       	brcs	.+2      	; 0x6746 <increment_second+0x1a>
    6744:	19 82       	std	Y+1, r1	; 0x01
    return second;
    6746:	89 81       	ldd	r24, Y+1	; 0x01
}
    6748:	0f 90       	pop	r0
    674a:	cf 91       	pop	r28
    674c:	df 91       	pop	r29
    674e:	08 95       	ret

00006750 <decrement_second>:

uint8_t decrement_second(uint8_t second)
{
    6750:	df 93       	push	r29
    6752:	cf 93       	push	r28
    6754:	0f 92       	push	r0
    6756:	cd b7       	in	r28, 0x3d	; 61
    6758:	de b7       	in	r29, 0x3e	; 62
    675a:	89 83       	std	Y+1, r24	; 0x01
    if (second == 0) second = 59;
    675c:	89 81       	ldd	r24, Y+1	; 0x01
    675e:	88 23       	and	r24, r24
    6760:	19 f4       	brne	.+6      	; 0x6768 <decrement_second+0x18>
    6762:	8b e3       	ldi	r24, 0x3B	; 59
    6764:	89 83       	std	Y+1, r24	; 0x01
    6766:	03 c0       	rjmp	.+6      	; 0x676e <decrement_second+0x1e>
    else second--;
    6768:	89 81       	ldd	r24, Y+1	; 0x01
    676a:	81 50       	subi	r24, 0x01	; 1
    676c:	89 83       	std	Y+1, r24	; 0x01
    return second;
    676e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6770:	0f 90       	pop	r0
    6772:	cf 91       	pop	r28
    6774:	df 91       	pop	r29
    6776:	08 95       	ret

00006778 <increment_day>:

uint8_t increment_day(uint8_t day, uint8_t month, uint16_t year)
{
    6778:	df 93       	push	r29
    677a:	cf 93       	push	r28
    677c:	00 d0       	rcall	.+0      	; 0x677e <increment_day+0x6>
    677e:	00 d0       	rcall	.+0      	; 0x6780 <increment_day+0x8>
    6780:	0f 92       	push	r0
    6782:	cd b7       	in	r28, 0x3d	; 61
    6784:	de b7       	in	r29, 0x3e	; 62
    6786:	8a 83       	std	Y+2, r24	; 0x02
    6788:	6b 83       	std	Y+3, r22	; 0x03
    678a:	5d 83       	std	Y+5, r21	; 0x05
    678c:	4c 83       	std	Y+4, r20	; 0x04
    uint8_t max_days = days_in_month(month, year);
    678e:	2c 81       	ldd	r18, Y+4	; 0x04
    6790:	3d 81       	ldd	r19, Y+5	; 0x05
    6792:	8b 81       	ldd	r24, Y+3	; 0x03
    6794:	b9 01       	movw	r22, r18
    6796:	0e 94 92 36 	call	0x6d24	; 0x6d24 <days_in_month>
    679a:	89 83       	std	Y+1, r24	; 0x01
    day++;
    679c:	8a 81       	ldd	r24, Y+2	; 0x02
    679e:	8f 5f       	subi	r24, 0xFF	; 255
    67a0:	8a 83       	std	Y+2, r24	; 0x02
    if (day > max_days) day = 1;
    67a2:	9a 81       	ldd	r25, Y+2	; 0x02
    67a4:	89 81       	ldd	r24, Y+1	; 0x01
    67a6:	89 17       	cp	r24, r25
    67a8:	10 f4       	brcc	.+4      	; 0x67ae <increment_day+0x36>
    67aa:	81 e0       	ldi	r24, 0x01	; 1
    67ac:	8a 83       	std	Y+2, r24	; 0x02
    return day;
    67ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    67b0:	0f 90       	pop	r0
    67b2:	0f 90       	pop	r0
    67b4:	0f 90       	pop	r0
    67b6:	0f 90       	pop	r0
    67b8:	0f 90       	pop	r0
    67ba:	cf 91       	pop	r28
    67bc:	df 91       	pop	r29
    67be:	08 95       	ret

000067c0 <decrement_day>:

uint8_t decrement_day(uint8_t day, uint8_t month, uint16_t year)
{
    67c0:	df 93       	push	r29
    67c2:	cf 93       	push	r28
    67c4:	00 d0       	rcall	.+0      	; 0x67c6 <decrement_day+0x6>
    67c6:	00 d0       	rcall	.+0      	; 0x67c8 <decrement_day+0x8>
    67c8:	cd b7       	in	r28, 0x3d	; 61
    67ca:	de b7       	in	r29, 0x3e	; 62
    67cc:	89 83       	std	Y+1, r24	; 0x01
    67ce:	6a 83       	std	Y+2, r22	; 0x02
    67d0:	5c 83       	std	Y+4, r21	; 0x04
    67d2:	4b 83       	std	Y+3, r20	; 0x03
    if (day == 1) {
    67d4:	89 81       	ldd	r24, Y+1	; 0x01
    67d6:	81 30       	cpi	r24, 0x01	; 1
    67d8:	41 f4       	brne	.+16     	; 0x67ea <decrement_day+0x2a>
        day = days_in_month(month, year);
    67da:	2b 81       	ldd	r18, Y+3	; 0x03
    67dc:	3c 81       	ldd	r19, Y+4	; 0x04
    67de:	8a 81       	ldd	r24, Y+2	; 0x02
    67e0:	b9 01       	movw	r22, r18
    67e2:	0e 94 92 36 	call	0x6d24	; 0x6d24 <days_in_month>
    67e6:	89 83       	std	Y+1, r24	; 0x01
    67e8:	03 c0       	rjmp	.+6      	; 0x67f0 <decrement_day+0x30>
    } else {
        day--;
    67ea:	89 81       	ldd	r24, Y+1	; 0x01
    67ec:	81 50       	subi	r24, 0x01	; 1
    67ee:	89 83       	std	Y+1, r24	; 0x01
    }
    return day;
    67f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    67f2:	0f 90       	pop	r0
    67f4:	0f 90       	pop	r0
    67f6:	0f 90       	pop	r0
    67f8:	0f 90       	pop	r0
    67fa:	cf 91       	pop	r28
    67fc:	df 91       	pop	r29
    67fe:	08 95       	ret

00006800 <increment_month>:

uint8_t increment_month(uint8_t month)
{
    6800:	df 93       	push	r29
    6802:	cf 93       	push	r28
    6804:	0f 92       	push	r0
    6806:	cd b7       	in	r28, 0x3d	; 61
    6808:	de b7       	in	r29, 0x3e	; 62
    680a:	89 83       	std	Y+1, r24	; 0x01
    month++;
    680c:	89 81       	ldd	r24, Y+1	; 0x01
    680e:	8f 5f       	subi	r24, 0xFF	; 255
    6810:	89 83       	std	Y+1, r24	; 0x01
    if (month > 12) month = 1;
    6812:	89 81       	ldd	r24, Y+1	; 0x01
    6814:	8d 30       	cpi	r24, 0x0D	; 13
    6816:	10 f0       	brcs	.+4      	; 0x681c <increment_month+0x1c>
    6818:	81 e0       	ldi	r24, 0x01	; 1
    681a:	89 83       	std	Y+1, r24	; 0x01
    return month;
    681c:	89 81       	ldd	r24, Y+1	; 0x01
}
    681e:	0f 90       	pop	r0
    6820:	cf 91       	pop	r28
    6822:	df 91       	pop	r29
    6824:	08 95       	ret

00006826 <decrement_month>:

uint8_t decrement_month(uint8_t month)
{
    6826:	df 93       	push	r29
    6828:	cf 93       	push	r28
    682a:	0f 92       	push	r0
    682c:	cd b7       	in	r28, 0x3d	; 61
    682e:	de b7       	in	r29, 0x3e	; 62
    6830:	89 83       	std	Y+1, r24	; 0x01
    if (month == 1) month = 12;
    6832:	89 81       	ldd	r24, Y+1	; 0x01
    6834:	81 30       	cpi	r24, 0x01	; 1
    6836:	19 f4       	brne	.+6      	; 0x683e <decrement_month+0x18>
    6838:	8c e0       	ldi	r24, 0x0C	; 12
    683a:	89 83       	std	Y+1, r24	; 0x01
    683c:	03 c0       	rjmp	.+6      	; 0x6844 <decrement_month+0x1e>
    else month--;
    683e:	89 81       	ldd	r24, Y+1	; 0x01
    6840:	81 50       	subi	r24, 0x01	; 1
    6842:	89 83       	std	Y+1, r24	; 0x01
    return month;
    6844:	89 81       	ldd	r24, Y+1	; 0x01
}
    6846:	0f 90       	pop	r0
    6848:	cf 91       	pop	r28
    684a:	df 91       	pop	r29
    684c:	08 95       	ret

0000684e <increment_year>:

uint16_t increment_year(uint16_t year)
{
    684e:	df 93       	push	r29
    6850:	cf 93       	push	r28
    6852:	00 d0       	rcall	.+0      	; 0x6854 <increment_year+0x6>
    6854:	cd b7       	in	r28, 0x3d	; 61
    6856:	de b7       	in	r29, 0x3e	; 62
    6858:	9a 83       	std	Y+2, r25	; 0x02
    685a:	89 83       	std	Y+1, r24	; 0x01
    year++;
    685c:	89 81       	ldd	r24, Y+1	; 0x01
    685e:	9a 81       	ldd	r25, Y+2	; 0x02
    6860:	01 96       	adiw	r24, 0x01	; 1
    6862:	9a 83       	std	Y+2, r25	; 0x02
    6864:	89 83       	std	Y+1, r24	; 0x01
    if (year > 2099) year = 2000;
    6866:	89 81       	ldd	r24, Y+1	; 0x01
    6868:	9a 81       	ldd	r25, Y+2	; 0x02
    686a:	28 e0       	ldi	r18, 0x08	; 8
    686c:	84 33       	cpi	r24, 0x34	; 52
    686e:	92 07       	cpc	r25, r18
    6870:	20 f0       	brcs	.+8      	; 0x687a <increment_year+0x2c>
    6872:	80 ed       	ldi	r24, 0xD0	; 208
    6874:	97 e0       	ldi	r25, 0x07	; 7
    6876:	9a 83       	std	Y+2, r25	; 0x02
    6878:	89 83       	std	Y+1, r24	; 0x01
    return year;
    687a:	89 81       	ldd	r24, Y+1	; 0x01
    687c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    687e:	0f 90       	pop	r0
    6880:	0f 90       	pop	r0
    6882:	cf 91       	pop	r28
    6884:	df 91       	pop	r29
    6886:	08 95       	ret

00006888 <decrement_year>:

uint16_t decrement_year(uint16_t year)
{
    6888:	df 93       	push	r29
    688a:	cf 93       	push	r28
    688c:	00 d0       	rcall	.+0      	; 0x688e <decrement_year+0x6>
    688e:	cd b7       	in	r28, 0x3d	; 61
    6890:	de b7       	in	r29, 0x3e	; 62
    6892:	9a 83       	std	Y+2, r25	; 0x02
    6894:	89 83       	std	Y+1, r24	; 0x01
    if (year == 2000) year = 2099;
    6896:	89 81       	ldd	r24, Y+1	; 0x01
    6898:	9a 81       	ldd	r25, Y+2	; 0x02
    689a:	27 e0       	ldi	r18, 0x07	; 7
    689c:	80 3d       	cpi	r24, 0xD0	; 208
    689e:	92 07       	cpc	r25, r18
    68a0:	29 f4       	brne	.+10     	; 0x68ac <decrement_year+0x24>
    68a2:	83 e3       	ldi	r24, 0x33	; 51
    68a4:	98 e0       	ldi	r25, 0x08	; 8
    68a6:	9a 83       	std	Y+2, r25	; 0x02
    68a8:	89 83       	std	Y+1, r24	; 0x01
    68aa:	05 c0       	rjmp	.+10     	; 0x68b6 <decrement_year+0x2e>
    else year--;
    68ac:	89 81       	ldd	r24, Y+1	; 0x01
    68ae:	9a 81       	ldd	r25, Y+2	; 0x02
    68b0:	01 97       	sbiw	r24, 0x01	; 1
    68b2:	9a 83       	std	Y+2, r25	; 0x02
    68b4:	89 83       	std	Y+1, r24	; 0x01
    return year;
    68b6:	89 81       	ldd	r24, Y+1	; 0x01
    68b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    68ba:	0f 90       	pop	r0
    68bc:	0f 90       	pop	r0
    68be:	cf 91       	pop	r28
    68c0:	df 91       	pop	r29
    68c2:	08 95       	ret

000068c4 <format_time_to_string>:

// Time formatting functions
void format_time_to_string(time_t* time, char* buffer)
{
    68c4:	df 93       	push	r29
    68c6:	cf 93       	push	r28
    68c8:	00 d0       	rcall	.+0      	; 0x68ca <format_time_to_string+0x6>
    68ca:	00 d0       	rcall	.+0      	; 0x68cc <format_time_to_string+0x8>
    68cc:	cd b7       	in	r28, 0x3d	; 61
    68ce:	de b7       	in	r29, 0x3e	; 62
    68d0:	9a 83       	std	Y+2, r25	; 0x02
    68d2:	89 83       	std	Y+1, r24	; 0x01
    68d4:	7c 83       	std	Y+4, r23	; 0x04
    68d6:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(buffer, "%02d:%02d:%02d", time->hour, time->minute, time->second);
    68d8:	e9 81       	ldd	r30, Y+1	; 0x01
    68da:	fa 81       	ldd	r31, Y+2	; 0x02
    68dc:	82 81       	ldd	r24, Z+2	; 0x02
    68de:	48 2f       	mov	r20, r24
    68e0:	50 e0       	ldi	r21, 0x00	; 0
    68e2:	e9 81       	ldd	r30, Y+1	; 0x01
    68e4:	fa 81       	ldd	r31, Y+2	; 0x02
    68e6:	81 81       	ldd	r24, Z+1	; 0x01
    68e8:	68 2f       	mov	r22, r24
    68ea:	70 e0       	ldi	r23, 0x00	; 0
    68ec:	e9 81       	ldd	r30, Y+1	; 0x01
    68ee:	fa 81       	ldd	r31, Y+2	; 0x02
    68f0:	80 81       	ld	r24, Z
    68f2:	28 2f       	mov	r18, r24
    68f4:	30 e0       	ldi	r19, 0x00	; 0
    68f6:	8d b7       	in	r24, 0x3d	; 61
    68f8:	9e b7       	in	r25, 0x3e	; 62
    68fa:	0a 97       	sbiw	r24, 0x0a	; 10
    68fc:	0f b6       	in	r0, 0x3f	; 63
    68fe:	f8 94       	cli
    6900:	9e bf       	out	0x3e, r25	; 62
    6902:	0f be       	out	0x3f, r0	; 63
    6904:	8d bf       	out	0x3d, r24	; 61
    6906:	ed b7       	in	r30, 0x3d	; 61
    6908:	fe b7       	in	r31, 0x3e	; 62
    690a:	31 96       	adiw	r30, 0x01	; 1
    690c:	8b 81       	ldd	r24, Y+3	; 0x03
    690e:	9c 81       	ldd	r25, Y+4	; 0x04
    6910:	91 83       	std	Z+1, r25	; 0x01
    6912:	80 83       	st	Z, r24
    6914:	8a e8       	ldi	r24, 0x8A	; 138
    6916:	91 e0       	ldi	r25, 0x01	; 1
    6918:	93 83       	std	Z+3, r25	; 0x03
    691a:	82 83       	std	Z+2, r24	; 0x02
    691c:	55 83       	std	Z+5, r21	; 0x05
    691e:	44 83       	std	Z+4, r20	; 0x04
    6920:	77 83       	std	Z+7, r23	; 0x07
    6922:	66 83       	std	Z+6, r22	; 0x06
    6924:	31 87       	std	Z+9, r19	; 0x09
    6926:	20 87       	std	Z+8, r18	; 0x08
    6928:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    692c:	8d b7       	in	r24, 0x3d	; 61
    692e:	9e b7       	in	r25, 0x3e	; 62
    6930:	0a 96       	adiw	r24, 0x0a	; 10
    6932:	0f b6       	in	r0, 0x3f	; 63
    6934:	f8 94       	cli
    6936:	9e bf       	out	0x3e, r25	; 62
    6938:	0f be       	out	0x3f, r0	; 63
    693a:	8d bf       	out	0x3d, r24	; 61
}
    693c:	0f 90       	pop	r0
    693e:	0f 90       	pop	r0
    6940:	0f 90       	pop	r0
    6942:	0f 90       	pop	r0
    6944:	cf 91       	pop	r28
    6946:	df 91       	pop	r29
    6948:	08 95       	ret

0000694a <format_date_to_string>:

void format_date_to_string(date_t* date, char* buffer)
{
    694a:	df 93       	push	r29
    694c:	cf 93       	push	r28
    694e:	00 d0       	rcall	.+0      	; 0x6950 <format_date_to_string+0x6>
    6950:	00 d0       	rcall	.+0      	; 0x6952 <format_date_to_string+0x8>
    6952:	cd b7       	in	r28, 0x3d	; 61
    6954:	de b7       	in	r29, 0x3e	; 62
    6956:	9a 83       	std	Y+2, r25	; 0x02
    6958:	89 83       	std	Y+1, r24	; 0x01
    695a:	7c 83       	std	Y+4, r23	; 0x04
    695c:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(buffer, "%02d/%02d/%04d", date->day, date->month, date->year);
    695e:	e9 81       	ldd	r30, Y+1	; 0x01
    6960:	fa 81       	ldd	r31, Y+2	; 0x02
    6962:	80 81       	ld	r24, Z
    6964:	68 2f       	mov	r22, r24
    6966:	70 e0       	ldi	r23, 0x00	; 0
    6968:	e9 81       	ldd	r30, Y+1	; 0x01
    696a:	fa 81       	ldd	r31, Y+2	; 0x02
    696c:	81 81       	ldd	r24, Z+1	; 0x01
    696e:	28 2f       	mov	r18, r24
    6970:	30 e0       	ldi	r19, 0x00	; 0
    6972:	e9 81       	ldd	r30, Y+1	; 0x01
    6974:	fa 81       	ldd	r31, Y+2	; 0x02
    6976:	42 81       	ldd	r20, Z+2	; 0x02
    6978:	53 81       	ldd	r21, Z+3	; 0x03
    697a:	8d b7       	in	r24, 0x3d	; 61
    697c:	9e b7       	in	r25, 0x3e	; 62
    697e:	0a 97       	sbiw	r24, 0x0a	; 10
    6980:	0f b6       	in	r0, 0x3f	; 63
    6982:	f8 94       	cli
    6984:	9e bf       	out	0x3e, r25	; 62
    6986:	0f be       	out	0x3f, r0	; 63
    6988:	8d bf       	out	0x3d, r24	; 61
    698a:	ed b7       	in	r30, 0x3d	; 61
    698c:	fe b7       	in	r31, 0x3e	; 62
    698e:	31 96       	adiw	r30, 0x01	; 1
    6990:	8b 81       	ldd	r24, Y+3	; 0x03
    6992:	9c 81       	ldd	r25, Y+4	; 0x04
    6994:	91 83       	std	Z+1, r25	; 0x01
    6996:	80 83       	st	Z, r24
    6998:	89 e9       	ldi	r24, 0x99	; 153
    699a:	91 e0       	ldi	r25, 0x01	; 1
    699c:	93 83       	std	Z+3, r25	; 0x03
    699e:	82 83       	std	Z+2, r24	; 0x02
    69a0:	75 83       	std	Z+5, r23	; 0x05
    69a2:	64 83       	std	Z+4, r22	; 0x04
    69a4:	37 83       	std	Z+7, r19	; 0x07
    69a6:	26 83       	std	Z+6, r18	; 0x06
    69a8:	51 87       	std	Z+9, r21	; 0x09
    69aa:	40 87       	std	Z+8, r20	; 0x08
    69ac:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    69b0:	8d b7       	in	r24, 0x3d	; 61
    69b2:	9e b7       	in	r25, 0x3e	; 62
    69b4:	0a 96       	adiw	r24, 0x0a	; 10
    69b6:	0f b6       	in	r0, 0x3f	; 63
    69b8:	f8 94       	cli
    69ba:	9e bf       	out	0x3e, r25	; 62
    69bc:	0f be       	out	0x3f, r0	; 63
    69be:	8d bf       	out	0x3d, r24	; 61
}
    69c0:	0f 90       	pop	r0
    69c2:	0f 90       	pop	r0
    69c4:	0f 90       	pop	r0
    69c6:	0f 90       	pop	r0
    69c8:	cf 91       	pop	r28
    69ca:	df 91       	pop	r29
    69cc:	08 95       	ret

000069ce <format_date_short>:

// Shorter date format for LCD display (DD/MM/YY)
void format_date_short(date_t* date, char* buffer)
{
    69ce:	ef 92       	push	r14
    69d0:	ff 92       	push	r15
    69d2:	0f 93       	push	r16
    69d4:	1f 93       	push	r17
    69d6:	df 93       	push	r29
    69d8:	cf 93       	push	r28
    69da:	00 d0       	rcall	.+0      	; 0x69dc <format_date_short+0xe>
    69dc:	00 d0       	rcall	.+0      	; 0x69de <format_date_short+0x10>
    69de:	cd b7       	in	r28, 0x3d	; 61
    69e0:	de b7       	in	r29, 0x3e	; 62
    69e2:	9a 83       	std	Y+2, r25	; 0x02
    69e4:	89 83       	std	Y+1, r24	; 0x01
    69e6:	7c 83       	std	Y+4, r23	; 0x04
    69e8:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(buffer, "%02d/%02d/%02d", date->day, date->month, date->year % 100);
    69ea:	e9 81       	ldd	r30, Y+1	; 0x01
    69ec:	fa 81       	ldd	r31, Y+2	; 0x02
    69ee:	80 81       	ld	r24, Z
    69f0:	08 2f       	mov	r16, r24
    69f2:	10 e0       	ldi	r17, 0x00	; 0
    69f4:	e9 81       	ldd	r30, Y+1	; 0x01
    69f6:	fa 81       	ldd	r31, Y+2	; 0x02
    69f8:	81 81       	ldd	r24, Z+1	; 0x01
    69fa:	e8 2e       	mov	r14, r24
    69fc:	ff 24       	eor	r15, r15
    69fe:	e9 81       	ldd	r30, Y+1	; 0x01
    6a00:	fa 81       	ldd	r31, Y+2	; 0x02
    6a02:	82 81       	ldd	r24, Z+2	; 0x02
    6a04:	93 81       	ldd	r25, Z+3	; 0x03
    6a06:	24 e6       	ldi	r18, 0x64	; 100
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	b9 01       	movw	r22, r18
    6a0c:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6a10:	9c 01       	movw	r18, r24
    6a12:	8d b7       	in	r24, 0x3d	; 61
    6a14:	9e b7       	in	r25, 0x3e	; 62
    6a16:	0a 97       	sbiw	r24, 0x0a	; 10
    6a18:	0f b6       	in	r0, 0x3f	; 63
    6a1a:	f8 94       	cli
    6a1c:	9e bf       	out	0x3e, r25	; 62
    6a1e:	0f be       	out	0x3f, r0	; 63
    6a20:	8d bf       	out	0x3d, r24	; 61
    6a22:	ed b7       	in	r30, 0x3d	; 61
    6a24:	fe b7       	in	r31, 0x3e	; 62
    6a26:	31 96       	adiw	r30, 0x01	; 1
    6a28:	8b 81       	ldd	r24, Y+3	; 0x03
    6a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    6a2c:	91 83       	std	Z+1, r25	; 0x01
    6a2e:	80 83       	st	Z, r24
    6a30:	88 ea       	ldi	r24, 0xA8	; 168
    6a32:	91 e0       	ldi	r25, 0x01	; 1
    6a34:	93 83       	std	Z+3, r25	; 0x03
    6a36:	82 83       	std	Z+2, r24	; 0x02
    6a38:	15 83       	std	Z+5, r17	; 0x05
    6a3a:	04 83       	std	Z+4, r16	; 0x04
    6a3c:	f7 82       	std	Z+7, r15	; 0x07
    6a3e:	e6 82       	std	Z+6, r14	; 0x06
    6a40:	31 87       	std	Z+9, r19	; 0x09
    6a42:	20 87       	std	Z+8, r18	; 0x08
    6a44:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    6a48:	8d b7       	in	r24, 0x3d	; 61
    6a4a:	9e b7       	in	r25, 0x3e	; 62
    6a4c:	0a 96       	adiw	r24, 0x0a	; 10
    6a4e:	0f b6       	in	r0, 0x3f	; 63
    6a50:	f8 94       	cli
    6a52:	9e bf       	out	0x3e, r25	; 62
    6a54:	0f be       	out	0x3f, r0	; 63
    6a56:	8d bf       	out	0x3d, r24	; 61
}
    6a58:	0f 90       	pop	r0
    6a5a:	0f 90       	pop	r0
    6a5c:	0f 90       	pop	r0
    6a5e:	0f 90       	pop	r0
    6a60:	cf 91       	pop	r28
    6a62:	df 91       	pop	r29
    6a64:	1f 91       	pop	r17
    6a66:	0f 91       	pop	r16
    6a68:	ff 90       	pop	r15
    6a6a:	ef 90       	pop	r14
    6a6c:	08 95       	ret

00006a6e <format_stopwatch_to_string>:

void format_stopwatch_to_string(stopwatch_time_t* time, char* buffer)
{
    6a6e:	df 93       	push	r29
    6a70:	cf 93       	push	r28
    6a72:	00 d0       	rcall	.+0      	; 0x6a74 <format_stopwatch_to_string+0x6>
    6a74:	00 d0       	rcall	.+0      	; 0x6a76 <format_stopwatch_to_string+0x8>
    6a76:	cd b7       	in	r28, 0x3d	; 61
    6a78:	de b7       	in	r29, 0x3e	; 62
    6a7a:	9a 83       	std	Y+2, r25	; 0x02
    6a7c:	89 83       	std	Y+1, r24	; 0x01
    6a7e:	7c 83       	std	Y+4, r23	; 0x04
    6a80:	6b 83       	std	Y+3, r22	; 0x03
    sprintf(buffer, "%02d:%02d:%02d", time->hours, time->minutes, time->seconds);
    6a82:	e9 81       	ldd	r30, Y+1	; 0x01
    6a84:	fa 81       	ldd	r31, Y+2	; 0x02
    6a86:	80 81       	ld	r24, Z
    6a88:	48 2f       	mov	r20, r24
    6a8a:	50 e0       	ldi	r21, 0x00	; 0
    6a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    6a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    6a90:	81 81       	ldd	r24, Z+1	; 0x01
    6a92:	68 2f       	mov	r22, r24
    6a94:	70 e0       	ldi	r23, 0x00	; 0
    6a96:	e9 81       	ldd	r30, Y+1	; 0x01
    6a98:	fa 81       	ldd	r31, Y+2	; 0x02
    6a9a:	82 81       	ldd	r24, Z+2	; 0x02
    6a9c:	28 2f       	mov	r18, r24
    6a9e:	30 e0       	ldi	r19, 0x00	; 0
    6aa0:	8d b7       	in	r24, 0x3d	; 61
    6aa2:	9e b7       	in	r25, 0x3e	; 62
    6aa4:	0a 97       	sbiw	r24, 0x0a	; 10
    6aa6:	0f b6       	in	r0, 0x3f	; 63
    6aa8:	f8 94       	cli
    6aaa:	9e bf       	out	0x3e, r25	; 62
    6aac:	0f be       	out	0x3f, r0	; 63
    6aae:	8d bf       	out	0x3d, r24	; 61
    6ab0:	ed b7       	in	r30, 0x3d	; 61
    6ab2:	fe b7       	in	r31, 0x3e	; 62
    6ab4:	31 96       	adiw	r30, 0x01	; 1
    6ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    6aba:	91 83       	std	Z+1, r25	; 0x01
    6abc:	80 83       	st	Z, r24
    6abe:	8a e8       	ldi	r24, 0x8A	; 138
    6ac0:	91 e0       	ldi	r25, 0x01	; 1
    6ac2:	93 83       	std	Z+3, r25	; 0x03
    6ac4:	82 83       	std	Z+2, r24	; 0x02
    6ac6:	55 83       	std	Z+5, r21	; 0x05
    6ac8:	44 83       	std	Z+4, r20	; 0x04
    6aca:	77 83       	std	Z+7, r23	; 0x07
    6acc:	66 83       	std	Z+6, r22	; 0x06
    6ace:	31 87       	std	Z+9, r19	; 0x09
    6ad0:	20 87       	std	Z+8, r18	; 0x08
    6ad2:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    6ad6:	8d b7       	in	r24, 0x3d	; 61
    6ad8:	9e b7       	in	r25, 0x3e	; 62
    6ada:	0a 96       	adiw	r24, 0x0a	; 10
    6adc:	0f b6       	in	r0, 0x3f	; 63
    6ade:	f8 94       	cli
    6ae0:	9e bf       	out	0x3e, r25	; 62
    6ae2:	0f be       	out	0x3f, r0	; 63
    6ae4:	8d bf       	out	0x3d, r24	; 61
}
    6ae6:	0f 90       	pop	r0
    6ae8:	0f 90       	pop	r0
    6aea:	0f 90       	pop	r0
    6aec:	0f 90       	pop	r0
    6aee:	cf 91       	pop	r28
    6af0:	df 91       	pop	r29
    6af2:	08 95       	ret

00006af4 <format_countdown_to_string>:

void format_countdown_to_string(uint16_t seconds, char* buffer)
{
    6af4:	df 93       	push	r29
    6af6:	cf 93       	push	r28
    6af8:	00 d0       	rcall	.+0      	; 0x6afa <format_countdown_to_string+0x6>
    6afa:	00 d0       	rcall	.+0      	; 0x6afc <format_countdown_to_string+0x8>
    6afc:	00 d0       	rcall	.+0      	; 0x6afe <format_countdown_to_string+0xa>
    6afe:	cd b7       	in	r28, 0x3d	; 61
    6b00:	de b7       	in	r29, 0x3e	; 62
    6b02:	9c 83       	std	Y+4, r25	; 0x04
    6b04:	8b 83       	std	Y+3, r24	; 0x03
    6b06:	7e 83       	std	Y+6, r23	; 0x06
    6b08:	6d 83       	std	Y+5, r22	; 0x05
    uint8_t minutes = seconds / 60;
    6b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    6b0e:	2c e3       	ldi	r18, 0x3C	; 60
    6b10:	30 e0       	ldi	r19, 0x00	; 0
    6b12:	b9 01       	movw	r22, r18
    6b14:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6b18:	cb 01       	movw	r24, r22
    6b1a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t secs = seconds % 60;
    6b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b20:	2c e3       	ldi	r18, 0x3C	; 60
    6b22:	30 e0       	ldi	r19, 0x00	; 0
    6b24:	b9 01       	movw	r22, r18
    6b26:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6b2a:	89 83       	std	Y+1, r24	; 0x01
    sprintf(buffer, "%02d:%02d", minutes, secs);
    6b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b2e:	28 2f       	mov	r18, r24
    6b30:	30 e0       	ldi	r19, 0x00	; 0
    6b32:	89 81       	ldd	r24, Y+1	; 0x01
    6b34:	48 2f       	mov	r20, r24
    6b36:	50 e0       	ldi	r21, 0x00	; 0
    6b38:	8d b7       	in	r24, 0x3d	; 61
    6b3a:	9e b7       	in	r25, 0x3e	; 62
    6b3c:	08 97       	sbiw	r24, 0x08	; 8
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	9e bf       	out	0x3e, r25	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	8d bf       	out	0x3d, r24	; 61
    6b48:	ed b7       	in	r30, 0x3d	; 61
    6b4a:	fe b7       	in	r31, 0x3e	; 62
    6b4c:	31 96       	adiw	r30, 0x01	; 1
    6b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b50:	9e 81       	ldd	r25, Y+6	; 0x06
    6b52:	91 83       	std	Z+1, r25	; 0x01
    6b54:	80 83       	st	Z, r24
    6b56:	87 eb       	ldi	r24, 0xB7	; 183
    6b58:	91 e0       	ldi	r25, 0x01	; 1
    6b5a:	93 83       	std	Z+3, r25	; 0x03
    6b5c:	82 83       	std	Z+2, r24	; 0x02
    6b5e:	35 83       	std	Z+5, r19	; 0x05
    6b60:	24 83       	std	Z+4, r18	; 0x04
    6b62:	57 83       	std	Z+7, r21	; 0x07
    6b64:	46 83       	std	Z+6, r20	; 0x06
    6b66:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <sprintf>
    6b6a:	8d b7       	in	r24, 0x3d	; 61
    6b6c:	9e b7       	in	r25, 0x3e	; 62
    6b6e:	08 96       	adiw	r24, 0x08	; 8
    6b70:	0f b6       	in	r0, 0x3f	; 63
    6b72:	f8 94       	cli
    6b74:	9e bf       	out	0x3e, r25	; 62
    6b76:	0f be       	out	0x3f, r0	; 63
    6b78:	8d bf       	out	0x3d, r24	; 61
}
    6b7a:	26 96       	adiw	r28, 0x06	; 6
    6b7c:	0f b6       	in	r0, 0x3f	; 63
    6b7e:	f8 94       	cli
    6b80:	de bf       	out	0x3e, r29	; 62
    6b82:	0f be       	out	0x3f, r0	; 63
    6b84:	cd bf       	out	0x3d, r28	; 61
    6b86:	cf 91       	pop	r28
    6b88:	df 91       	pop	r29
    6b8a:	08 95       	ret

00006b8c <is_valid_hour>:

// Time validation functions
bool is_valid_hour(uint8_t hour)
{
    6b8c:	df 93       	push	r29
    6b8e:	cf 93       	push	r28
    6b90:	00 d0       	rcall	.+0      	; 0x6b92 <is_valid_hour+0x6>
    6b92:	cd b7       	in	r28, 0x3d	; 61
    6b94:	de b7       	in	r29, 0x3e	; 62
    6b96:	89 83       	std	Y+1, r24	; 0x01
    return (hour < 24);
    6b98:	1a 82       	std	Y+2, r1	; 0x02
    6b9a:	89 81       	ldd	r24, Y+1	; 0x01
    6b9c:	88 31       	cpi	r24, 0x18	; 24
    6b9e:	10 f4       	brcc	.+4      	; 0x6ba4 <is_valid_hour+0x18>
    6ba0:	81 e0       	ldi	r24, 0x01	; 1
    6ba2:	8a 83       	std	Y+2, r24	; 0x02
    6ba4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6ba6:	0f 90       	pop	r0
    6ba8:	0f 90       	pop	r0
    6baa:	cf 91       	pop	r28
    6bac:	df 91       	pop	r29
    6bae:	08 95       	ret

00006bb0 <is_valid_minute>:

bool is_valid_minute(uint8_t minute)
{
    6bb0:	df 93       	push	r29
    6bb2:	cf 93       	push	r28
    6bb4:	00 d0       	rcall	.+0      	; 0x6bb6 <is_valid_minute+0x6>
    6bb6:	cd b7       	in	r28, 0x3d	; 61
    6bb8:	de b7       	in	r29, 0x3e	; 62
    6bba:	89 83       	std	Y+1, r24	; 0x01
    return (minute < 60);
    6bbc:	1a 82       	std	Y+2, r1	; 0x02
    6bbe:	89 81       	ldd	r24, Y+1	; 0x01
    6bc0:	8c 33       	cpi	r24, 0x3C	; 60
    6bc2:	10 f4       	brcc	.+4      	; 0x6bc8 <is_valid_minute+0x18>
    6bc4:	81 e0       	ldi	r24, 0x01	; 1
    6bc6:	8a 83       	std	Y+2, r24	; 0x02
    6bc8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6bca:	0f 90       	pop	r0
    6bcc:	0f 90       	pop	r0
    6bce:	cf 91       	pop	r28
    6bd0:	df 91       	pop	r29
    6bd2:	08 95       	ret

00006bd4 <is_valid_second>:

bool is_valid_second(uint8_t second)
{
    6bd4:	df 93       	push	r29
    6bd6:	cf 93       	push	r28
    6bd8:	00 d0       	rcall	.+0      	; 0x6bda <is_valid_second+0x6>
    6bda:	cd b7       	in	r28, 0x3d	; 61
    6bdc:	de b7       	in	r29, 0x3e	; 62
    6bde:	89 83       	std	Y+1, r24	; 0x01
    return (second < 60);
    6be0:	1a 82       	std	Y+2, r1	; 0x02
    6be2:	89 81       	ldd	r24, Y+1	; 0x01
    6be4:	8c 33       	cpi	r24, 0x3C	; 60
    6be6:	10 f4       	brcc	.+4      	; 0x6bec <is_valid_second+0x18>
    6be8:	81 e0       	ldi	r24, 0x01	; 1
    6bea:	8a 83       	std	Y+2, r24	; 0x02
    6bec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6bee:	0f 90       	pop	r0
    6bf0:	0f 90       	pop	r0
    6bf2:	cf 91       	pop	r28
    6bf4:	df 91       	pop	r29
    6bf6:	08 95       	ret

00006bf8 <is_valid_day>:

bool is_valid_day(uint8_t day, uint8_t month, uint16_t year)
{
    6bf8:	df 93       	push	r29
    6bfa:	cf 93       	push	r28
    6bfc:	00 d0       	rcall	.+0      	; 0x6bfe <is_valid_day+0x6>
    6bfe:	00 d0       	rcall	.+0      	; 0x6c00 <is_valid_day+0x8>
    6c00:	00 d0       	rcall	.+0      	; 0x6c02 <is_valid_day+0xa>
    6c02:	cd b7       	in	r28, 0x3d	; 61
    6c04:	de b7       	in	r29, 0x3e	; 62
    6c06:	89 83       	std	Y+1, r24	; 0x01
    6c08:	6a 83       	std	Y+2, r22	; 0x02
    6c0a:	5c 83       	std	Y+4, r21	; 0x04
    6c0c:	4b 83       	std	Y+3, r20	; 0x03
    return (day >= 1 && day <= days_in_month(month, year));
    6c0e:	89 81       	ldd	r24, Y+1	; 0x01
    6c10:	88 23       	and	r24, r24
    6c12:	79 f0       	breq	.+30     	; 0x6c32 <is_valid_day+0x3a>
    6c14:	2b 81       	ldd	r18, Y+3	; 0x03
    6c16:	3c 81       	ldd	r19, Y+4	; 0x04
    6c18:	8a 81       	ldd	r24, Y+2	; 0x02
    6c1a:	b9 01       	movw	r22, r18
    6c1c:	0e 94 92 36 	call	0x6d24	; 0x6d24 <days_in_month>
    6c20:	98 2f       	mov	r25, r24
    6c22:	89 81       	ldd	r24, Y+1	; 0x01
    6c24:	98 17       	cp	r25, r24
    6c26:	28 f0       	brcs	.+10     	; 0x6c32 <is_valid_day+0x3a>
    6c28:	81 e0       	ldi	r24, 0x01	; 1
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	9e 83       	std	Y+6, r25	; 0x06
    6c2e:	8d 83       	std	Y+5, r24	; 0x05
    6c30:	02 c0       	rjmp	.+4      	; 0x6c36 <is_valid_day+0x3e>
    6c32:	1e 82       	std	Y+6, r1	; 0x06
    6c34:	1d 82       	std	Y+5, r1	; 0x05
    6c36:	8d 81       	ldd	r24, Y+5	; 0x05
}
    6c38:	26 96       	adiw	r28, 0x06	; 6
    6c3a:	0f b6       	in	r0, 0x3f	; 63
    6c3c:	f8 94       	cli
    6c3e:	de bf       	out	0x3e, r29	; 62
    6c40:	0f be       	out	0x3f, r0	; 63
    6c42:	cd bf       	out	0x3d, r28	; 61
    6c44:	cf 91       	pop	r28
    6c46:	df 91       	pop	r29
    6c48:	08 95       	ret

00006c4a <is_valid_month>:

bool is_valid_month(uint8_t month)
{
    6c4a:	df 93       	push	r29
    6c4c:	cf 93       	push	r28
    6c4e:	00 d0       	rcall	.+0      	; 0x6c50 <is_valid_month+0x6>
    6c50:	0f 92       	push	r0
    6c52:	cd b7       	in	r28, 0x3d	; 61
    6c54:	de b7       	in	r29, 0x3e	; 62
    6c56:	89 83       	std	Y+1, r24	; 0x01
    return (month >= 1 && month <= 12);
    6c58:	89 81       	ldd	r24, Y+1	; 0x01
    6c5a:	88 23       	and	r24, r24
    6c5c:	41 f0       	breq	.+16     	; 0x6c6e <is_valid_month+0x24>
    6c5e:	89 81       	ldd	r24, Y+1	; 0x01
    6c60:	8d 30       	cpi	r24, 0x0D	; 13
    6c62:	28 f4       	brcc	.+10     	; 0x6c6e <is_valid_month+0x24>
    6c64:	81 e0       	ldi	r24, 0x01	; 1
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	9b 83       	std	Y+3, r25	; 0x03
    6c6a:	8a 83       	std	Y+2, r24	; 0x02
    6c6c:	02 c0       	rjmp	.+4      	; 0x6c72 <is_valid_month+0x28>
    6c6e:	1b 82       	std	Y+3, r1	; 0x03
    6c70:	1a 82       	std	Y+2, r1	; 0x02
    6c72:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6c74:	0f 90       	pop	r0
    6c76:	0f 90       	pop	r0
    6c78:	0f 90       	pop	r0
    6c7a:	cf 91       	pop	r28
    6c7c:	df 91       	pop	r29
    6c7e:	08 95       	ret

00006c80 <is_valid_year>:

bool is_valid_year(uint16_t year)
{
    6c80:	df 93       	push	r29
    6c82:	cf 93       	push	r28
    6c84:	00 d0       	rcall	.+0      	; 0x6c86 <is_valid_year+0x6>
    6c86:	00 d0       	rcall	.+0      	; 0x6c88 <is_valid_year+0x8>
    6c88:	cd b7       	in	r28, 0x3d	; 61
    6c8a:	de b7       	in	r29, 0x3e	; 62
    6c8c:	9a 83       	std	Y+2, r25	; 0x02
    6c8e:	89 83       	std	Y+1, r24	; 0x01
    return (year >= 2000 && year <= 2099);
    6c90:	89 81       	ldd	r24, Y+1	; 0x01
    6c92:	9a 81       	ldd	r25, Y+2	; 0x02
    6c94:	27 e0       	ldi	r18, 0x07	; 7
    6c96:	80 3d       	cpi	r24, 0xD0	; 208
    6c98:	92 07       	cpc	r25, r18
    6c9a:	58 f0       	brcs	.+22     	; 0x6cb2 <is_valid_year+0x32>
    6c9c:	89 81       	ldd	r24, Y+1	; 0x01
    6c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    6ca0:	28 e0       	ldi	r18, 0x08	; 8
    6ca2:	84 33       	cpi	r24, 0x34	; 52
    6ca4:	92 07       	cpc	r25, r18
    6ca6:	28 f4       	brcc	.+10     	; 0x6cb2 <is_valid_year+0x32>
    6ca8:	81 e0       	ldi	r24, 0x01	; 1
    6caa:	90 e0       	ldi	r25, 0x00	; 0
    6cac:	9c 83       	std	Y+4, r25	; 0x04
    6cae:	8b 83       	std	Y+3, r24	; 0x03
    6cb0:	02 c0       	rjmp	.+4      	; 0x6cb6 <is_valid_year+0x36>
    6cb2:	1c 82       	std	Y+4, r1	; 0x04
    6cb4:	1b 82       	std	Y+3, r1	; 0x03
    6cb6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6cb8:	0f 90       	pop	r0
    6cba:	0f 90       	pop	r0
    6cbc:	0f 90       	pop	r0
    6cbe:	0f 90       	pop	r0
    6cc0:	cf 91       	pop	r28
    6cc2:	df 91       	pop	r29
    6cc4:	08 95       	ret

00006cc6 <is_leap_year>:

bool is_leap_year(uint16_t year)
{
    6cc6:	df 93       	push	r29
    6cc8:	cf 93       	push	r28
    6cca:	00 d0       	rcall	.+0      	; 0x6ccc <is_leap_year+0x6>
    6ccc:	00 d0       	rcall	.+0      	; 0x6cce <is_leap_year+0x8>
    6cce:	cd b7       	in	r28, 0x3d	; 61
    6cd0:	de b7       	in	r29, 0x3e	; 62
    6cd2:	9a 83       	std	Y+2, r25	; 0x02
    6cd4:	89 83       	std	Y+1, r24	; 0x01
    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
    6cd6:	89 81       	ldd	r24, Y+1	; 0x01
    6cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    6cda:	83 70       	andi	r24, 0x03	; 3
    6cdc:	90 70       	andi	r25, 0x00	; 0
    6cde:	00 97       	sbiw	r24, 0x00	; 0
    6ce0:	49 f4       	brne	.+18     	; 0x6cf4 <is_leap_year+0x2e>
    6ce2:	89 81       	ldd	r24, Y+1	; 0x01
    6ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ce6:	24 e6       	ldi	r18, 0x64	; 100
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	b9 01       	movw	r22, r18
    6cec:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6cf0:	00 97       	sbiw	r24, 0x00	; 0
    6cf2:	49 f4       	brne	.+18     	; 0x6d06 <is_leap_year+0x40>
    6cf4:	89 81       	ldd	r24, Y+1	; 0x01
    6cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf8:	20 e9       	ldi	r18, 0x90	; 144
    6cfa:	31 e0       	ldi	r19, 0x01	; 1
    6cfc:	b9 01       	movw	r22, r18
    6cfe:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6d02:	00 97       	sbiw	r24, 0x00	; 0
    6d04:	29 f4       	brne	.+10     	; 0x6d10 <is_leap_year+0x4a>
    6d06:	81 e0       	ldi	r24, 0x01	; 1
    6d08:	90 e0       	ldi	r25, 0x00	; 0
    6d0a:	9c 83       	std	Y+4, r25	; 0x04
    6d0c:	8b 83       	std	Y+3, r24	; 0x03
    6d0e:	02 c0       	rjmp	.+4      	; 0x6d14 <is_leap_year+0x4e>
    6d10:	1c 82       	std	Y+4, r1	; 0x04
    6d12:	1b 82       	std	Y+3, r1	; 0x03
    6d14:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	cf 91       	pop	r28
    6d20:	df 91       	pop	r29
    6d22:	08 95       	ret

00006d24 <days_in_month>:

uint8_t days_in_month(uint8_t month, uint16_t year)
{
    6d24:	df 93       	push	r29
    6d26:	cf 93       	push	r28
    6d28:	00 d0       	rcall	.+0      	; 0x6d2a <days_in_month+0x6>
    6d2a:	00 d0       	rcall	.+0      	; 0x6d2c <days_in_month+0x8>
    6d2c:	cd b7       	in	r28, 0x3d	; 61
    6d2e:	de b7       	in	r29, 0x3e	; 62
    6d30:	89 83       	std	Y+1, r24	; 0x01
    6d32:	7b 83       	std	Y+3, r23	; 0x03
    6d34:	6a 83       	std	Y+2, r22	; 0x02
    const uint8_t days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    
    if (month < 1 || month > 12) return 31;
    6d36:	89 81       	ldd	r24, Y+1	; 0x01
    6d38:	88 23       	and	r24, r24
    6d3a:	19 f0       	breq	.+6      	; 0x6d42 <days_in_month+0x1e>
    6d3c:	89 81       	ldd	r24, Y+1	; 0x01
    6d3e:	8d 30       	cpi	r24, 0x0D	; 13
    6d40:	18 f0       	brcs	.+6      	; 0x6d48 <days_in_month+0x24>
    6d42:	8f e1       	ldi	r24, 0x1F	; 31
    6d44:	8c 83       	std	Y+4, r24	; 0x04
    6d46:	15 c0       	rjmp	.+42     	; 0x6d72 <days_in_month+0x4e>
    
    if (month == 2 && is_leap_year(year)) {
    6d48:	89 81       	ldd	r24, Y+1	; 0x01
    6d4a:	82 30       	cpi	r24, 0x02	; 2
    6d4c:	49 f4       	brne	.+18     	; 0x6d60 <days_in_month+0x3c>
    6d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d50:	9b 81       	ldd	r25, Y+3	; 0x03
    6d52:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <is_leap_year>
    6d56:	88 23       	and	r24, r24
    6d58:	19 f0       	breq	.+6      	; 0x6d60 <days_in_month+0x3c>
        return 29;
    6d5a:	8d e1       	ldi	r24, 0x1D	; 29
    6d5c:	8c 83       	std	Y+4, r24	; 0x04
    6d5e:	09 c0       	rjmp	.+18     	; 0x6d72 <days_in_month+0x4e>
    }
    
    return days[month - 1];
    6d60:	89 81       	ldd	r24, Y+1	; 0x01
    6d62:	88 2f       	mov	r24, r24
    6d64:	90 e0       	ldi	r25, 0x00	; 0
    6d66:	01 97       	sbiw	r24, 0x01	; 1
    6d68:	fc 01       	movw	r30, r24
    6d6a:	ed 51       	subi	r30, 0x1D	; 29
    6d6c:	fd 4f       	sbci	r31, 0xFD	; 253
    6d6e:	80 81       	ld	r24, Z
    6d70:	8c 83       	std	Y+4, r24	; 0x04
    6d72:	8c 81       	ldd	r24, Y+4	; 0x04
}
    6d74:	0f 90       	pop	r0
    6d76:	0f 90       	pop	r0
    6d78:	0f 90       	pop	r0
    6d7a:	0f 90       	pop	r0
    6d7c:	cf 91       	pop	r28
    6d7e:	df 91       	pop	r29
    6d80:	08 95       	ret

00006d82 <time_to_seconds>:

// Time conversion functions
uint16_t time_to_seconds(uint8_t hour, uint8_t minute, uint8_t second)
{
    6d82:	df 93       	push	r29
    6d84:	cf 93       	push	r28
    6d86:	00 d0       	rcall	.+0      	; 0x6d88 <time_to_seconds+0x6>
    6d88:	0f 92       	push	r0
    6d8a:	cd b7       	in	r28, 0x3d	; 61
    6d8c:	de b7       	in	r29, 0x3e	; 62
    6d8e:	89 83       	std	Y+1, r24	; 0x01
    6d90:	6a 83       	std	Y+2, r22	; 0x02
    6d92:	4b 83       	std	Y+3, r20	; 0x03
    return (uint16_t)hour * 3600 + (uint16_t)minute * 60 + second;
    6d94:	89 81       	ldd	r24, Y+1	; 0x01
    6d96:	28 2f       	mov	r18, r24
    6d98:	30 e0       	ldi	r19, 0x00	; 0
    6d9a:	80 e1       	ldi	r24, 0x10	; 16
    6d9c:	9e e0       	ldi	r25, 0x0E	; 14
    6d9e:	28 9f       	mul	r18, r24
    6da0:	a0 01       	movw	r20, r0
    6da2:	29 9f       	mul	r18, r25
    6da4:	50 0d       	add	r21, r0
    6da6:	38 9f       	mul	r19, r24
    6da8:	50 0d       	add	r21, r0
    6daa:	11 24       	eor	r1, r1
    6dac:	8a 81       	ldd	r24, Y+2	; 0x02
    6dae:	28 2f       	mov	r18, r24
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	8c e3       	ldi	r24, 0x3C	; 60
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	bc 01       	movw	r22, r24
    6db8:	26 9f       	mul	r18, r22
    6dba:	c0 01       	movw	r24, r0
    6dbc:	27 9f       	mul	r18, r23
    6dbe:	90 0d       	add	r25, r0
    6dc0:	36 9f       	mul	r19, r22
    6dc2:	90 0d       	add	r25, r0
    6dc4:	11 24       	eor	r1, r1
    6dc6:	9a 01       	movw	r18, r20
    6dc8:	28 0f       	add	r18, r24
    6dca:	39 1f       	adc	r19, r25
    6dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    6dce:	88 2f       	mov	r24, r24
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	82 0f       	add	r24, r18
    6dd4:	93 1f       	adc	r25, r19
}
    6dd6:	0f 90       	pop	r0
    6dd8:	0f 90       	pop	r0
    6dda:	0f 90       	pop	r0
    6ddc:	cf 91       	pop	r28
    6dde:	df 91       	pop	r29
    6de0:	08 95       	ret

00006de2 <seconds_to_time>:

void seconds_to_time(uint16_t total_seconds, uint8_t* hour, uint8_t* minute, uint8_t* second)
{
    6de2:	df 93       	push	r29
    6de4:	cf 93       	push	r28
    6de6:	cd b7       	in	r28, 0x3d	; 61
    6de8:	de b7       	in	r29, 0x3e	; 62
    6dea:	28 97       	sbiw	r28, 0x08	; 8
    6dec:	0f b6       	in	r0, 0x3f	; 63
    6dee:	f8 94       	cli
    6df0:	de bf       	out	0x3e, r29	; 62
    6df2:	0f be       	out	0x3f, r0	; 63
    6df4:	cd bf       	out	0x3d, r28	; 61
    6df6:	9a 83       	std	Y+2, r25	; 0x02
    6df8:	89 83       	std	Y+1, r24	; 0x01
    6dfa:	7c 83       	std	Y+4, r23	; 0x04
    6dfc:	6b 83       	std	Y+3, r22	; 0x03
    6dfe:	5e 83       	std	Y+6, r21	; 0x06
    6e00:	4d 83       	std	Y+5, r20	; 0x05
    6e02:	38 87       	std	Y+8, r19	; 0x08
    6e04:	2f 83       	std	Y+7, r18	; 0x07
    *hour = total_seconds / 3600;
    6e06:	89 81       	ldd	r24, Y+1	; 0x01
    6e08:	9a 81       	ldd	r25, Y+2	; 0x02
    6e0a:	20 e1       	ldi	r18, 0x10	; 16
    6e0c:	3e e0       	ldi	r19, 0x0E	; 14
    6e0e:	b9 01       	movw	r22, r18
    6e10:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6e14:	cb 01       	movw	r24, r22
    6e16:	eb 81       	ldd	r30, Y+3	; 0x03
    6e18:	fc 81       	ldd	r31, Y+4	; 0x04
    6e1a:	80 83       	st	Z, r24
    *minute = (total_seconds % 3600) / 60;
    6e1c:	89 81       	ldd	r24, Y+1	; 0x01
    6e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e20:	20 e1       	ldi	r18, 0x10	; 16
    6e22:	3e e0       	ldi	r19, 0x0E	; 14
    6e24:	b9 01       	movw	r22, r18
    6e26:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6e2a:	2c e3       	ldi	r18, 0x3C	; 60
    6e2c:	30 e0       	ldi	r19, 0x00	; 0
    6e2e:	b9 01       	movw	r22, r18
    6e30:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6e34:	cb 01       	movw	r24, r22
    6e36:	ed 81       	ldd	r30, Y+5	; 0x05
    6e38:	fe 81       	ldd	r31, Y+6	; 0x06
    6e3a:	80 83       	st	Z, r24
    *second = total_seconds % 60;
    6e3c:	89 81       	ldd	r24, Y+1	; 0x01
    6e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e40:	2c e3       	ldi	r18, 0x3C	; 60
    6e42:	30 e0       	ldi	r19, 0x00	; 0
    6e44:	b9 01       	movw	r22, r18
    6e46:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__udivmodhi4>
    6e4a:	ef 81       	ldd	r30, Y+7	; 0x07
    6e4c:	f8 85       	ldd	r31, Y+8	; 0x08
    6e4e:	80 83       	st	Z, r24
    6e50:	28 96       	adiw	r28, 0x08	; 8
    6e52:	0f b6       	in	r0, 0x3f	; 63
    6e54:	f8 94       	cli
    6e56:	de bf       	out	0x3e, r29	; 62
    6e58:	0f be       	out	0x3f, r0	; 63
    6e5a:	cd bf       	out	0x3d, r28	; 61
    6e5c:	cf 91       	pop	r28
    6e5e:	df 91       	pop	r29
    6e60:	08 95       	ret

00006e62 <__udivmodqi4>:
    6e62:	99 1b       	sub	r25, r25
    6e64:	79 e0       	ldi	r23, 0x09	; 9
    6e66:	04 c0       	rjmp	.+8      	; 0x6e70 <__udivmodqi4_ep>

00006e68 <__udivmodqi4_loop>:
    6e68:	99 1f       	adc	r25, r25
    6e6a:	96 17       	cp	r25, r22
    6e6c:	08 f0       	brcs	.+2      	; 0x6e70 <__udivmodqi4_ep>
    6e6e:	96 1b       	sub	r25, r22

00006e70 <__udivmodqi4_ep>:
    6e70:	88 1f       	adc	r24, r24
    6e72:	7a 95       	dec	r23
    6e74:	c9 f7       	brne	.-14     	; 0x6e68 <__udivmodqi4_loop>
    6e76:	80 95       	com	r24
    6e78:	08 95       	ret

00006e7a <__udivmodhi4>:
    6e7a:	aa 1b       	sub	r26, r26
    6e7c:	bb 1b       	sub	r27, r27
    6e7e:	51 e1       	ldi	r21, 0x11	; 17
    6e80:	07 c0       	rjmp	.+14     	; 0x6e90 <__udivmodhi4_ep>

00006e82 <__udivmodhi4_loop>:
    6e82:	aa 1f       	adc	r26, r26
    6e84:	bb 1f       	adc	r27, r27
    6e86:	a6 17       	cp	r26, r22
    6e88:	b7 07       	cpc	r27, r23
    6e8a:	10 f0       	brcs	.+4      	; 0x6e90 <__udivmodhi4_ep>
    6e8c:	a6 1b       	sub	r26, r22
    6e8e:	b7 0b       	sbc	r27, r23

00006e90 <__udivmodhi4_ep>:
    6e90:	88 1f       	adc	r24, r24
    6e92:	99 1f       	adc	r25, r25
    6e94:	5a 95       	dec	r21
    6e96:	a9 f7       	brne	.-22     	; 0x6e82 <__udivmodhi4_loop>
    6e98:	80 95       	com	r24
    6e9a:	90 95       	com	r25
    6e9c:	bc 01       	movw	r22, r24
    6e9e:	cd 01       	movw	r24, r26
    6ea0:	08 95       	ret

00006ea2 <__divmodhi4>:
    6ea2:	97 fb       	bst	r25, 7
    6ea4:	09 2e       	mov	r0, r25
    6ea6:	07 26       	eor	r0, r23
    6ea8:	0a d0       	rcall	.+20     	; 0x6ebe <__divmodhi4_neg1>
    6eaa:	77 fd       	sbrc	r23, 7
    6eac:	04 d0       	rcall	.+8      	; 0x6eb6 <__divmodhi4_neg2>
    6eae:	e5 df       	rcall	.-54     	; 0x6e7a <__udivmodhi4>
    6eb0:	06 d0       	rcall	.+12     	; 0x6ebe <__divmodhi4_neg1>
    6eb2:	00 20       	and	r0, r0
    6eb4:	1a f4       	brpl	.+6      	; 0x6ebc <__divmodhi4_exit>

00006eb6 <__divmodhi4_neg2>:
    6eb6:	70 95       	com	r23
    6eb8:	61 95       	neg	r22
    6eba:	7f 4f       	sbci	r23, 0xFF	; 255

00006ebc <__divmodhi4_exit>:
    6ebc:	08 95       	ret

00006ebe <__divmodhi4_neg1>:
    6ebe:	f6 f7       	brtc	.-4      	; 0x6ebc <__divmodhi4_exit>
    6ec0:	90 95       	com	r25
    6ec2:	81 95       	neg	r24
    6ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec6:	08 95       	ret

00006ec8 <__divmodsi4>:
    6ec8:	97 fb       	bst	r25, 7
    6eca:	09 2e       	mov	r0, r25
    6ecc:	05 26       	eor	r0, r21
    6ece:	0e d0       	rcall	.+28     	; 0x6eec <__divmodsi4_neg1>
    6ed0:	57 fd       	sbrc	r21, 7
    6ed2:	04 d0       	rcall	.+8      	; 0x6edc <__divmodsi4_neg2>
    6ed4:	14 d0       	rcall	.+40     	; 0x6efe <__udivmodsi4>
    6ed6:	0a d0       	rcall	.+20     	; 0x6eec <__divmodsi4_neg1>
    6ed8:	00 1c       	adc	r0, r0
    6eda:	38 f4       	brcc	.+14     	; 0x6eea <__divmodsi4_exit>

00006edc <__divmodsi4_neg2>:
    6edc:	50 95       	com	r21
    6ede:	40 95       	com	r20
    6ee0:	30 95       	com	r19
    6ee2:	21 95       	neg	r18
    6ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee6:	4f 4f       	sbci	r20, 0xFF	; 255
    6ee8:	5f 4f       	sbci	r21, 0xFF	; 255

00006eea <__divmodsi4_exit>:
    6eea:	08 95       	ret

00006eec <__divmodsi4_neg1>:
    6eec:	f6 f7       	brtc	.-4      	; 0x6eea <__divmodsi4_exit>
    6eee:	90 95       	com	r25
    6ef0:	80 95       	com	r24
    6ef2:	70 95       	com	r23
    6ef4:	61 95       	neg	r22
    6ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    6efa:	9f 4f       	sbci	r25, 0xFF	; 255
    6efc:	08 95       	ret

00006efe <__udivmodsi4>:
    6efe:	a1 e2       	ldi	r26, 0x21	; 33
    6f00:	1a 2e       	mov	r1, r26
    6f02:	aa 1b       	sub	r26, r26
    6f04:	bb 1b       	sub	r27, r27
    6f06:	fd 01       	movw	r30, r26
    6f08:	0d c0       	rjmp	.+26     	; 0x6f24 <__udivmodsi4_ep>

00006f0a <__udivmodsi4_loop>:
    6f0a:	aa 1f       	adc	r26, r26
    6f0c:	bb 1f       	adc	r27, r27
    6f0e:	ee 1f       	adc	r30, r30
    6f10:	ff 1f       	adc	r31, r31
    6f12:	a2 17       	cp	r26, r18
    6f14:	b3 07       	cpc	r27, r19
    6f16:	e4 07       	cpc	r30, r20
    6f18:	f5 07       	cpc	r31, r21
    6f1a:	20 f0       	brcs	.+8      	; 0x6f24 <__udivmodsi4_ep>
    6f1c:	a2 1b       	sub	r26, r18
    6f1e:	b3 0b       	sbc	r27, r19
    6f20:	e4 0b       	sbc	r30, r20
    6f22:	f5 0b       	sbc	r31, r21

00006f24 <__udivmodsi4_ep>:
    6f24:	66 1f       	adc	r22, r22
    6f26:	77 1f       	adc	r23, r23
    6f28:	88 1f       	adc	r24, r24
    6f2a:	99 1f       	adc	r25, r25
    6f2c:	1a 94       	dec	r1
    6f2e:	69 f7       	brne	.-38     	; 0x6f0a <__udivmodsi4_loop>
    6f30:	60 95       	com	r22
    6f32:	70 95       	com	r23
    6f34:	80 95       	com	r24
    6f36:	90 95       	com	r25
    6f38:	9b 01       	movw	r18, r22
    6f3a:	ac 01       	movw	r20, r24
    6f3c:	bd 01       	movw	r22, r26
    6f3e:	cf 01       	movw	r24, r30
    6f40:	08 95       	ret

00006f42 <__prologue_saves__>:
    6f42:	2f 92       	push	r2
    6f44:	3f 92       	push	r3
    6f46:	4f 92       	push	r4
    6f48:	5f 92       	push	r5
    6f4a:	6f 92       	push	r6
    6f4c:	7f 92       	push	r7
    6f4e:	8f 92       	push	r8
    6f50:	9f 92       	push	r9
    6f52:	af 92       	push	r10
    6f54:	bf 92       	push	r11
    6f56:	cf 92       	push	r12
    6f58:	df 92       	push	r13
    6f5a:	ef 92       	push	r14
    6f5c:	ff 92       	push	r15
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
    6f66:	cd b7       	in	r28, 0x3d	; 61
    6f68:	de b7       	in	r29, 0x3e	; 62
    6f6a:	ca 1b       	sub	r28, r26
    6f6c:	db 0b       	sbc	r29, r27
    6f6e:	0f b6       	in	r0, 0x3f	; 63
    6f70:	f8 94       	cli
    6f72:	de bf       	out	0x3e, r29	; 62
    6f74:	0f be       	out	0x3f, r0	; 63
    6f76:	cd bf       	out	0x3d, r28	; 61
    6f78:	09 94       	ijmp

00006f7a <__epilogue_restores__>:
    6f7a:	2a 88       	ldd	r2, Y+18	; 0x12
    6f7c:	39 88       	ldd	r3, Y+17	; 0x11
    6f7e:	48 88       	ldd	r4, Y+16	; 0x10
    6f80:	5f 84       	ldd	r5, Y+15	; 0x0f
    6f82:	6e 84       	ldd	r6, Y+14	; 0x0e
    6f84:	7d 84       	ldd	r7, Y+13	; 0x0d
    6f86:	8c 84       	ldd	r8, Y+12	; 0x0c
    6f88:	9b 84       	ldd	r9, Y+11	; 0x0b
    6f8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    6f8c:	b9 84       	ldd	r11, Y+9	; 0x09
    6f8e:	c8 84       	ldd	r12, Y+8	; 0x08
    6f90:	df 80       	ldd	r13, Y+7	; 0x07
    6f92:	ee 80       	ldd	r14, Y+6	; 0x06
    6f94:	fd 80       	ldd	r15, Y+5	; 0x05
    6f96:	0c 81       	ldd	r16, Y+4	; 0x04
    6f98:	1b 81       	ldd	r17, Y+3	; 0x03
    6f9a:	aa 81       	ldd	r26, Y+2	; 0x02
    6f9c:	b9 81       	ldd	r27, Y+1	; 0x01
    6f9e:	ce 0f       	add	r28, r30
    6fa0:	d1 1d       	adc	r29, r1
    6fa2:	0f b6       	in	r0, 0x3f	; 63
    6fa4:	f8 94       	cli
    6fa6:	de bf       	out	0x3e, r29	; 62
    6fa8:	0f be       	out	0x3f, r0	; 63
    6faa:	cd bf       	out	0x3d, r28	; 61
    6fac:	ed 01       	movw	r28, r26
    6fae:	08 95       	ret

00006fb0 <sprintf>:
    6fb0:	ae e0       	ldi	r26, 0x0E	; 14
    6fb2:	b0 e0       	ldi	r27, 0x00	; 0
    6fb4:	ee ed       	ldi	r30, 0xDE	; 222
    6fb6:	f7 e3       	ldi	r31, 0x37	; 55
    6fb8:	0c 94 af 37 	jmp	0x6f5e	; 0x6f5e <__prologue_saves__+0x1c>
    6fbc:	0d 89       	ldd	r16, Y+21	; 0x15
    6fbe:	1e 89       	ldd	r17, Y+22	; 0x16
    6fc0:	86 e0       	ldi	r24, 0x06	; 6
    6fc2:	8c 83       	std	Y+4, r24	; 0x04
    6fc4:	1a 83       	std	Y+2, r17	; 0x02
    6fc6:	09 83       	std	Y+1, r16	; 0x01
    6fc8:	8f ef       	ldi	r24, 0xFF	; 255
    6fca:	9f e7       	ldi	r25, 0x7F	; 127
    6fcc:	9e 83       	std	Y+6, r25	; 0x06
    6fce:	8d 83       	std	Y+5, r24	; 0x05
    6fd0:	9e 01       	movw	r18, r28
    6fd2:	27 5e       	subi	r18, 0xE7	; 231
    6fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd6:	ce 01       	movw	r24, r28
    6fd8:	01 96       	adiw	r24, 0x01	; 1
    6fda:	6f 89       	ldd	r22, Y+23	; 0x17
    6fdc:	78 8d       	ldd	r23, Y+24	; 0x18
    6fde:	a9 01       	movw	r20, r18
    6fe0:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <vfprintf>
    6fe4:	2f 81       	ldd	r18, Y+7	; 0x07
    6fe6:	38 85       	ldd	r19, Y+8	; 0x08
    6fe8:	02 0f       	add	r16, r18
    6fea:	13 1f       	adc	r17, r19
    6fec:	f8 01       	movw	r30, r16
    6fee:	10 82       	st	Z, r1
    6ff0:	2e 96       	adiw	r28, 0x0e	; 14
    6ff2:	e4 e0       	ldi	r30, 0x04	; 4
    6ff4:	0c 94 cb 37 	jmp	0x6f96	; 0x6f96 <__epilogue_restores__+0x1c>

00006ff8 <vfprintf>:
    6ff8:	ab e0       	ldi	r26, 0x0B	; 11
    6ffa:	b0 e0       	ldi	r27, 0x00	; 0
    6ffc:	e2 e0       	ldi	r30, 0x02	; 2
    6ffe:	f8 e3       	ldi	r31, 0x38	; 56
    7000:	0c 94 a1 37 	jmp	0x6f42	; 0x6f42 <__prologue_saves__>
    7004:	3c 01       	movw	r6, r24
    7006:	2b 01       	movw	r4, r22
    7008:	5a 01       	movw	r10, r20
    700a:	fc 01       	movw	r30, r24
    700c:	17 82       	std	Z+7, r1	; 0x07
    700e:	16 82       	std	Z+6, r1	; 0x06
    7010:	83 81       	ldd	r24, Z+3	; 0x03
    7012:	81 fd       	sbrc	r24, 1
    7014:	03 c0       	rjmp	.+6      	; 0x701c <vfprintf+0x24>
    7016:	6f ef       	ldi	r22, 0xFF	; 255
    7018:	7f ef       	ldi	r23, 0xFF	; 255
    701a:	c6 c1       	rjmp	.+908    	; 0x73a8 <vfprintf+0x3b0>
    701c:	9a e0       	ldi	r25, 0x0A	; 10
    701e:	89 2e       	mov	r8, r25
    7020:	1e 01       	movw	r2, r28
    7022:	08 94       	sec
    7024:	21 1c       	adc	r2, r1
    7026:	31 1c       	adc	r3, r1
    7028:	f3 01       	movw	r30, r6
    702a:	23 81       	ldd	r18, Z+3	; 0x03
    702c:	f2 01       	movw	r30, r4
    702e:	23 fd       	sbrc	r18, 3
    7030:	85 91       	lpm	r24, Z+
    7032:	23 ff       	sbrs	r18, 3
    7034:	81 91       	ld	r24, Z+
    7036:	2f 01       	movw	r4, r30
    7038:	88 23       	and	r24, r24
    703a:	09 f4       	brne	.+2      	; 0x703e <vfprintf+0x46>
    703c:	b2 c1       	rjmp	.+868    	; 0x73a2 <vfprintf+0x3aa>
    703e:	85 32       	cpi	r24, 0x25	; 37
    7040:	39 f4       	brne	.+14     	; 0x7050 <vfprintf+0x58>
    7042:	23 fd       	sbrc	r18, 3
    7044:	85 91       	lpm	r24, Z+
    7046:	23 ff       	sbrs	r18, 3
    7048:	81 91       	ld	r24, Z+
    704a:	2f 01       	movw	r4, r30
    704c:	85 32       	cpi	r24, 0x25	; 37
    704e:	29 f4       	brne	.+10     	; 0x705a <vfprintf+0x62>
    7050:	90 e0       	ldi	r25, 0x00	; 0
    7052:	b3 01       	movw	r22, r6
    7054:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    7058:	e7 cf       	rjmp	.-50     	; 0x7028 <vfprintf+0x30>
    705a:	98 2f       	mov	r25, r24
    705c:	ff 24       	eor	r15, r15
    705e:	ee 24       	eor	r14, r14
    7060:	99 24       	eor	r9, r9
    7062:	ff e1       	ldi	r31, 0x1F	; 31
    7064:	ff 15       	cp	r31, r15
    7066:	d0 f0       	brcs	.+52     	; 0x709c <vfprintf+0xa4>
    7068:	9b 32       	cpi	r25, 0x2B	; 43
    706a:	69 f0       	breq	.+26     	; 0x7086 <vfprintf+0x8e>
    706c:	9c 32       	cpi	r25, 0x2C	; 44
    706e:	28 f4       	brcc	.+10     	; 0x707a <vfprintf+0x82>
    7070:	90 32       	cpi	r25, 0x20	; 32
    7072:	59 f0       	breq	.+22     	; 0x708a <vfprintf+0x92>
    7074:	93 32       	cpi	r25, 0x23	; 35
    7076:	91 f4       	brne	.+36     	; 0x709c <vfprintf+0xa4>
    7078:	0e c0       	rjmp	.+28     	; 0x7096 <vfprintf+0x9e>
    707a:	9d 32       	cpi	r25, 0x2D	; 45
    707c:	49 f0       	breq	.+18     	; 0x7090 <vfprintf+0x98>
    707e:	90 33       	cpi	r25, 0x30	; 48
    7080:	69 f4       	brne	.+26     	; 0x709c <vfprintf+0xa4>
    7082:	41 e0       	ldi	r20, 0x01	; 1
    7084:	24 c0       	rjmp	.+72     	; 0x70ce <vfprintf+0xd6>
    7086:	52 e0       	ldi	r21, 0x02	; 2
    7088:	f5 2a       	or	r15, r21
    708a:	84 e0       	ldi	r24, 0x04	; 4
    708c:	f8 2a       	or	r15, r24
    708e:	28 c0       	rjmp	.+80     	; 0x70e0 <vfprintf+0xe8>
    7090:	98 e0       	ldi	r25, 0x08	; 8
    7092:	f9 2a       	or	r15, r25
    7094:	25 c0       	rjmp	.+74     	; 0x70e0 <vfprintf+0xe8>
    7096:	e0 e1       	ldi	r30, 0x10	; 16
    7098:	fe 2a       	or	r15, r30
    709a:	22 c0       	rjmp	.+68     	; 0x70e0 <vfprintf+0xe8>
    709c:	f7 fc       	sbrc	r15, 7
    709e:	29 c0       	rjmp	.+82     	; 0x70f2 <vfprintf+0xfa>
    70a0:	89 2f       	mov	r24, r25
    70a2:	80 53       	subi	r24, 0x30	; 48
    70a4:	8a 30       	cpi	r24, 0x0A	; 10
    70a6:	70 f4       	brcc	.+28     	; 0x70c4 <vfprintf+0xcc>
    70a8:	f6 fe       	sbrs	r15, 6
    70aa:	05 c0       	rjmp	.+10     	; 0x70b6 <vfprintf+0xbe>
    70ac:	98 9c       	mul	r9, r8
    70ae:	90 2c       	mov	r9, r0
    70b0:	11 24       	eor	r1, r1
    70b2:	98 0e       	add	r9, r24
    70b4:	15 c0       	rjmp	.+42     	; 0x70e0 <vfprintf+0xe8>
    70b6:	e8 9c       	mul	r14, r8
    70b8:	e0 2c       	mov	r14, r0
    70ba:	11 24       	eor	r1, r1
    70bc:	e8 0e       	add	r14, r24
    70be:	f0 e2       	ldi	r31, 0x20	; 32
    70c0:	ff 2a       	or	r15, r31
    70c2:	0e c0       	rjmp	.+28     	; 0x70e0 <vfprintf+0xe8>
    70c4:	9e 32       	cpi	r25, 0x2E	; 46
    70c6:	29 f4       	brne	.+10     	; 0x70d2 <vfprintf+0xda>
    70c8:	f6 fc       	sbrc	r15, 6
    70ca:	6b c1       	rjmp	.+726    	; 0x73a2 <vfprintf+0x3aa>
    70cc:	40 e4       	ldi	r20, 0x40	; 64
    70ce:	f4 2a       	or	r15, r20
    70d0:	07 c0       	rjmp	.+14     	; 0x70e0 <vfprintf+0xe8>
    70d2:	9c 36       	cpi	r25, 0x6C	; 108
    70d4:	19 f4       	brne	.+6      	; 0x70dc <vfprintf+0xe4>
    70d6:	50 e8       	ldi	r21, 0x80	; 128
    70d8:	f5 2a       	or	r15, r21
    70da:	02 c0       	rjmp	.+4      	; 0x70e0 <vfprintf+0xe8>
    70dc:	98 36       	cpi	r25, 0x68	; 104
    70de:	49 f4       	brne	.+18     	; 0x70f2 <vfprintf+0xfa>
    70e0:	f2 01       	movw	r30, r4
    70e2:	23 fd       	sbrc	r18, 3
    70e4:	95 91       	lpm	r25, Z+
    70e6:	23 ff       	sbrs	r18, 3
    70e8:	91 91       	ld	r25, Z+
    70ea:	2f 01       	movw	r4, r30
    70ec:	99 23       	and	r25, r25
    70ee:	09 f0       	breq	.+2      	; 0x70f2 <vfprintf+0xfa>
    70f0:	b8 cf       	rjmp	.-144    	; 0x7062 <vfprintf+0x6a>
    70f2:	89 2f       	mov	r24, r25
    70f4:	85 54       	subi	r24, 0x45	; 69
    70f6:	83 30       	cpi	r24, 0x03	; 3
    70f8:	18 f0       	brcs	.+6      	; 0x7100 <vfprintf+0x108>
    70fa:	80 52       	subi	r24, 0x20	; 32
    70fc:	83 30       	cpi	r24, 0x03	; 3
    70fe:	38 f4       	brcc	.+14     	; 0x710e <vfprintf+0x116>
    7100:	44 e0       	ldi	r20, 0x04	; 4
    7102:	50 e0       	ldi	r21, 0x00	; 0
    7104:	a4 0e       	add	r10, r20
    7106:	b5 1e       	adc	r11, r21
    7108:	5f e3       	ldi	r21, 0x3F	; 63
    710a:	59 83       	std	Y+1, r21	; 0x01
    710c:	0f c0       	rjmp	.+30     	; 0x712c <vfprintf+0x134>
    710e:	93 36       	cpi	r25, 0x63	; 99
    7110:	31 f0       	breq	.+12     	; 0x711e <vfprintf+0x126>
    7112:	93 37       	cpi	r25, 0x73	; 115
    7114:	79 f0       	breq	.+30     	; 0x7134 <vfprintf+0x13c>
    7116:	93 35       	cpi	r25, 0x53	; 83
    7118:	09 f0       	breq	.+2      	; 0x711c <vfprintf+0x124>
    711a:	56 c0       	rjmp	.+172    	; 0x71c8 <vfprintf+0x1d0>
    711c:	20 c0       	rjmp	.+64     	; 0x715e <vfprintf+0x166>
    711e:	f5 01       	movw	r30, r10
    7120:	80 81       	ld	r24, Z
    7122:	89 83       	std	Y+1, r24	; 0x01
    7124:	42 e0       	ldi	r20, 0x02	; 2
    7126:	50 e0       	ldi	r21, 0x00	; 0
    7128:	a4 0e       	add	r10, r20
    712a:	b5 1e       	adc	r11, r21
    712c:	61 01       	movw	r12, r2
    712e:	01 e0       	ldi	r16, 0x01	; 1
    7130:	10 e0       	ldi	r17, 0x00	; 0
    7132:	12 c0       	rjmp	.+36     	; 0x7158 <vfprintf+0x160>
    7134:	f5 01       	movw	r30, r10
    7136:	c0 80       	ld	r12, Z
    7138:	d1 80       	ldd	r13, Z+1	; 0x01
    713a:	f6 fc       	sbrc	r15, 6
    713c:	03 c0       	rjmp	.+6      	; 0x7144 <vfprintf+0x14c>
    713e:	6f ef       	ldi	r22, 0xFF	; 255
    7140:	7f ef       	ldi	r23, 0xFF	; 255
    7142:	02 c0       	rjmp	.+4      	; 0x7148 <vfprintf+0x150>
    7144:	69 2d       	mov	r22, r9
    7146:	70 e0       	ldi	r23, 0x00	; 0
    7148:	42 e0       	ldi	r20, 0x02	; 2
    714a:	50 e0       	ldi	r21, 0x00	; 0
    714c:	a4 0e       	add	r10, r20
    714e:	b5 1e       	adc	r11, r21
    7150:	c6 01       	movw	r24, r12
    7152:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strnlen>
    7156:	8c 01       	movw	r16, r24
    7158:	5f e7       	ldi	r21, 0x7F	; 127
    715a:	f5 22       	and	r15, r21
    715c:	14 c0       	rjmp	.+40     	; 0x7186 <vfprintf+0x18e>
    715e:	f5 01       	movw	r30, r10
    7160:	c0 80       	ld	r12, Z
    7162:	d1 80       	ldd	r13, Z+1	; 0x01
    7164:	f6 fc       	sbrc	r15, 6
    7166:	03 c0       	rjmp	.+6      	; 0x716e <vfprintf+0x176>
    7168:	6f ef       	ldi	r22, 0xFF	; 255
    716a:	7f ef       	ldi	r23, 0xFF	; 255
    716c:	02 c0       	rjmp	.+4      	; 0x7172 <vfprintf+0x17a>
    716e:	69 2d       	mov	r22, r9
    7170:	70 e0       	ldi	r23, 0x00	; 0
    7172:	42 e0       	ldi	r20, 0x02	; 2
    7174:	50 e0       	ldi	r21, 0x00	; 0
    7176:	a4 0e       	add	r10, r20
    7178:	b5 1e       	adc	r11, r21
    717a:	c6 01       	movw	r24, r12
    717c:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <strnlen_P>
    7180:	8c 01       	movw	r16, r24
    7182:	50 e8       	ldi	r21, 0x80	; 128
    7184:	f5 2a       	or	r15, r21
    7186:	f3 fe       	sbrs	r15, 3
    7188:	07 c0       	rjmp	.+14     	; 0x7198 <vfprintf+0x1a0>
    718a:	1a c0       	rjmp	.+52     	; 0x71c0 <vfprintf+0x1c8>
    718c:	80 e2       	ldi	r24, 0x20	; 32
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	b3 01       	movw	r22, r6
    7192:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    7196:	ea 94       	dec	r14
    7198:	8e 2d       	mov	r24, r14
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	08 17       	cp	r16, r24
    719e:	19 07       	cpc	r17, r25
    71a0:	a8 f3       	brcs	.-22     	; 0x718c <vfprintf+0x194>
    71a2:	0e c0       	rjmp	.+28     	; 0x71c0 <vfprintf+0x1c8>
    71a4:	f6 01       	movw	r30, r12
    71a6:	f7 fc       	sbrc	r15, 7
    71a8:	85 91       	lpm	r24, Z+
    71aa:	f7 fe       	sbrs	r15, 7
    71ac:	81 91       	ld	r24, Z+
    71ae:	6f 01       	movw	r12, r30
    71b0:	90 e0       	ldi	r25, 0x00	; 0
    71b2:	b3 01       	movw	r22, r6
    71b4:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    71b8:	e1 10       	cpse	r14, r1
    71ba:	ea 94       	dec	r14
    71bc:	01 50       	subi	r16, 0x01	; 1
    71be:	10 40       	sbci	r17, 0x00	; 0
    71c0:	01 15       	cp	r16, r1
    71c2:	11 05       	cpc	r17, r1
    71c4:	79 f7       	brne	.-34     	; 0x71a4 <vfprintf+0x1ac>
    71c6:	ea c0       	rjmp	.+468    	; 0x739c <vfprintf+0x3a4>
    71c8:	94 36       	cpi	r25, 0x64	; 100
    71ca:	11 f0       	breq	.+4      	; 0x71d0 <vfprintf+0x1d8>
    71cc:	99 36       	cpi	r25, 0x69	; 105
    71ce:	69 f5       	brne	.+90     	; 0x722a <vfprintf+0x232>
    71d0:	f7 fe       	sbrs	r15, 7
    71d2:	08 c0       	rjmp	.+16     	; 0x71e4 <vfprintf+0x1ec>
    71d4:	f5 01       	movw	r30, r10
    71d6:	20 81       	ld	r18, Z
    71d8:	31 81       	ldd	r19, Z+1	; 0x01
    71da:	42 81       	ldd	r20, Z+2	; 0x02
    71dc:	53 81       	ldd	r21, Z+3	; 0x03
    71de:	84 e0       	ldi	r24, 0x04	; 4
    71e0:	90 e0       	ldi	r25, 0x00	; 0
    71e2:	0a c0       	rjmp	.+20     	; 0x71f8 <vfprintf+0x200>
    71e4:	f5 01       	movw	r30, r10
    71e6:	80 81       	ld	r24, Z
    71e8:	91 81       	ldd	r25, Z+1	; 0x01
    71ea:	9c 01       	movw	r18, r24
    71ec:	44 27       	eor	r20, r20
    71ee:	37 fd       	sbrc	r19, 7
    71f0:	40 95       	com	r20
    71f2:	54 2f       	mov	r21, r20
    71f4:	82 e0       	ldi	r24, 0x02	; 2
    71f6:	90 e0       	ldi	r25, 0x00	; 0
    71f8:	a8 0e       	add	r10, r24
    71fa:	b9 1e       	adc	r11, r25
    71fc:	9f e6       	ldi	r25, 0x6F	; 111
    71fe:	f9 22       	and	r15, r25
    7200:	57 ff       	sbrs	r21, 7
    7202:	09 c0       	rjmp	.+18     	; 0x7216 <vfprintf+0x21e>
    7204:	50 95       	com	r21
    7206:	40 95       	com	r20
    7208:	30 95       	com	r19
    720a:	21 95       	neg	r18
    720c:	3f 4f       	sbci	r19, 0xFF	; 255
    720e:	4f 4f       	sbci	r20, 0xFF	; 255
    7210:	5f 4f       	sbci	r21, 0xFF	; 255
    7212:	e0 e8       	ldi	r30, 0x80	; 128
    7214:	fe 2a       	or	r15, r30
    7216:	ca 01       	movw	r24, r20
    7218:	b9 01       	movw	r22, r18
    721a:	a1 01       	movw	r20, r2
    721c:	2a e0       	ldi	r18, 0x0A	; 10
    721e:	30 e0       	ldi	r19, 0x00	; 0
    7220:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__ultoa_invert>
    7224:	d8 2e       	mov	r13, r24
    7226:	d2 18       	sub	r13, r2
    7228:	40 c0       	rjmp	.+128    	; 0x72aa <vfprintf+0x2b2>
    722a:	95 37       	cpi	r25, 0x75	; 117
    722c:	29 f4       	brne	.+10     	; 0x7238 <vfprintf+0x240>
    722e:	1f 2d       	mov	r17, r15
    7230:	1f 7e       	andi	r17, 0xEF	; 239
    7232:	2a e0       	ldi	r18, 0x0A	; 10
    7234:	30 e0       	ldi	r19, 0x00	; 0
    7236:	1d c0       	rjmp	.+58     	; 0x7272 <vfprintf+0x27a>
    7238:	1f 2d       	mov	r17, r15
    723a:	19 7f       	andi	r17, 0xF9	; 249
    723c:	9f 36       	cpi	r25, 0x6F	; 111
    723e:	61 f0       	breq	.+24     	; 0x7258 <vfprintf+0x260>
    7240:	90 37       	cpi	r25, 0x70	; 112
    7242:	20 f4       	brcc	.+8      	; 0x724c <vfprintf+0x254>
    7244:	98 35       	cpi	r25, 0x58	; 88
    7246:	09 f0       	breq	.+2      	; 0x724a <vfprintf+0x252>
    7248:	ac c0       	rjmp	.+344    	; 0x73a2 <vfprintf+0x3aa>
    724a:	0f c0       	rjmp	.+30     	; 0x726a <vfprintf+0x272>
    724c:	90 37       	cpi	r25, 0x70	; 112
    724e:	39 f0       	breq	.+14     	; 0x725e <vfprintf+0x266>
    7250:	98 37       	cpi	r25, 0x78	; 120
    7252:	09 f0       	breq	.+2      	; 0x7256 <vfprintf+0x25e>
    7254:	a6 c0       	rjmp	.+332    	; 0x73a2 <vfprintf+0x3aa>
    7256:	04 c0       	rjmp	.+8      	; 0x7260 <vfprintf+0x268>
    7258:	28 e0       	ldi	r18, 0x08	; 8
    725a:	30 e0       	ldi	r19, 0x00	; 0
    725c:	0a c0       	rjmp	.+20     	; 0x7272 <vfprintf+0x27a>
    725e:	10 61       	ori	r17, 0x10	; 16
    7260:	14 fd       	sbrc	r17, 4
    7262:	14 60       	ori	r17, 0x04	; 4
    7264:	20 e1       	ldi	r18, 0x10	; 16
    7266:	30 e0       	ldi	r19, 0x00	; 0
    7268:	04 c0       	rjmp	.+8      	; 0x7272 <vfprintf+0x27a>
    726a:	14 fd       	sbrc	r17, 4
    726c:	16 60       	ori	r17, 0x06	; 6
    726e:	20 e1       	ldi	r18, 0x10	; 16
    7270:	32 e0       	ldi	r19, 0x02	; 2
    7272:	17 ff       	sbrs	r17, 7
    7274:	08 c0       	rjmp	.+16     	; 0x7286 <vfprintf+0x28e>
    7276:	f5 01       	movw	r30, r10
    7278:	60 81       	ld	r22, Z
    727a:	71 81       	ldd	r23, Z+1	; 0x01
    727c:	82 81       	ldd	r24, Z+2	; 0x02
    727e:	93 81       	ldd	r25, Z+3	; 0x03
    7280:	44 e0       	ldi	r20, 0x04	; 4
    7282:	50 e0       	ldi	r21, 0x00	; 0
    7284:	08 c0       	rjmp	.+16     	; 0x7296 <vfprintf+0x29e>
    7286:	f5 01       	movw	r30, r10
    7288:	80 81       	ld	r24, Z
    728a:	91 81       	ldd	r25, Z+1	; 0x01
    728c:	bc 01       	movw	r22, r24
    728e:	80 e0       	ldi	r24, 0x00	; 0
    7290:	90 e0       	ldi	r25, 0x00	; 0
    7292:	42 e0       	ldi	r20, 0x02	; 2
    7294:	50 e0       	ldi	r21, 0x00	; 0
    7296:	a4 0e       	add	r10, r20
    7298:	b5 1e       	adc	r11, r21
    729a:	a1 01       	movw	r20, r2
    729c:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__ultoa_invert>
    72a0:	d8 2e       	mov	r13, r24
    72a2:	d2 18       	sub	r13, r2
    72a4:	8f e7       	ldi	r24, 0x7F	; 127
    72a6:	f8 2e       	mov	r15, r24
    72a8:	f1 22       	and	r15, r17
    72aa:	f6 fe       	sbrs	r15, 6
    72ac:	0b c0       	rjmp	.+22     	; 0x72c4 <vfprintf+0x2cc>
    72ae:	5e ef       	ldi	r21, 0xFE	; 254
    72b0:	f5 22       	and	r15, r21
    72b2:	d9 14       	cp	r13, r9
    72b4:	38 f4       	brcc	.+14     	; 0x72c4 <vfprintf+0x2cc>
    72b6:	f4 fe       	sbrs	r15, 4
    72b8:	07 c0       	rjmp	.+14     	; 0x72c8 <vfprintf+0x2d0>
    72ba:	f2 fc       	sbrc	r15, 2
    72bc:	05 c0       	rjmp	.+10     	; 0x72c8 <vfprintf+0x2d0>
    72be:	8f ee       	ldi	r24, 0xEF	; 239
    72c0:	f8 22       	and	r15, r24
    72c2:	02 c0       	rjmp	.+4      	; 0x72c8 <vfprintf+0x2d0>
    72c4:	1d 2d       	mov	r17, r13
    72c6:	01 c0       	rjmp	.+2      	; 0x72ca <vfprintf+0x2d2>
    72c8:	19 2d       	mov	r17, r9
    72ca:	f4 fe       	sbrs	r15, 4
    72cc:	0d c0       	rjmp	.+26     	; 0x72e8 <vfprintf+0x2f0>
    72ce:	fe 01       	movw	r30, r28
    72d0:	ed 0d       	add	r30, r13
    72d2:	f1 1d       	adc	r31, r1
    72d4:	80 81       	ld	r24, Z
    72d6:	80 33       	cpi	r24, 0x30	; 48
    72d8:	19 f4       	brne	.+6      	; 0x72e0 <vfprintf+0x2e8>
    72da:	99 ee       	ldi	r25, 0xE9	; 233
    72dc:	f9 22       	and	r15, r25
    72de:	08 c0       	rjmp	.+16     	; 0x72f0 <vfprintf+0x2f8>
    72e0:	1f 5f       	subi	r17, 0xFF	; 255
    72e2:	f2 fe       	sbrs	r15, 2
    72e4:	05 c0       	rjmp	.+10     	; 0x72f0 <vfprintf+0x2f8>
    72e6:	03 c0       	rjmp	.+6      	; 0x72ee <vfprintf+0x2f6>
    72e8:	8f 2d       	mov	r24, r15
    72ea:	86 78       	andi	r24, 0x86	; 134
    72ec:	09 f0       	breq	.+2      	; 0x72f0 <vfprintf+0x2f8>
    72ee:	1f 5f       	subi	r17, 0xFF	; 255
    72f0:	0f 2d       	mov	r16, r15
    72f2:	f3 fc       	sbrc	r15, 3
    72f4:	14 c0       	rjmp	.+40     	; 0x731e <vfprintf+0x326>
    72f6:	f0 fe       	sbrs	r15, 0
    72f8:	0f c0       	rjmp	.+30     	; 0x7318 <vfprintf+0x320>
    72fa:	1e 15       	cp	r17, r14
    72fc:	10 f0       	brcs	.+4      	; 0x7302 <vfprintf+0x30a>
    72fe:	9d 2c       	mov	r9, r13
    7300:	0b c0       	rjmp	.+22     	; 0x7318 <vfprintf+0x320>
    7302:	9d 2c       	mov	r9, r13
    7304:	9e 0c       	add	r9, r14
    7306:	91 1a       	sub	r9, r17
    7308:	1e 2d       	mov	r17, r14
    730a:	06 c0       	rjmp	.+12     	; 0x7318 <vfprintf+0x320>
    730c:	80 e2       	ldi	r24, 0x20	; 32
    730e:	90 e0       	ldi	r25, 0x00	; 0
    7310:	b3 01       	movw	r22, r6
    7312:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    7316:	1f 5f       	subi	r17, 0xFF	; 255
    7318:	1e 15       	cp	r17, r14
    731a:	c0 f3       	brcs	.-16     	; 0x730c <vfprintf+0x314>
    731c:	04 c0       	rjmp	.+8      	; 0x7326 <vfprintf+0x32e>
    731e:	1e 15       	cp	r17, r14
    7320:	10 f4       	brcc	.+4      	; 0x7326 <vfprintf+0x32e>
    7322:	e1 1a       	sub	r14, r17
    7324:	01 c0       	rjmp	.+2      	; 0x7328 <vfprintf+0x330>
    7326:	ee 24       	eor	r14, r14
    7328:	04 ff       	sbrs	r16, 4
    732a:	0f c0       	rjmp	.+30     	; 0x734a <vfprintf+0x352>
    732c:	80 e3       	ldi	r24, 0x30	; 48
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	b3 01       	movw	r22, r6
    7332:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    7336:	02 ff       	sbrs	r16, 2
    7338:	1d c0       	rjmp	.+58     	; 0x7374 <vfprintf+0x37c>
    733a:	01 fd       	sbrc	r16, 1
    733c:	03 c0       	rjmp	.+6      	; 0x7344 <vfprintf+0x34c>
    733e:	88 e7       	ldi	r24, 0x78	; 120
    7340:	90 e0       	ldi	r25, 0x00	; 0
    7342:	0e c0       	rjmp	.+28     	; 0x7360 <vfprintf+0x368>
    7344:	88 e5       	ldi	r24, 0x58	; 88
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	0b c0       	rjmp	.+22     	; 0x7360 <vfprintf+0x368>
    734a:	80 2f       	mov	r24, r16
    734c:	86 78       	andi	r24, 0x86	; 134
    734e:	91 f0       	breq	.+36     	; 0x7374 <vfprintf+0x37c>
    7350:	01 ff       	sbrs	r16, 1
    7352:	02 c0       	rjmp	.+4      	; 0x7358 <vfprintf+0x360>
    7354:	8b e2       	ldi	r24, 0x2B	; 43
    7356:	01 c0       	rjmp	.+2      	; 0x735a <vfprintf+0x362>
    7358:	80 e2       	ldi	r24, 0x20	; 32
    735a:	f7 fc       	sbrc	r15, 7
    735c:	8d e2       	ldi	r24, 0x2D	; 45
    735e:	90 e0       	ldi	r25, 0x00	; 0
    7360:	b3 01       	movw	r22, r6
    7362:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    7366:	06 c0       	rjmp	.+12     	; 0x7374 <vfprintf+0x37c>
    7368:	80 e3       	ldi	r24, 0x30	; 48
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	b3 01       	movw	r22, r6
    736e:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    7372:	9a 94       	dec	r9
    7374:	d9 14       	cp	r13, r9
    7376:	c0 f3       	brcs	.-16     	; 0x7368 <vfprintf+0x370>
    7378:	da 94       	dec	r13
    737a:	f1 01       	movw	r30, r2
    737c:	ed 0d       	add	r30, r13
    737e:	f1 1d       	adc	r31, r1
    7380:	80 81       	ld	r24, Z
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	b3 01       	movw	r22, r6
    7386:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    738a:	dd 20       	and	r13, r13
    738c:	a9 f7       	brne	.-22     	; 0x7378 <vfprintf+0x380>
    738e:	06 c0       	rjmp	.+12     	; 0x739c <vfprintf+0x3a4>
    7390:	80 e2       	ldi	r24, 0x20	; 32
    7392:	90 e0       	ldi	r25, 0x00	; 0
    7394:	b3 01       	movw	r22, r6
    7396:	0e 94 ef 39 	call	0x73de	; 0x73de <fputc>
    739a:	ea 94       	dec	r14
    739c:	ee 20       	and	r14, r14
    739e:	c1 f7       	brne	.-16     	; 0x7390 <vfprintf+0x398>
    73a0:	43 ce       	rjmp	.-890    	; 0x7028 <vfprintf+0x30>
    73a2:	f3 01       	movw	r30, r6
    73a4:	66 81       	ldd	r22, Z+6	; 0x06
    73a6:	77 81       	ldd	r23, Z+7	; 0x07
    73a8:	cb 01       	movw	r24, r22
    73aa:	2b 96       	adiw	r28, 0x0b	; 11
    73ac:	e2 e1       	ldi	r30, 0x12	; 18
    73ae:	0c 94 bd 37 	jmp	0x6f7a	; 0x6f7a <__epilogue_restores__>

000073b2 <strnlen_P>:
    73b2:	fc 01       	movw	r30, r24
    73b4:	05 90       	lpm	r0, Z+
    73b6:	61 50       	subi	r22, 0x01	; 1
    73b8:	70 40       	sbci	r23, 0x00	; 0
    73ba:	01 10       	cpse	r0, r1
    73bc:	d8 f7       	brcc	.-10     	; 0x73b4 <strnlen_P+0x2>
    73be:	80 95       	com	r24
    73c0:	90 95       	com	r25
    73c2:	8e 0f       	add	r24, r30
    73c4:	9f 1f       	adc	r25, r31
    73c6:	08 95       	ret

000073c8 <strnlen>:
    73c8:	fc 01       	movw	r30, r24
    73ca:	61 50       	subi	r22, 0x01	; 1
    73cc:	70 40       	sbci	r23, 0x00	; 0
    73ce:	01 90       	ld	r0, Z+
    73d0:	01 10       	cpse	r0, r1
    73d2:	d8 f7       	brcc	.-10     	; 0x73ca <strnlen+0x2>
    73d4:	80 95       	com	r24
    73d6:	90 95       	com	r25
    73d8:	8e 0f       	add	r24, r30
    73da:	9f 1f       	adc	r25, r31
    73dc:	08 95       	ret

000073de <fputc>:
    73de:	0f 93       	push	r16
    73e0:	1f 93       	push	r17
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
    73e6:	8c 01       	movw	r16, r24
    73e8:	eb 01       	movw	r28, r22
    73ea:	8b 81       	ldd	r24, Y+3	; 0x03
    73ec:	81 ff       	sbrs	r24, 1
    73ee:	1b c0       	rjmp	.+54     	; 0x7426 <fputc+0x48>
    73f0:	82 ff       	sbrs	r24, 2
    73f2:	0d c0       	rjmp	.+26     	; 0x740e <fputc+0x30>
    73f4:	2e 81       	ldd	r18, Y+6	; 0x06
    73f6:	3f 81       	ldd	r19, Y+7	; 0x07
    73f8:	8c 81       	ldd	r24, Y+4	; 0x04
    73fa:	9d 81       	ldd	r25, Y+5	; 0x05
    73fc:	28 17       	cp	r18, r24
    73fe:	39 07       	cpc	r19, r25
    7400:	64 f4       	brge	.+24     	; 0x741a <fputc+0x3c>
    7402:	e8 81       	ld	r30, Y
    7404:	f9 81       	ldd	r31, Y+1	; 0x01
    7406:	01 93       	st	Z+, r16
    7408:	f9 83       	std	Y+1, r31	; 0x01
    740a:	e8 83       	st	Y, r30
    740c:	06 c0       	rjmp	.+12     	; 0x741a <fputc+0x3c>
    740e:	e8 85       	ldd	r30, Y+8	; 0x08
    7410:	f9 85       	ldd	r31, Y+9	; 0x09
    7412:	80 2f       	mov	r24, r16
    7414:	09 95       	icall
    7416:	89 2b       	or	r24, r25
    7418:	31 f4       	brne	.+12     	; 0x7426 <fputc+0x48>
    741a:	8e 81       	ldd	r24, Y+6	; 0x06
    741c:	9f 81       	ldd	r25, Y+7	; 0x07
    741e:	01 96       	adiw	r24, 0x01	; 1
    7420:	9f 83       	std	Y+7, r25	; 0x07
    7422:	8e 83       	std	Y+6, r24	; 0x06
    7424:	02 c0       	rjmp	.+4      	; 0x742a <fputc+0x4c>
    7426:	0f ef       	ldi	r16, 0xFF	; 255
    7428:	1f ef       	ldi	r17, 0xFF	; 255
    742a:	c8 01       	movw	r24, r16
    742c:	df 91       	pop	r29
    742e:	cf 91       	pop	r28
    7430:	1f 91       	pop	r17
    7432:	0f 91       	pop	r16
    7434:	08 95       	ret

00007436 <__ultoa_invert>:
    7436:	fa 01       	movw	r30, r20
    7438:	aa 27       	eor	r26, r26
    743a:	28 30       	cpi	r18, 0x08	; 8
    743c:	51 f1       	breq	.+84     	; 0x7492 <__ultoa_invert+0x5c>
    743e:	20 31       	cpi	r18, 0x10	; 16
    7440:	81 f1       	breq	.+96     	; 0x74a2 <__ultoa_invert+0x6c>
    7442:	e8 94       	clt
    7444:	6f 93       	push	r22
    7446:	6e 7f       	andi	r22, 0xFE	; 254
    7448:	6e 5f       	subi	r22, 0xFE	; 254
    744a:	7f 4f       	sbci	r23, 0xFF	; 255
    744c:	8f 4f       	sbci	r24, 0xFF	; 255
    744e:	9f 4f       	sbci	r25, 0xFF	; 255
    7450:	af 4f       	sbci	r26, 0xFF	; 255
    7452:	b1 e0       	ldi	r27, 0x01	; 1
    7454:	3e d0       	rcall	.+124    	; 0x74d2 <__ultoa_invert+0x9c>
    7456:	b4 e0       	ldi	r27, 0x04	; 4
    7458:	3c d0       	rcall	.+120    	; 0x74d2 <__ultoa_invert+0x9c>
    745a:	67 0f       	add	r22, r23
    745c:	78 1f       	adc	r23, r24
    745e:	89 1f       	adc	r24, r25
    7460:	9a 1f       	adc	r25, r26
    7462:	a1 1d       	adc	r26, r1
    7464:	68 0f       	add	r22, r24
    7466:	79 1f       	adc	r23, r25
    7468:	8a 1f       	adc	r24, r26
    746a:	91 1d       	adc	r25, r1
    746c:	a1 1d       	adc	r26, r1
    746e:	6a 0f       	add	r22, r26
    7470:	71 1d       	adc	r23, r1
    7472:	81 1d       	adc	r24, r1
    7474:	91 1d       	adc	r25, r1
    7476:	a1 1d       	adc	r26, r1
    7478:	20 d0       	rcall	.+64     	; 0x74ba <__ultoa_invert+0x84>
    747a:	09 f4       	brne	.+2      	; 0x747e <__ultoa_invert+0x48>
    747c:	68 94       	set
    747e:	3f 91       	pop	r19
    7480:	2a e0       	ldi	r18, 0x0A	; 10
    7482:	26 9f       	mul	r18, r22
    7484:	11 24       	eor	r1, r1
    7486:	30 19       	sub	r19, r0
    7488:	30 5d       	subi	r19, 0xD0	; 208
    748a:	31 93       	st	Z+, r19
    748c:	de f6       	brtc	.-74     	; 0x7444 <__ultoa_invert+0xe>
    748e:	cf 01       	movw	r24, r30
    7490:	08 95       	ret
    7492:	46 2f       	mov	r20, r22
    7494:	47 70       	andi	r20, 0x07	; 7
    7496:	40 5d       	subi	r20, 0xD0	; 208
    7498:	41 93       	st	Z+, r20
    749a:	b3 e0       	ldi	r27, 0x03	; 3
    749c:	0f d0       	rcall	.+30     	; 0x74bc <__ultoa_invert+0x86>
    749e:	c9 f7       	brne	.-14     	; 0x7492 <__ultoa_invert+0x5c>
    74a0:	f6 cf       	rjmp	.-20     	; 0x748e <__ultoa_invert+0x58>
    74a2:	46 2f       	mov	r20, r22
    74a4:	4f 70       	andi	r20, 0x0F	; 15
    74a6:	40 5d       	subi	r20, 0xD0	; 208
    74a8:	4a 33       	cpi	r20, 0x3A	; 58
    74aa:	18 f0       	brcs	.+6      	; 0x74b2 <__ultoa_invert+0x7c>
    74ac:	49 5d       	subi	r20, 0xD9	; 217
    74ae:	31 fd       	sbrc	r19, 1
    74b0:	40 52       	subi	r20, 0x20	; 32
    74b2:	41 93       	st	Z+, r20
    74b4:	02 d0       	rcall	.+4      	; 0x74ba <__ultoa_invert+0x84>
    74b6:	a9 f7       	brne	.-22     	; 0x74a2 <__ultoa_invert+0x6c>
    74b8:	ea cf       	rjmp	.-44     	; 0x748e <__ultoa_invert+0x58>
    74ba:	b4 e0       	ldi	r27, 0x04	; 4
    74bc:	a6 95       	lsr	r26
    74be:	97 95       	ror	r25
    74c0:	87 95       	ror	r24
    74c2:	77 95       	ror	r23
    74c4:	67 95       	ror	r22
    74c6:	ba 95       	dec	r27
    74c8:	c9 f7       	brne	.-14     	; 0x74bc <__ultoa_invert+0x86>
    74ca:	00 97       	sbiw	r24, 0x00	; 0
    74cc:	61 05       	cpc	r22, r1
    74ce:	71 05       	cpc	r23, r1
    74d0:	08 95       	ret
    74d2:	9b 01       	movw	r18, r22
    74d4:	ac 01       	movw	r20, r24
    74d6:	0a 2e       	mov	r0, r26
    74d8:	06 94       	lsr	r0
    74da:	57 95       	ror	r21
    74dc:	47 95       	ror	r20
    74de:	37 95       	ror	r19
    74e0:	27 95       	ror	r18
    74e2:	ba 95       	dec	r27
    74e4:	c9 f7       	brne	.-14     	; 0x74d8 <__ultoa_invert+0xa2>
    74e6:	62 0f       	add	r22, r18
    74e8:	73 1f       	adc	r23, r19
    74ea:	84 1f       	adc	r24, r20
    74ec:	95 1f       	adc	r25, r21
    74ee:	a0 1d       	adc	r26, r0
    74f0:	08 95       	ret

000074f2 <_exit>:
    74f2:	f8 94       	cli

000074f4 <__stop_program>:
    74f4:	ff cf       	rjmp	.-2      	; 0x74f4 <__stop_program>
